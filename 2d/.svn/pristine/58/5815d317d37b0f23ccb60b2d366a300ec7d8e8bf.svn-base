#R CMD BATCH --no-save '--args run<-22' 2D-SimulatedNodes.R 

library(ggplot2)
library(reshape)


mw2dbm <- function (milliW) { dBm <- 10*log10((milliW)); return(dBm) }
dbm2mw <- function (dBm)   { milliW <- 10^(dBm/10); return(milliW) }

rayleigh_rnd <- function(mean=0,sd=1) { return(sqrt(rnorm(1,mean,sd)^2 + rnorm(1,mean,sd)^2)) }


## Pr_in_mW
#  Pt 	: Transmit power 
#  fc 	: Frequency
#  d 	: Distance in meters
#  alpha: Path loss Alpha
#  h 	: Rayleigh random variable
#  Pn 	: White noise
##
Pr_in_mW <- function (Pt, fc, d, alpha, h, Pn) {
  c <- 2.998e8 #speed of light (m/s)
  lambda <- c/fc;
  Pr <- (h^2)*Pt*((lambda/(4*pi*d))^alpha) + Pn^2
  return(Pr)
}

if (FALSE){
  # Radio parameters
  Pt_dbm <- 0 
  fc1 <- 2.405e9
  spacing <- 0.005e9
  channels <- (11:26)
  ch1 <- channels[1]
  ch2fc <- function (ch, firstChannel=ch1, firstFreq= fc1, ch_spacing=spacing) {return((ch-firstChannel)*ch_spacing + firstFreq)}
  radioSensitivity <- -97
  # Channel Settings
  pathloss_alpha <- 3
  sd_rayleigh <- 15 #org 10, 15 is very overlapping
  mean_rayleigh <- 0
  
  sd_noise_dbm <- -45 
  #sd_noise_dbm <- -30 #test : -30 daha iyi galiba. yakin mesafe icin
  mean_noise <- 0
}
sd_noise_mW <- dbm2mw (sd_noise_dbm)
Pt_mW <- dbm2mw (Pt_dbm)

parameters <- c("sd_rayleigh"=sd_rayleigh,"sd_noise_dbm"=sd_noise_dbm, "Nx"=Nx,"Ny"=Ny,"dx"=dx,"dy"=dy)
#Truth <- matrix(c(0:19), nrow=2, byrow=TRUE)

#Nx <- 10  # Number of nodes in X-axis
#Ny <- 2 # Number of nodes in Y-axis
#Truth <- matrix (c(0:(Nx*Ny-1)), nrow=Ny, byrow=TRUE)
#dx <- 1 # internode distances on x-dimension, first tested value: 2
#dy <- 1.3 # internode distances on y-dimension, first tested value: 3


truth.distance <- function (positions, N1, N2) {
  x1 <- which(positions == N1, arr.ind=TRUE)[,"row"]
  y1 <- which(positions == N1, arr.ind=TRUE)[,"col"]
  
  x2 <- which(positions == N2, arr.ind=TRUE)[,"row"]
  y2 <- which(positions == N2, arr.ind=TRUE)[,"col"]
  
  return ( sqrt( ((x2 - x1)*dy)^2 + ((y2 - y1)*dx)^2 ) )
}

ALL_CHANNELS <- 11:26
PACKET_NUMS <- 1:40
colnames.list <- c("sender","receiver","channel","packetnum","rssi")

if (!("run" %in% ls())) {
  args <- commandArgs(TRUE)
  if(length(args) > 0){ 
    eval(parse(text=args[1])) 
  } else {
    run <- 0
  }
}
#runSet <- 1

#for (run in runSet){
  cat("Run: ", run, "\n")
  
  #measurements <- data.frame(sender=integer(0), receiver = integer(0), channel = integer(0), packetnum = integer(0), rssi = integer(0))

dataSize <- length(Truth)*(length(Truth)-1)*length(ALL_CHANNELS)*length(PACKET_NUMS)
  measurements <- matrix(NA,nrow = dataSize, ncol=5, dimnames=list(NULL,c("sender","receiver","channel","packetnum","rssi")))

  pb <- txtProgressBar(min = 0, max = dataSize, style = 3) #|r|*|s|*|ch|*|pn|
  validRows <- 0
pb_progress <- 0
  for (s in Truth) {
    for (r in Truth){
      if(r == s)
        next;
      dist.s.r <- truth.distance(Truth,s,r)
      for (ch in ALL_CHANNELS){
      
        h <- rayleigh_rnd(mean_rayleigh, sd_rayleigh)
        
        for (pn in PACKET_NUMS){
          #cat("Sender:",s, " Receiver:", r, " -- Channel:", ch, " Packetnum:", pn, "\n")
          Pn <- rnorm(1, mean=0, sd=sd_noise_mW)
          P <- Pr_in_mW(Pt_mW, ch2fc(ch), dist.s.r, pathloss_alpha, h, Pn)
          rssi <- round(mw2dbm(P)) - 5
          if (rssi >= radioSensitivity){
            validRows <- validRows + 1
            measurements[validRows,] <- c(s,r,ch,pn,rssi)
          }
            #measurements <- rbind(measurements,c(s,r,ch,pn,rssi)) # this is stupid to use for big sizes, too slow          
        }
        pb_progress <- pb_progress + length(PACKET_NUMS) #increment
        setTxtProgressBar(pb, pb_progress); #cat("\n"); 
      }
    }
  }
 measurements <- measurements[1:validRows,]
  colnames(measurements) <- colnames.list
#   if (outputToFile){
#     filename <- paste(outputDirectory,"2dSim-",Nx,"x",Ny,"-",dx,"m*",dy,"m-",run,".txt",sep="")
#     write.table(measurements, filename, col.names=TRUE, row.names=FALSE)
#   }
#} # for run

cat("Finished simulating measurements: Run ", run, "\n")
# plotSamples <- TRUE
if (plotSamples){
  a<-subset(as.data.frame(measurements),sender==0 & receiver %in% c(10,1,11,2,12)); a$receiver <- factor(a$receiver, levels=c(1,10,11,2,12))
  p <- ggplot (a,aes(x=channel,y=rssi,group=receiver)) + geom_boxplot() + facet_grid( . ~ receiver)
  #p <- ggplot (a,aes(x=channel,y=rssi,group=channel)) + geom_boxplot() + facet_grid( . ~ receiver)
  print(p)
}

