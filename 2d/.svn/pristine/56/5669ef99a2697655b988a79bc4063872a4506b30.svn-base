# 24/03/2015

getFirstColumnRefs <- function (refnodes, packets, numRows) {
  ## Discover the first column; refNodeSet
  knownNode <- refnodes[1]
  refNodeSet <- c(knownNode)
  for (ri in 1:(numRows-2)){
    # Choose two candidates at 90 degrees to each other
    winners <- getSendersWinningReceivers(allPackets=packets,theSender=knownNode,excludeList=refNodeSet,includeList=NULL)
    firstCandidate <- mostFreqReceiver(valueSet=winners,tIndex=1)
    secondCandidate <- mostFreqReceiver(valueSet=winners,tIndex=2)
    
    if(refnodes[2] %in% c(firstCandidate,secondCandidate)){ # Arrived at the second reference node; with for loop this must never be TRUE
      refNodeSet <- c(refNodeSet, refnodes[2])
      #print(refNodeSet)
      break
    }
    
    # Choose the closest one of the two cantidates to the other refnode
    winners <- getSendersWinningReceivers(allPackets=packets,theSender=refnodes[2],excludeList=NULL,includeList=c(firstCandidate,secondCandidate))
    knownNode <- mostFreqReceiver(winners, tIndex= 1)
    #cat (knownNode, "with P=", findProbability(winners[1,], 1, length(winners[1,])),"\n")
    refNodeSet <- c(refNodeSet, knownNode)
    #print(refNodeSet)
  }
  refNodeSet <- c(refNodeSet, refnodes[2]) # With for loop, only nodes between refnodes are discovered
  return(refNodeSet)
}

pruneThreshold <- 2
source("probSeqFunctions-fixedPrune.R")

topQuantile <- 1
rssMaxDifference <- 0 

run.verbose <- FALSE
produceOutput <- FALSE # for probabilitySeqDF and probabilitiesDF. This file will produce output anyways

cols <- Nx <- 5; rows <- Ny <- 4; dx <- 3; dy <- 3; 

experimentSet <-8#  1:100 # 3x3fails: c(8, 16, 34, 54, 59, 83, 90) # 5x5fails: c(8, 34, 41, 59, 81, 83, 90)
Truth <- matrix (c(0:(Nx*Ny-1)), nrow=Ny, byrow=TRUE)
refnodes <- c(0,15)
numnodes <- length(Truth)
#directory <- paste("./simOut-",Nx,"x",Ny,"-",dx,"mX",dy,"m-Noise",sd_noise_dbm,"dbm/",sep="")
directory <- "inputs_simulation/equiDist/simOut-5x4-3mX3m-Noise-45dbm/"

highReliable <- mediumReliable <- lowReliable <- c()
totalSuccess <- 0
failedExpNos <- c()
lostCandidateToCompetitor <- c()
for(expNo in experimentSet)
{   
  startTime <- proc.time()
  
  TRACE_FILE <- paste(directory,"2dSim-",Nx,"x",Ny,"-",dx,"mX",dy,"m-",expNo,".txt",sep="")
  cat("Loading:",TRACE_FILE, "\n")  
  packets <- read.table(TRACE_FILE,  na.strings="", header=TRUE)
  packets$time  <- 0
  packets$power <- 0
  
  refNodeSet <- getFirstColumnRefs(refnodes, packets, Ny)  

  print(refNodeSet)
  
  result <- matrix(data=-1,nrow=Ny, ncol=Nx)
  
  result[,1] <- refNodeSet # place refnodes in place: along the 1st column
  # Row-by-row select the next node at each column
  for (ci in 2:Nx){ # for each column
    for (ri in 1:Ny){ # for each row; only odds: which(1:Ny %% 2 == 1)
     # if (ci == 3) browser()
      if (result[ri,ci] != -1) next;
      winners <- getSendersWinningReceivers(allPackets=packets, theSender=result[ri,(ci-1)], excludeSet <- as.integer(result))
      closestNode <- mostFreqReceiver(winners,tIndex=1)
      #cat (closestNode, "with P=", findProbability(winners[1,], 1, length(winners[1,])),"\n")
      if (ri + 1 <= Ny) { # if next row exists
        #####
        closestNodeP <- findProbabilityByName(winners[1,],name=closestNode)
        secondClosestNode <- mostFreqReceiver(winners,tIndex=2)
      
        nextNodeWinners <- getSendersWinningReceivers(allPackets=packets, theSender=result[ri+1,(ci-1)], excludeSet <- as.integer(result))
        closestNodeForNextNode <- mostFreqReceiver(nextNodeWinners,tIndex=1)
        closestNodeForNextNodeP <- findProbabilityByName(nextNodeWinners[1,],name=closestNodeForNextNode)
        
        if (closestNodeForNextNode != closestNode) {
          result[ri,ci] <- closestNode 
        }else 
        if (closestNodeForNextNode == closestNode) {
          if (closestNodeP >= closestNodeForNextNodeP) {
            result[ri,ci] <- closestNode 
          } else {
            result[ri+1,ci] <- closestNodeForNextNode # ?= closestNode
            # Select a new one
            winners <- getSendersWinningReceivers(allPackets=packets, theSender=result[ri,(ci-1)], excludeSet <- as.integer(result))
            closestNode <- mostFreqReceiver(winners,tIndex=1)
            result[ri,ci] <- closestNode 
            print("Lost candidate to Competitor"); lostCandidateToCompetitor <- c(lostCandidateToCompetitor, expNo)
          }
        }
        
        #####
      } else {
        result[ri,ci] <- closestNode 
      } #if ...
      
    }
  }
  class(result) <- "integer"
  print(result)
  
  if (all.equal(Truth,result) == TRUE) {
    totalSuccess <- totalSuccess + 1
  } else {
    failedExpNos <- c(failedExpNos,expNo)
  }
  cat("Result is ", all.equal(Truth,result), "\t total: ",totalSuccess, "/",length(failedExpNos)+totalSuccess, "\n")
  
  ## Print Elapsed Time
  endTime <- proc.time()
  print(endTime-startTime)

  ## Reliability
  score <- 0
  # First column reverse:
  revRefNodeSet <- getFirstColumnRefs(rev(refnodes),packets, Ny)
  if (TRUE == all.equal(rev(refNodeSet),revRefNodeSet)) {
    print("First column matches")
    score <- score + 1
  }
  
  lastColumn <- result[,cols]
  
  lastColumnRefnodes <- c(result[1,cols], result[rows,cols])
  lastColumnRefnodeset <- getFirstColumnRefs(lastColumnRefnodes, packets, Ny)
  reverseLastColumnRefnodeset <- getFirstColumnRefs(rev(lastColumnRefnodes), packets, Ny)
    
  if (TRUE == all.equal(as.integer(lastColumnRefnodeset),lastColumn) || 
        TRUE == all.equal(as.integer(reverseLastColumnRefnodeset),lastColumn) ){
      print("Last column matches")
      score <- score + 1
      
      if (TRUE == all.equal(lastColumnRefnodeset,rev(reverseLastColumnRefnodeset)))
        score <- score + 1
  }
  
  if (score == 3)
  {
    highReliable <- c( highReliable , expNo)
    cat("ExpNo:",expNo," reliability is: High!\n")
  } else if (score == 2){
    mediumReliable <- c(mediumReliable, expNo)
    cat("ExpNo:",expNo," reliability is: Medium!\n")
  } else {
    lowReliable <- c(lowReliable, expNo)
    cat("ExpNo:",expNo," reliability is: Low!\n")
  }
  
  ## Reliability:
  #First column (fc) ref nodes match reverse (rfc)
  #Last column(lc) in refnode check = lr
  #Last column reverse refnode check = lrr
  #Lastcolumn in lr or lrr
  
  # if (fc == rfc && lc %in% c(lr,lrr))
  #   if (lr==lrr) then high
  #   else medium
  # 3 comparisons. 3 matches = high, 2 matches = medium, less matches = low reliablity
  #   1: fc == rfc
  #   2: lc %in% c(lr,lrr)
  #   3: lr==lrr
  
  
} # for expNo

cat("totalSuccess=",totalSuccess,"/",length(experimentSet) ,"\n")
