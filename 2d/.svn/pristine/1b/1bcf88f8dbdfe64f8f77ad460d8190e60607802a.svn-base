# 24/03/2015

getFirstColumnRefs <- function (refnodes, packets) {
  ## Discover the first column; refNodeSet
  knownNode <- refnodes[1]
  refNodeSet <- c(knownNode)
  while (TRUE){
    # Choose two candidates at 90 degrees to each other
    winners <- getSendersWinningReceivers(allPackets=packets,theSender=knownNode,excludeList=refNodeSet,includeList=NULL)
    firstCandidate <- mostFreqReceiver(valueSet=winners,tIndex=1)
    secondCandidate <- mostFreqReceiver(valueSet=winners,tIndex=2)
    
    if(refnodes[2] %in% c(firstCandidate,secondCandidate)){ # Arrived at the second reference node
      refNodeSet <- c(refNodeSet, refnodes[2])
      print(refNodeSet)
      break
    }
    
    # Choose the closest one of the two cantidates to the other refnode
    winners <- getSendersWinningReceivers(allPackets=packets,theSender=refnodes[2],excludeList=NULL,includeList=c(firstCandidate,secondCandidate))
    knownNode <- mostFreqReceiver(winners, tIndex= 1)
    refNodeSet <- c(refNodeSet, knownNode)
    print(refNodeSet)
  }
  return(refNodeSet)
}

pruneThreshold <- 2
source("probSeqFunctions-fixedPrune.R")

topQuantile <- 1
rssMaxDifference <- 0 

run.verbose <- FALSE
produceOutput <- FALSE # for probabilitySeqDF and probabilitiesDF. This file will produce output anyways

cols <- Nx <- 5; rows <- Ny <- 4; dx <- 3; dy <- 3; 

experimentSet <- 1
Truth <- matrix (c(0:(Nx*Ny-1)), nrow=Ny, byrow=TRUE)
refnodes <- c(0,15)
numnodes <- length(Truth)
#directory <- paste("./simOut-",Nx,"x",Ny,"-",dx,"mX",dy,"m-Noise",sd_noise_dbm,"dbm/",sep="")
directory <- "inputs_simulation/3x3_ideal/"


for(expNo in experimentSet)
{   
  startTime <- proc.time()
  
  TRACE_FILE <- paste(directory,"2dSim-",Nx,"x",Ny,"-",dx,"mX",dy,"m-",expNo,".txt",sep="")
  cat("Loading:",TRACE_FILE, "\n")  
  packets <- read.table(TRACE_FILE,  na.strings="", header=TRUE)
  packets$time  <- 0
  packets$power <- 0
  
  refNodeSet <- getFirstColumnRefs(refnodes, packets)  

  print(refNodeSet)
  
  result <- matrix(data=-1,nrow=Ny, ncol=Nx)
  
  result[,1] <- refNodeSet # place refnodes in place: along the 1st column
  
  # Row-by-row select the next node at each column
  for (ci in 2:Nx){ # for each column
    for (ri in 1:Ny){ # for each row
      winners <- getSendersWinningReceivers(allPackets=packets, theSender=result[ri,1], excludeSet <- as.integer(result))
      closestNode <- mostFreqReceiver(winners,tIndex=1)
      result[ri,ci] <- closestNode
    }
  }
  class(result) <- "integer"
  print(result)
  
  cat("Result is ", all.equal(Truth,result), "\n")
  
  ## Print Elapsed Time
  endTime <- proc.time()
  print(endTime-startTime)

  ## Reliability
  revRefNodeSet <- getFirstColumnRefs(rev(refnodes),packets)
  if (TRUE == all.equal(rev(refNodeSet),revRefNodeSet))
    print("First column matches")
  
  checkrefnodes <- c(result[1,cols], result[rows,cols])
  checkRefNodeSet <- getFirstColumnRefs(checkrefnodes, packets)
  
  if (TRUE == all.equal(as.integer(checkRefNodeSet), result[,cols]))
      print("Last column matches")
  
} # for expNo


