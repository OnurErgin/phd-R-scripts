{
    "collab_server" : "",
    "contents" : "#R CMD BATCH --no-save '--args run<-22' 2D-SimulatedNodes.R \n\nlibrary(ggplot2)\nlibrary(reshape)\n\n\nmw2dbm <- function (milliW) { dBm <- 10*log10((milliW)); return(dBm) }\ndbm2mw <- function (dBm)   { milliW <- 10^(dBm/10); return(milliW) }\n\nrayleigh_rnd <- function(mean=0,sd=1) { return(sqrt(rnorm(1,mean,sd)^2 + rnorm(1,mean,sd)^2)) }\n\n\n## Pr_in_mW\n#  Pt \t: Transmit power \n#  fc \t: Frequency\n#  d \t: Distance in meters\n#  alpha: Path loss Alpha\n#  h \t: Rayleigh random variable\n#  Pn \t: White noise\n##\nPr_in_mW <- function (Pt, fc, d, alpha, h, Pn) {\n  c <- 2.998e8 #speed of light (m/s)\n  lambda <- c/fc;\n  Pr <- (h^2)*Pt*((lambda/(4*pi*d))^alpha) + Pn^2\n  return(Pr)\n}\n\nif (FALSE){\n  # Radio parameters\n  Pt_dbm <- 0 \n  fc1 <- 2.405e9\n  spacing <- 0.005e9\n  channels <- (11:26)\n  ch1 <- channels[1]\n  ch2fc <- function (ch, firstChannel=ch1, firstFreq= fc1, ch_spacing=spacing) {return((ch-firstChannel)*ch_spacing + firstFreq)}\n  radioSensitivity <- -97\n  # Channel Settings\n  pathloss_alpha <- 3\n  sd_rayleigh <- 15 #org 10, 15 is very overlapping\n  mean_rayleigh <- 0\n  \n  sd_noise_dbm <- -45 \n  #sd_noise_dbm <- -30 #test : -30 daha iyi galiba. yakin mesafe icin\n  mean_noise <- 0\n}\nsd_noise_mW <- dbm2mw (sd_noise_dbm)\nPt_mW <- dbm2mw (Pt_dbm)\n\nparameters <- c(\"sd_rayleigh\"=sd_rayleigh,\"sd_noise_dbm\"=sd_noise_dbm, \"Nx\"=Nx,\"Ny\"=Ny,\"dx\"=dx,\"dy\"=dy)\n#Truth <- matrix(c(0:19), nrow=2, byrow=TRUE)\n\n#Nx <- 10  # Number of nodes in X-axis\n#Ny <- 2 # Number of nodes in Y-axis\n#Truth <- matrix (c(0:(Nx*Ny-1)), nrow=Ny, byrow=TRUE)\n#dx <- 1 # internode distances on x-dimension, first tested value: 2\n#dy <- 1.3 # internode distances on y-dimension, first tested value: 3\n\n\ntruth.distance <- function (positions, N1, N2) {\n  x1 <- which(positions == N1, arr.ind=TRUE)[,\"row\"]\n  y1 <- which(positions == N1, arr.ind=TRUE)[,\"col\"]\n  \n  x2 <- which(positions == N2, arr.ind=TRUE)[,\"row\"]\n  y2 <- which(positions == N2, arr.ind=TRUE)[,\"col\"]\n  \n  return ( sqrt( ((x2 - x1)*dy)^2 + ((y2 - y1)*dx)^2 ) )\n}\n\nALL_CHANNELS <- 11:26\nPACKET_NUMS <- 1:40\ncolnames.list <- c(\"sender\",\"receiver\",\"channel\",\"packetnum\",\"rssi\")\n\nif (!(\"run\" %in% ls())) {\n  args <- commandArgs(TRUE)\n  if(length(args) > 0){ \n    eval(parse(text=args[1])) \n  } else {\n    run <- 0\n  }\n}\n#runSet <- 1\n\n#for (run in runSet){\n  cat(\"Run: \", run, \"\\n\")\n  \n  #measurements <- data.frame(sender=integer(0), receiver = integer(0), channel = integer(0), packetnum = integer(0), rssi = integer(0))\n\ndataSize <- length(Truth[Truth != -1])*(length(Truth[Truth != -1])-1)*length(ALL_CHANNELS)*length(PACKET_NUMS)\n  measurements <- matrix(NA,nrow = dataSize, ncol=5, dimnames=list(NULL,c(\"sender\",\"receiver\",\"channel\",\"packetnum\",\"rssi\")))\n\n  pb <- txtProgressBar(min = 0, max = dataSize, style = 3) #|r|*|s|*|ch|*|pn|\n  validRows <- 0\npb_progress <- 0\n  for (s in Truth[Truth != -1]) {\n    for (r in Truth[Truth != -1]){\n      if(r == s)\n        next;\n      \n      dist.s.r <- truth.distance(Truth,s,r)\n      for (ch in ALL_CHANNELS){\n      \n        h <- rayleigh_rnd(mean_rayleigh, sd_rayleigh)\n        \n        for (pn in PACKET_NUMS){\n          #cat(\"Sender:\",s, \" Receiver:\", r, \" -- Channel:\", ch, \" Packetnum:\", pn, \"\\n\")\n          Pn <- rnorm(1, mean=0, sd=sd_noise_mW)\n          P <- Pr_in_mW(Pt_mW, ch2fc(ch), dist.s.r, pathloss_alpha, h, Pn)\n          rssi <- round(mw2dbm(P)) - 5\n          if (rssi >= radioSensitivity){\n            validRows <- validRows + 1\n            measurements[validRows,] <- c(s,r,ch,pn,rssi)\n          }\n            #measurements <- rbind(measurements,c(s,r,ch,pn,rssi)) # this is stupid to use for big sizes, too slow          \n        }\n        pb_progress <- pb_progress + length(PACKET_NUMS) #increment\n        setTxtProgressBar(pb, pb_progress); #cat(\"\\n\"); \n      }\n    }\n  }\n measurements <- measurements[1:validRows,]\n  colnames(measurements) <- colnames.list\n#   if (outputToFile){\n#     filename <- paste(outputDirectory,\"2dSim-\",Nx,\"x\",Ny,\"-\",dx,\"m*\",dy,\"m-\",run,\".txt\",sep=\"\")\n#     write.table(measurements, filename, col.names=TRUE, row.names=FALSE)\n#   }\n#} # for run\n\ncat(\"Finished simulating measurements: Run \", run, \"\\n\")\n# plotSamples <- TRUE\nif (plotSamples && FALSE){\n  a<-subset(as.data.frame(measurements),sender==0 & receiver %in% c(10,1,11,2,12)); a$receiver <- factor(a$receiver, levels=c(1,10,11,2,12))\n  p <- ggplot (a,aes(x=channel,y=rssi,group=receiver)) + geom_boxplot() + facet_grid( . ~ receiver)\n  #p <- ggplot (a,aes(x=channel,y=rssi,group=channel)) + geom_boxplot() + facet_grid( . ~ receiver)\n  print(p)\n}\n\n",
    "created" : 1416836544392.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "626532776",
    "id" : "F28E2A0D",
    "lastKnownWriteTime" : 1429885279,
    "last_content_update" : 0,
    "path" : "~/phd/R/2d/2D-SimulatedNodes.R",
    "project_path" : "2D-SimulatedNodes.R",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}