{
    "collab_server" : "",
    "contents" : "library(ggplot2)\n\nallResultsDF <- read.table(\"all_results.DF\", header=TRUE)\n\n######################### NOISE DIVERSITY ################################## \nplotNoiseDiversity <- function (allResultsDF, Nx, Ny, dx, dy, experimentSize, sd_noise_dbm, totalVerifiedSuccess) {\n  noise_diversityDF <- subset(allResultsDF, Nx==5 & Ny==4 & dx==5 & dy==10 & experimentSize==100, select=c(5,8:19))\n  \n  \n  # Plot total success\n  p_success <- ggplot( noise_diversityDF, aes(x=sd_noise_dbm, y=totalVerifiedSuccess)) + geom_line(size=1.5) #geom_bar(stat=\"identity\") #+ scale_x_reverse()\n  p_success <- p_success + labs(x=\"Standard deviation of Noise Level [dbm]\", y=\"Verified Success [%]\") + \n                            scale_y_discrete(breaks=seq(from=0,to=100,by=10),limits=c(0:100)) + \n                            scale_x_continuous(breaks=seq(-80,-20,5)) +\n                            theme(plot.title = element_text(lineheight=.8, face=\"bold\", size=14)) + ggtitle(\"5x4 Grid, dx=5m, dy=10m\")\n  print(p_success)\n  ggsave(\"SuccessXnoise_level.pdf\")\n}\n\n# Plot noise distributions\nplotNoiseDistributions <- function (noise_diversityDF) {\n  Pn_collection <- data.frame()\n  for (sd_noise_dbm in noise_diversityDF$sd_noise_dbm){\n    sd_noise_mW <- dbm2mw(sd_noise_dbm)\n    for (i in 1:100){\n      Pn <- round(mw2dbm(rnorm(1, mean=0, sd=sd_noise_mW)^2))\n      Pn_collection <- rbind(Pn_collection, data.frame(sd_noise_dbm=sd_noise_dbm, Pn=Pn))\n    }\n  }\n  \n  p_noise <- ggplot(Pn_collection, aes(x=sd_noise_dbm, y=Pn, group=sd_noise_dbm)) + geom_boxplot() #+ scale_x_reverse()\n  p_noise <- p_noise + ylab(\"distribution\") + xlab(\"Standard deviation of Noise Level [dbm]\")\n  print(p_noise)\n}\n\n#pdf(file=plotName, height=15, width=8)\n#  grid.arrange(p_success,p_noise,ncol=1)\n#dev.off()\n\n########################## FOLDING PATH ################################# \nplotFoldingPath <- function (Truth, TruthAsSequence) {\n  graph_input_truth <- melt(Truth, varnames=c(\"Y\",\"X\"))\n  graph_input_truth <- graph_input_truth[match(TruthAsSequence, graph_input_truth$value),]\n  map.truth <- ggplot(graph_input_truth, aes(x=X,y=Y, label=value)) +  \n                      scale_y_reverse(breaks=as.integer(rownames(Truth)), limits=c(5,-2), name=\"Y [meters]\") + # + scale_y_reverse(limits=c(11,0)) + xlim(0,11)# + scale_x_discrete(limits=c(0,11), labels=c(0:11)) \n                      scale_x_discrete(breaks=as.integer(colnames(Truth)), name=\"X [meters]\")\n  map.truth <- map.truth + geom_point(size=6) + geom_text(vjust=-1, hjust=-0.5, size=7)\n  for(i in 2:length(Truth) ){\n    a <- graph_input_truth[(i-1):i,]\n    map.truth <- map.truth + geom_path(data=a, aes(x=X,y=Y),arrow=arrow(length=unit(0.4,\"cm\")), color=\"red\", size=1)\n  }\n  \n  print(map.truth)\n\n  return (map.truth)\n}\n\n# Nx <- 10; Ny <- 2; dx <- 2; dy <- 3\n# Truth <- matrix (c(0:(Nx*Ny-1)), nrow=Ny, byrow=TRUE)    \n# rownames(Truth) <- c(1:nrow(Truth)-1)*dy; colnames(Truth) <- c(1:ncol(Truth)-1)*dx\n# TruthAsSequence <- c(0:9,19:10)\n# \n# p <- plotFoldingPath (Truth, TruthAsSequence)\n#ggsave(\"./plots/10x2-setting.pdf\",p, height=3.5)\n\n#############################SUCCESS BARS############################## \nexpType <- c(\"2DvsMDS -45dbm\"=1, \"2DvsMDS -30dbm\"=2)\nexpType <- c(\"Medium Noise\"=1, \"High Noise\"=2)\n\nexpSize <- const2d5x4 <- const2d10x2 <- mds.5x4 <- mds.10x2 <- c()\n\ntype <- 1   # Simulation Pn= -45dbm h=15\nexpSize[type]     <- 1000\n\nconst2d5x4[type]  <- 816 \nmds.5x4[type]     <- 909 \n\nconst2d10x2[type] <- 873 \nmds.10x2[type]    <- 243 # -45 dbm\n\ntype <- 2   # Simulation Pn= -30dbm h=15\nexpSize[type]     <- 1000\n\nconst2d5x4[type]  <-  779\nmds.5x4[type]     <-  991 \n\nconst2d10x2[type] <-  885\nmds.10x2[type]    <- 0 \n\n\nplotSuccess <- function (eType, saveToFile=FALSE)\n{\n  library(ggplot2)\n  library(RColorBrewer)\n  library(reshape)\n  \n  plotName <- names(expType[eType])\n  dataNames <- c(\"Constrained 2-D\",\"MDS-MAP\"); dimensionNames <- c(\"5x4\", \"10x2\")\n  results <- matrix(data = c(\n    const2d5x4[eType],const2d10x2[eType],    # PNSD - Probabilistic Node Sequence Discovery\n    mds.5x4[eType],mds.10x2[eType]\n  ),\n  ncol = 2, byrow = TRUE, \n  dimnames = list(dataNames,     # Rownames\n                  dimensionNames)                  # Colnames\n  ) \n  \n  # Convert to percents:\n  results <- round((results/expSize[eType]) * 100,2)\n  \n  results <- melt(results)\n  \n  colnames(results)=c(\"algorithm\",\"dimension\", \"success\")\n  \n  #reorder bars\n  results <- within(results, algorithm <- factor(algorithm, levels = dataNames))\n  results <- within(results, dimension <- factor(dimension, levels = dimensionNames))\n  \n  theme_update(axis.title.x = element_text(size = 14, vjust = -0.25),\n               axis.title.y = element_text(size = 14, angle = 90, vjust = 0.25),\n               axis.text.x = element_text(size = 12, color=\"black\"),\n               axis.text.y = element_text(size = 12, color=\"black\"),\n               title = element_text(size=12),\n               panel.background = element_blank(),\n               panel.grid.major = element_line(colour = \"grey90\"),\n               legend.position = \"bottom\",\n               legend.box = \"horizontal\",\n               legend.key = element_blank(), \n               legend.background = element_rect(fill=\"white\", size=0.25),\n               legend.text = element_text(size=12))\n  \n  p <- ggplot (results, aes(x=dimension, y=success, fill=algorithm)) + geom_bar(stat=\"identity\", position=\"dodge\")\n  p<- p + geom_bar(stat=\"identity\", position=\"dodge\", colour=\"white\", show_guide=FALSE) # to hide legend slashes\n  p <- p + labs(x=\"Grid Dimensions\") + scale_y_continuous(\"Success [%]\", limits=c(0,100))\n  p <- p + scale_fill_manual(name=\"Algorithm\", values = rev(brewer.pal(6,\"YlGnBu\")), guide=guide_legend(nrow=2,))\n  p <- p + geom_text(data=results, aes(y=(success),label=paste(success,\"%\",sep=\"\")),position=position_dodge(width=0.9), size=3, vjust=0)\n  #p <- p + geom_text(data=results, aes(y=(50), label=algorithm),position=position_dodge(width=0.9), size=3.5, vjust=0, angle=90)\n  p <- p + ggtitle(plotName)\n  \n  print(p)\n  if (saveToFile)\n  {\n    cat(plotName, \"saving...\\n\")\n   ggsave(filename=paste(\"./plots/\",plotName,\"-2.pdf\",sep=\"\"), plot=p, width=3, height=5)\n    \n  }\n}\n\nplotSuccess(1, saveToFile=TRUE)\n",
    "created" : 1422206223908.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2224567720",
    "id" : "9EB87E1C",
    "lastKnownWriteTime" : 1508104685,
    "last_content_update" : 1508104685842,
    "path" : "~/phd/R/2d/plots.R",
    "project_path" : "plots.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 15,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}