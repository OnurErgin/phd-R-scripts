{
    "collab_server" : "",
    "contents" : "\npruneThreshold <- 2\nsource(\"probSeqFunctions-fixedPrune.R\")\n#source(\"probSeqFunctions.R\")\n\nrun.verbose <- FALSE\nproduceOutput <- FALSE # for probabilitySeqDF and probabilitiesDF. This file will produce output anyways\ndebugging <- FALSE\nmaxSubSeqSize <- 3\n\n#Nx <- 2; Ny <- 7; dx <- 2; dy <- 3;\nNx <- 5; Ny <- 4; dx <- 5; dy <- 10; \n\nsd_noise_dbm <- -80#-75#-70#-65#-60\nTESTBED <- FALSE; tb_name <- \"SetF\"\n\nif(TESTBED) {\n  experimentSet <- 2:693\n  directory <- \"/Users/ergin/phd/R/measurements/4thFl-NorthWindow/\"\n  #directory <- \"/lhome/ergin/measurements/4thFloor/4x7/\"\n  if (tb_name == \"SetC\"){\n    Nx <- 2; Ny <- 7\n    Truth <- matrix(c(151,152,12,13,149,150,89,90,144,143,93,94,139,140), nrow=Ny, byrow= TRUE)\n    refnode <- 151\n    #directory <- \"/Users/ergin/phd/R/measurements/interferenceMeasurements/2D-NorthSide/nointerference/\"\n  } else \n  if (tb_name == \"SetD\"){\n    #Truth <- matrix(c(154,152,11,13,148,150,15,90,146,143,91,94,142,140), nrow=7, byrow= TRUE)\n    Nx <- 7; Ny <- 2\n    Truth <- matrix(c(152,13,150,90,143,94,140,153,10,147,88,145,92,141), nrow=Ny, byrow= TRUE)\n    refnode <- 152\n  } else \n  if (tb_name == \"SetE\"){\n    #Truth <- matrix(c(154,152,11,13,148,150,15,90,146,143,91,94,142,140), nrow=7, byrow= TRUE)\n    Nx <- 7; Ny <- 2\n    Truth <- matrix(c(151,12,149,89,144,93,139,153,10,147,88,145,92,141), nrow=Ny, byrow= TRUE)\n    refnode <- 151\n  } else \n  if (tb_name == \"SetF\"){\n    #Truth <- matrix(c(154,152,11,13,148,150,15,90,146,143,91,94,142,140), nrow=7, byrow= TRUE)\n    Nx <- 7; Ny <- 2\n    Truth <- matrix(c(152,13,150,90,143,94,140,154,11,148,15,146,91,142), nrow=Ny, byrow= TRUE)\n    refnode <- 152\n  } else \n  if (tb_name == \"SetG\"){\n    #Truth <- matrix(c(154,152,11,13,148,150,15,90,146,143,91,94,142,140), nrow=7, byrow= TRUE)\n    Nx <- 7; Ny <- 2\n    Truth <- matrix(c(151,12,149,89,144,93,139,154,11,148,15,146,91,142), nrow=Ny, byrow= TRUE)\n    refnode <- 151\n  }\n} else { # Not if(TESTBED)\n  experimentSet <- 1:100\n  Truth <- matrix (c(0:(Nx*Ny-1)), nrow=Ny, byrow=TRUE)\n  refnode <- 0\n  directory <- paste(\"./simOut-\",Nx,\"x\",Ny,\"-\",dx,\"mX\",dy,\"m-Noise\",sd_noise_dbm,\"dbm/\",sep=\"\")\n}\nnumnodes <- length(Truth)\ntopQuantile <- 1\nrssMaxDifference <- 0 \n\noldpwd <- getwd();\n# Put output files into the measurement directories.\n# setwd(directory); directory <- \"./\"\n\nif(TESTBED) {\n  outputFileName <- paste(\"2D-analyze-\",Nx,\"x\",Ny,\"-testbed\",tb_name,\"-Prune\",pruneThreshold,\".txt\",sep=\"\")\n} else\n  outputFileName <- paste(\"2D-analyze-\",Nx,\"x\",Ny,\"-\",dx,\"mX\",dy,\"m-Prune\",pruneThreshold,\"-Noise\",sd_noise_dbm,\"dbm.txt\",sep=\"\")\n\nis2DVerdictCorrect <- function(resultSeq, Truth) {\n  resultGrid <- matrix(resultSeq, nrow=Ny, byrow=TRUE)\n  # reverse Even Rows\n  for(r in 1:Ny){\n    if(r %% 2 == 0)\n      resultGrid[r,] <- rev(resultGrid[r,])\n  }\n  verdict <- all(resultGrid == Truth)\n  return(verdict)\n}\n\ntotalSuccess <- 0\nfor(expNo in experimentSet)\n{   \n  startTime <- proc.time()\n  \n  if(TESTBED) {\n    TRACE_FILE <- paste(directory,\"seq16ch_\",expNo,\".txt\",sep=\"\")\n  } else\n    TRACE_FILE <- paste(directory,\"2dSim-\",Nx,\"x\",Ny,\"-\",dx,\"mX\",dy,\"m-\",expNo,\".txt\",sep=\"\")\n  #TRACE_FILE <- paste(directory,inFilePrefix,expNo,inFileSuffix, sep=\"\")\n  \n  if (\"packets\" %in% ls() && debugging) {\n    ; # do not reload packets\n  }\n  else # not debugging\n  {\n    if(TESTBED) {\n      cat(\"Loading:\",TRACE_FILE, \"\\n\")  \n      packets <- read.table(TRACE_FILE, sep=\"\\t\", na.strings=\"\", col.names=c(\"receiver\", \"sender\", \"channel\", \"rssi\", \"power\", \"time\", \"packetnum\"), colClasses=c(rep(\"numeric\",3), \"numeric\", \"factor\", \"character\", \"numeric\"), header=FALSE)\n    } else {\n        cat(\"Loading:\",TRACE_FILE, \"\\n\")\t\n        packets <- read.table(TRACE_FILE,  na.strings=\"\", header=TRUE)\n      }\n  }\n  packets <- subset(packets, sender %in% Truth & receiver %in% Truth)\n  packets <- droplevels(packets)\n  packets$time  <- 0\n  packets$power <- 0\n  \n  ## DEBUG SET\n  if (debugging) {\n    print(\"Debug set.\")\n    packets <- subset(packets,receiver %in% debugSet & sender %in% debugSet)\n  }\n  \n  # \tanalyse <- matrix(data = NA, nrow = 4, ncol = 11, byrow = TRUE, dimnames = list(NULL,c(\"expNo\", \"Rank\", \"isCorrect\", \"prob\", \n  #                                                                                          \"verifyRank\", \"verifyIsCorrect\", \"verifyProb\", \n  #                                                                                          \"match\", \"JointProb\", \"ComputedSeq\", \"verifySeq\")))\n  \n  analyse <- data.frame(expNo=integer(), Rank=integer(), isCorrect=logical(), prob=double(),\n                        verifyRank=integer(), verifyIsCorrect=logical(), verifyProb=double(), \n                        match=logical(), jointProb=double(), computedSeq=character(), verifySeq=character(),\n                        stringsAsFactors=FALSE)\n  \n  print(\"Finding Sequence\")\n  probabilitySeqDF <- findProbSequences(packets,refnode, produceOutput=produceOutput, verbose=run.verbose);\n  probOrder <- with(probabilitySeqDF,order(-prob))\n  probabilitySeqDF <- probabilitySeqDF[probOrder,]\n  \n  ## RESULT\n  print(probabilitySeqDF[1,])\n  winnerSeq <- probabilitySeqDF[1,1:numnodes] ; winnerSeq <- as.integer(unlist(winnerSeq))\n  verdict <- is2DVerdictCorrect(winnerSeq,Truth)\n  cat(\"Verdict is:\", verdict,\"\\n\"); \n  \n  maxRankToCompare <- min(nrow(probabilitySeqDF),2)\n  for (mainRank in 1:maxRankToCompare)\n  {\n    cat(\"Verify\", mainRank,\"\\n\")\n    verifySeqDF <- findProbSequences(packets,refnode=probabilitySeqDF[mainRank,numnodes], produceOutput=produceOutput, verbose=run.verbose);\n    probOrder <- with(verifySeqDF,order(-prob))\n    verifySeqDF <- verifySeqDF[probOrder,]\n    cat(\"Verify\", mainRank,\"is\", all(rev(verifySeqDF[1,1:numnodes])==Truth), \"\\n\" )\n    \n    for (verifyRank in 1:maxRankToCompare) \n    {\n      i <- (mainRank-1)*maxRankToCompare+verifyRank;\n      \n      analyse[i,\"expNo\"] <- expNo; \n      \n      analyse[i,\"Rank\"] <- mainRank; \n      winnerSeq <- probabilitySeqDF[mainRank,1:numnodes] ; winnerSeq <- as.integer(unlist(winnerSeq))\n      analyse[i,\"isCorrect\"] <- is2DVerdictCorrect(winnerSeq,Truth)\n      analyse[i,\"prob\"] <- probabilitySeqDF[mainRank,\"prob\"];\n      \n      analyse[i,\"verifyRank\"] <- verifyRank; \n      winnerSeq <- verifySeqDF[verifyRank,1:numnodes] ; winnerSeq <- as.integer(unlist(winnerSeq))\n      analyse[i,\"verifyIsCorrect\"] <- is2DVerdictCorrect(rev(winnerSeq),Truth)\n      analyse[i,\"verifyProb\"] <- verifySeqDF[verifyRank,\"prob\"];\n      \n      analyse[i,\"match\"] <- all(probabilitySeqDF[mainRank,1:numnodes] == rev(verifySeqDF[verifyRank,1:numnodes]));\n      analyse[i,\"jointProb\"] <- probabilitySeqDF[mainRank,\"prob\"] * verifySeqDF[verifyRank,\"prob\"];\n      \n      analyse[i,\"computedSeq\"] <- paste(probabilitySeqDF[mainRank,1:numnodes], collapse=\",\");\n      analyse[i,\"verifySeq\"] <- paste(verifySeqDF[verifyRank,1:numnodes],collapse=\",\");\n    }\n  }\n  ## Print Elapsed Time\n  endTime <- proc.time()\n  print(endTime-startTime)\n  \n  if(verdict == TRUE)\n  {\n    totalSuccess <- totalSuccess +1\n  }\n  cat(\"TotalSUCCESS=\",totalSuccess,\"\\n\");\n  \n  print(analyse)\n  \n  write.table(analyse, file=outputFileName, sep=\" \", append=TRUE, col.names=(expNo==experimentSet[1]), row.names=FALSE)\n  if (TRUE)\n  {\n    rm(packets)\n  }\n} # for expNo\nsetwd(oldpwd)",
    "created" : 1417510999555.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1831067554",
    "id" : "6BCC8929",
    "lastKnownWriteTime" : 1422032321,
    "last_content_update" : 0,
    "path" : "~/phd/R/2d/probabilistic2D.R",
    "project_path" : "probabilistic2D.R",
    "properties" : {
    },
    "relative_order" : 6,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}