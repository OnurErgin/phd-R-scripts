{
    "collab_server" : "",
    "contents" : "library(ggplot2)\nlibrary(reshape)\nlibrary(gridExtra)\nrequire(scales)\n#library(\"RColorBrewer\")\nlibrary(plyr)\n\nremoveSpaces <- function(...) {a<-gsub(\" \",\"-\", ... , fixed=TRUE); gsub(\",\",\"-\", a , fixed=TRUE)}\n\n#source(\"multiplot.R\")\n\nproduceOutput <- TRUE\n\n#expID <- 10:11\nexpID <- \"11\"; TESTBED = FALSE\nexpID <- \"noise-45-3\"\nprint(expID)\n\nsource(\"resultFiles.R\")\n#source(\"noise_diversityResultFiles.R\")\n\nresultsFile <- \"all_results.DF\"\nif (!file.exists(resultsFile)) {\n  resultsDF <- data.frame( Nx=integer(0),\n                           Ny=integer(0),\n                           dx=numeric(0),\n                           dy=numeric(0),\n                           sd_noise_dbm=integer(0),\n                           sd_rayleigh=integer(0),\n                           prune=character(0),\n                           experimentSize=integer(0),\n                           totalVerifiedSuccess=integer(0),\n                           totalVerifiedFail=integer(0),\n                           highReliableTotal=integer(0),\n                           highReliableSuccess=integer(0),\n                           highReliableFail=integer(0),\n                           mediumReliableTotal=integer(0),\n                           mediumReliableSuccess=integer(0),\n                           mediumReliableFail=integer(0),\n                           lowReliableTotal=integer(0),\n                           lowReliableSuccess=integer(0),\n                           lowReliableFail=integer(0),\n                           isSimulation=logical(0)\n                          )\n} else {\n  resultsDF <- read.table(resultsFile, header=TRUE, colClasses=c(rep(\"integer\",2),rep(\"numeric\",2),rep(\"integer\",2), \"character\", rep(\"integer\",12),\"logical\") )\n}\n\njoinReports <- function(files) {\n  verifyDF <- data.frame()\n  for (f in files)\n    verifyDF <- rbind(verifyDF, read.table(f, header=TRUE, stringsAsFactors=FALSE))\n  \n  expNoOrder <- with(verifyDF,order(expNo))\n  verifyDF <- verifyDF[expNoOrder,]\n  row.names(verifyDF) <- 1:nrow(verifyDF)\n  return(verifyDF)\n}\n\n#Filename <- \"verify/4thFloorNorthSide-nointerference-verify1-300.txt\"\n#analyse <- read.table (Filename, header=TRUE)\n\nanalyse <- joinReports(files)\n\n#plainResults <- subset(analyse, Rank == 1 & verifyRank == 1, select=-c(5,6,7,8,9,11)) # just single result\nplainResults <- subset(analyse, Rank == 1 & verifyRank == 1) # just single result\nplainSuccess <- subset(plainResults, isCorrect == TRUE)\nplainFail <- subset(plainResults, isCorrect == FALSE)\nmost.common.mistake <- names(table(plainFail$computedSeq)[1])\n\nexperiments <- unique(analyse$expNo)\nsuccess <- 0\nmatch <- 0\ntruePositive <- c() # TRUE TRUE & match\nfalsePositive <- c() # FALSE FALSE & match\n\ntrueNegative <- c() # FALSE TRUE \nfalseNegative <- c() # TRUE FALSE\n\nfor (e in experiments) {\n  tExp <- subset(analyse, expNo == e)\n  \n  if (tExp[1,\"isCorrect\"])\n    success <- success +1\n  \n  if (tExp[1,\"match\"])\n    match <- match +1\n  \n  if(tExp[1,\"isCorrect\"] == TRUE && tExp[1,\"verifyIsCorrect\"] == TRUE )\n    truePositive <- c(truePositive,e)\n  \n  if(tExp[1,\"isCorrect\"] == FALSE && tExp[1,\"match\"] == TRUE)\n    falsePositive <- c(falsePositive,e)\n  \n  if(tExp[1,\"isCorrect\"] == FALSE && tExp[1,\"match\"] == FALSE)\n    trueNegative <- c(trueNegative,e)\n  \n  if(tExp[1,\"isCorrect\"] == TRUE && tExp[1,\"match\"] == FALSE)\n    falseNegative <- c(falseNegative,e)  \n}\n\n#matches <- subset(analyse, match == TRUE)\n\ncat(\"success: \", success, \"\\n\")\ncat(\"match: \", match, \"\\n\")\n\ncat(\"truePositive: \", length(truePositive), \"\\n\")\ncat(\"falsePositive: \", length(falsePositive), \"\\n\")\ncat(\"trueNegative: \", length(trueNegative), \"\\n\")\ncat(\"falseNegative: \", length(falseNegative), \"\\n\")\n#print(expName); stop()\n#plot(subset(analyse, expNo %in% truePositive & Rank == 1 & verifyRank ==1)$jointProb)\n\n# expNos of Unreliable measurements\nfindUnreliables <- function(analyse) \n{\n  unreliables <- c()\n  #unreliables <- data.frame()\n  for (e in unique(analyse$expNo))\n  {\n    tDF <- subset(analyse, expNo == e) # or tDF <- analyse[analyse$expNo==e,]\n    seqStrings <- c(as.character(tDF$computedSeq),as.character(tDF$verifySeq))\n    \n    thisExpIsUnreliable <- FALSE\n    for(s in seqStrings) {\n      \n      if (grepl(\"NA\",s)) # contains NAs\n      {\n        thisExpIsUnreliable <- TRUE\n        unreliables <- c(unreliables,e)\n        #unreliables <- rbind(unreliables, tDF)\n        break\n      } \n      else\n      { \n        splitted <- as.data.frame(strsplit(s,\",\"))\n        if (TRUE %in% (splitted == -1)) # contains -1s\n        {\n          thisExpIsUnreliable <- TRUE\n          unreliables <- c(unreliables,e)\n          #unreliables <- rbind(unreliables, tDF)\n          break\n        }\n      }        \n    } #for s\n  } #for e\n  return(unreliables)\n}\n\nunreliableExpNos <- findUnreliables(analyse)\nunReliable <- subset(analyse, expNo %in% unreliableExpNos & Rank == 1 & verifyRank == 1)\n\ndata.frame() -> \n  weakResult ->     # no-match\n  lowReliable ->    # n-match, rank=2\n  mediumReliable -> # n-match, rank=1 OR 1-match, rank=2\n  highReliable;     # 1-match, rank=1\n\nfor (e in unique(analyse$expNo)) \n{\n  if(e %in% unreliableExpNos)\n    next\n  expDF <- subset(analyse, expNo == e)\n  \n  matchDegree <- sum(expDF$match)\n  \n  #no-match\n  if(matchDegree == 0)\n  {\n    weakResult <- rbind(weakResult, subset(expDF, Rank == 1 & verifyRank == 1));\n  }\n  else if (matchDegree == 1) # 1-match\n  {\n    finalChoice <- subset(expDF, match == TRUE)\n    \n    if ( finalChoice$Rank == 1)\n    {  \n      #       testVerdict <-subset(expDF, Rank==1)[1,\"prob\"]/subset(expDF, Rank==2)[1,\"prob\"]\n      #       if (testVerdict < mediumThreshold)\n      #         mediumReliable <- rbind(mediumReliable, finalChoice)\n      #       else\n      highReliable <- rbind(highReliable, finalChoice)\n    }\n    else \n    {\n      if (finalChoice$Rank == 2)\n        mediumReliable <- rbind(mediumReliable, finalChoice);\n    }\n  } \n  else if (matchDegree > 1) # n-match, make Final Choice by max(verifyIsCorrect)\n  {\n    # Eski, verifyProb'u max olanlari secen. iptal.\n    #     matchingRows  <- expDF\n    #     rowWithMaxProb <- which(matchingRows==max(matchingRows$verifyProb),arr.ind=TRUE)[,\"row\"] \n    \n    # verdict and verify arasindan probability orani buyuk olandan buyuk probabilitili olani al\n    \n    matchingRows <- subset(expDF,match==TRUE)\n    \n    testOrderProb <- with(matchingRows, order(prob,decreasing=TRUE))\n    testVerdict <- matchingRows[testOrderProb,]$prob[1] / matchingRows[testOrderProb,]$prob[2]\n    \n    testOrderVerifyProb <- with(matchingRows, order(verifyProb,decreasing=TRUE))\n    testVerify <- matchingRows[testOrderVerifyProb,]$verifyProb[1] / matchingRows[testOrderVerifyProb,]$verifyProb[2]\n    \n    #     if (testVerdict >= testVerify) {\n    #       rowWithMaxProb <- which(matchingRows==max(matchingRows$prob),arr.ind=TRUE)[,\"row\"] \n    #     } else {\n    #       rowWithMaxProb <- which(matchingRows==max(matchingRows$verifyProb),arr.ind=TRUE)[,\"row\"] \n    #     }\n    \n    # MAX prob'u sec    \n    if (max(matchingRows$prob) > max(matchingRows$verifyProb)) {\n      rowWithMaxProb <- which(matchingRows==max(matchingRows$prob),arr.ind=TRUE)[,\"row\"] \n    } else \n      rowWithMaxProb <- which(matchingRows==max(matchingRows$verifyProb),arr.ind=TRUE)[,\"row\"] \n    \n  \n    finalChoice <- matchingRows[rowWithMaxProb,]\n    mediumThreshold <- 1.1\n    if (testVerdict < mediumThreshold ){#|| testVerify < mediumThreshold){\n      lowReliable <- rbind(lowReliable,finalChoice)\n    } else\n      if (finalChoice$Rank == 1){\n        mediumReliable <- rbind(mediumReliable,finalChoice)\n      } else \n        if (finalChoice$Rank == 2)\n          lowReliable <- rbind(lowReliable,finalChoice)\n    \n  } # if matchdegree >1\n} #for e\n\nverifiedSuccess <- sum(highReliable$isCorrect,mediumReliable$isCorrect, lowReliable$isCorrect, weakResult$isCorrect, unReliable$isCorrect)\n\n# Combine all to summarise\n# if (nrow(highReliable)>0)   highReliable$reliability    <- \"high\"\n# if (nrow(mediumReliable)>0) mediumReliable$reliability  <- \"medium\"\n# if (nrow(lowReliable)>0)    lowReliable$reliability     <- \"low\"\n# if (nrow(weakResult)>0)     weakResult$reliability      <- \"weak\"\n# if (nrow(unReliable)>0)     unReliable$reliability      <- \"unreliable\"\n\n# if (nrow(highReliable)>0)   highReliable$reliability    <- \"high\"\n# if (nrow(mediumReliable)>0) mediumReliable$reliability  <- \"high\"\n# if (nrow(lowReliable)>0)    lowReliable$reliability     <- \"medium\"\n# if (nrow(weakResult)>0)     weakResult$reliability      <- \"medium\"\n# if (nrow(unReliable)>0)     unReliable$reliability      <- \"low\"\n\nif (nrow(highReliable)>0)   highReliable$reliability    <- \"high\"\nif (nrow(mediumReliable)>0) mediumReliable$reliability  <- \"medium\"\nif (nrow(lowReliable)>0)    lowReliable$reliability     <- \"medium\"\nif (nrow(weakResult)>0)     weakResult$reliability      <- \"low\"\nif (nrow(unReliable)>0)     unReliable$reliability      <- \"low\"\n\n# Draw histogram:\nfinalVerdicts <- rbind(highReliable, mediumReliable, lowReliable, weakResult, unReliable)\nfinalVerdicts$reliability <- factor(finalVerdicts$reliability, levels=c(\"high\",\"medium\", \"low\"))\n#finalVerdicts$isCorrect <- factor(finalVerdicts$isCorrect, levels=c(\"TRUE\",\"FALSE\"))\n\nfinalVerdicts$numPackets <- nPackets\n\nscale_fill_manual2 <- function(){ \n  #return (scale_fill_manual(\"Verdict\",values=c(\"#f03b20\",\"#1f78b4\")))\n  #temporarily ignore below\n  if(length(unique(finalVerdicts$isCorrect))==2) \n    scale_fill_brewer(\"Verdict\",palette=\"Paired\", direction=-1) # Blue and light blue\n  #scale_fill_manual(\"Verdict\",values=c(\"#f03b20\",\"#1f78b4\")) #Blue and Red \n  else \n    scale_fill_manual(\"Verdict\",values=c(\"#1f78b4\"))\n}\nhighReliableSuccess <- sum(highReliable$isCorrect) #+ sum(mediumReliable$isCorrect)\nhighReliableTotal <- nrow(highReliable) #+ nrow(mediumReliable)\nhighReliableSuccessRatio <- round(highReliableSuccess / highReliableTotal, digits=4)*100\ntitleTxt <- paste(sep=\" \", expName,\" \", #paste(sep=\"\", \"Dim: \" ,Nx,\"x\",Ny), \"Distance: \", paste(dx,\"m\",\"X\",dy,\"m\",sep=\"\"),\n                  #\"\\nSuccess=\",success,\"/\",length(experiments),\"(\",round(success/length(experiments),digit=4)*100,\"%) \",\n                  \"\\n Total Success =\", verifiedSuccess, \"/\",length(experiments),\"(\",round(verifiedSuccess/length(experiments),digits=4)*100,\"%)\\n\",\n                  \"HighReliable Success =\",highReliableSuccess,\"/\",highReliableTotal,\"(\",highReliableSuccessRatio,\"%)\\n\")\n\nhighs <- subset(finalVerdicts, reliability == \"high\")\nmediums <- subset(finalVerdicts, reliability == \"medium\")\nlows <- subset(finalVerdicts, reliability == \"low\")\n\nthisResult <- data.frame(Nx=Nx, Ny=Ny, dx=dx, dy=dy, sd_noise_dbm=Pn, sd_rayleigh=sd_rayleigh, prune=prune,\n                experimentSize=length(experiments),\n                totalVerifiedSuccess=verifiedSuccess,\n                totalVerifiedFail=length(experiments) - verifiedSuccess ,\n                highReliableTotal=nrow(highs),\n                highReliableSuccess=sum(highs$isCorrect),\n                highReliableFail=nrow(highs) - sum(highs$isCorrect),\n                mediumReliableTotal=nrow(mediums),\n                mediumReliableSuccess=sum(mediums$isCorrect),\n                mediumReliableFail=nrow(mediums) - sum(mediums$isCorrect),\n                lowReliableTotal=nrow(lows),\n                lowReliableSuccess=sum(lows$isCorrect),\n                lowReliableFail= nrow(lows) - sum(lows$isCorrect),\n                isSimulation=!TESTBED )\n\nif (nrow(match_df(thisResult,resultsDF)) == 0 ) { # this row does not exist in the DF\n  write.table(thisResult,resultsFile, append=TRUE, col.names=(nrow(resultsDF) == 0), row.names = FALSE)\n  cat(\"Experiment \", expID, \"added to the file: \", resultsFile, \"\\n\")\n  resultsDF <- rbind(resultsDF, thisResult)\n} else cat(\"Experiment \", expID, \"already existed \\n\")\n\n# Example for plotting: ddply(resultsDF,.(Nx,Ny), summarise, diffr=dy+sd_noise_dbm)\n#\n\ntestDF <- data.frame(a=integer(0),b=character(0), c=logical(0) )\naddDF <- data.frame(a=2,b=4, c=TRUE )\ntestDF <- rbind(testDF,addDF)\n\npTypes <- c(\"bar\", \"timeLapse\")\npType <- pTypes[1:2]\n\ntheme_update(axis.title.x = element_text(size = 14, vjust = -0.25),\n             axis.title.y = element_text(size = 14, angle = 90, vjust = 0.25),\n             axis.text.x = element_text(size = 12, color = \"black\"),\n             axis.text.y = element_text(size = 12, color = \"black\"),\n             title = element_text(size=7),\n             panel.background = element_blank(),\n             panel.grid.major = element_line(colour = \"grey90\"),\n             legend.position = \"bottom\",\n             legend.box = \"horizontal\",\n             legend.key = element_blank(), \n             legend.background = element_rect(fill=\"white\", size=0.25),\n             legend.text = element_text(size=12),\n             legend.title = element_text(size=12),\n             strip.text.x = element_text(size = 8, colour = \"orange\") )\n\nfinalVerdicts$isCorrect <- factor(finalVerdicts$isCorrect, levels=c(\"TRUE\",\"FALSE\")) # for ordering in the new version of ggplot2\ntitleTxt <- paste(sep=\" \", \"Total Success =\", verifiedSuccess, \"/\",length(experiments),\"(\",round(verifiedSuccess/length(experiments),digits=4)*100,\"%)\\n\",\n                  \"HighReliable Success =\",highReliableSuccess,\"/\",highReliableTotal,\"(\",highReliableSuccessRatio,\"%)\\n\")\nif (\"bar\" %in% pType)\n{\n  p1 <- ggplot(finalVerdicts, aes(x=reliability, fill=isCorrect))\n  #p1 <- p1 + geom_bar(aes(y = (..count..)/sum(..count..))) + scale_y_continuous(\"Verdict Ratio [%]\",labels=percent) # ylab(\"Number Of Experiments\") #+ labels(percent_format())\n  p1 <- p1 + geom_bar() + scale_y_continuous(\"Number Of Experiments\", limits=c(0,length(unique(analyse$expNo))))\n  p1 <- p1 + scale_fill_manual2() + guides(fill=guide_legend(reverse=FALSE)) \n  p1 <- p1 + ggtitle(titleTxt) + theme(panel.background=element_rect(fill=\"#FAFAFA\"), legend.position=\"bottom\")\n  p1 <- p1 + scale_x_discrete(drop=FALSE)\n  #p1 <- p1+facet_wrap(~Rank+verifyRank)\n  #p1 <- p1 + stat_bin(aes(label=(..count..) ), vjust=-0.5, geom=\"text\", position=\"identity\") # add text above bars\n  print(p1)\n  #setOfPlots <- list(setOfPlots,p1)\n} \nif (\"timeLapse\" %in% pType && FALSE) {\n  if(nrow(plainFail) >0)\n    plainFail$reliability <- \"plainFail\"\n  #plainResults$reliability <- \"plainResults\"\n  finalVerdicts <- rbind(finalVerdicts,plainFail)\n  finalVerdicts$reliability <- factor(finalVerdicts$reliability, levels=c(\"plainFail\",\"high\",\"medium\", \"low\", \"weak\", \"unreliable\",\"plainResults\"))\n  \n  p2 <- ggplot(finalVerdicts, aes(x=expNo, y=reliability, fill=isCorrect))\n  p2 <- p2 + geom_tile(width=1)\n  # Add plainFails:\n  #p2 <- p2 + geom_tile(data=plainFail, aes(x=expNo, y=\"plainFail\", fill=isCorrect))\n  #p2 <- scale_y_discrete(limits=c(\"a\",\"b\",\"c\",\"d\"))\n  p2 <- p2 + scale_fill_manual2()  + guides(fill=guide_legend(reverse=TRUE))\n  p2 <- p2 + ggtitle(titleTxt) + theme(panel.background=element_rect(fill=\"#FAFAFA\"), plot.title=element_text(size=10))\n  p2 <- p2 + scale_y_discrete(drop=FALSE)\n  #  print(p2)\n  #p1 <- p1+facet_wrap(~Rank+verifyRank)\n  #setOfPlots <- list(setOfPlots,p2)\n}\n\nplotName <- paste(\"./plots/3-levels-highExclusive-Thrs\",mediumThreshold,\"max-\",if (expID<10) \"0\",expID,\"-\",expName,\".pdf\",sep=\"\")\nplotName <- removeSpaces(plotName)\nif (produceOutput) {\n  cat(\"Saving\", plotName,\"\\n\")\n  #ggsave(plotName,p1, scale = 0.8)\n  ggsave(plotName,p1, height=4, width = 3)\n}\nprint(paste(expName,\n            \"Success = \",success, \"/\",length(experiments),\"(\",round(success/length(experiments),digits=4)*100,\"%)\", \" | Total verified Success =\", verifiedSuccess, \"/\",length(experiments),\"(\",round(verifiedSuccess/length(experiments),digits=4)*100,\"%) |\",\n            \"High Reliable Success =\",highReliableSuccess,\"/\",highReliableTotal,\"(\",highReliableSuccessRatio,\"%)\\n\"))\n\n\ngraph_input_truth <- melt(Truth, varnames=c(\"Y\",\"X\"))\ngraph_input_truth <- graph_input_truth[match(TruthSequence, graph_input_truth$value),]\nmap.truth <- ggplot(graph_input_truth, aes(x=X,y=Y, label=value)) + geom_text(vjust=-1, hjust=-0.5) +  scale_y_reverse(breaks=as.integer(rownames(Truth))) # + scale_y_reverse(limits=c(11,0)) + xlim(0,11)# + scale_x_discrete(limits=c(0,11), labels=c(0:11)) \nfor(i in 2:length(Truth) ){\n  a <- graph_input_truth[(i-1):i,]\n  map.truth <- map.truth + geom_path(data=a, aes(x=X,y=Y),arrow=arrow(length=unit(0.4,\"cm\")), color=\"red\", size=0.5)\n}\n#print(map.truth)\nif(FALSE && produceOutput){\n  pdf(file=plotName, height=15, width=8)\n    grid.arrange(p1,map.truth,ncol=1)\n  dev.off()\n}\n#pdf(file=plotName)\n#  grid.arrange(p1,p2,ncol=1)\n#   multiplot(p1,p2, cols=1)\n# dev.off()\n# # \n# pdf(file=\"verify/plots/SetA-reliability.pdf\")\n#   grid.arrange(p10,p11,ncol=2)\n#  dev.off()\n\n#p1 <- p1 + text(x=0, y=-50, \"HighSuccess = this\") + scale_fill_brewer(\"Verdict\",palette=\"Paired\")\n\n\nif(FALSE) \n{\n  comparison <- data.frame()\n  comparison <- rbind(comparison, data.frame(type=\"noVerify\", verdict=\"success\", count=success))\n  comparison <- rbind(comparison, data.frame(type=\"noVerify\", verdict=\"fail\", count=(length(experiments)-success)))\n  comparison <- rbind(comparison,data.frame(type=\"withVerify\", verdict=\"success\", count=verifiedSuccess))\n  comparison <- rbind(comparison,data.frame(type=\"withVerify\", verdict=\"fail\", count=(length(experiments)-verifiedSuccess)))\n  \n  p2 <- ggplot(comparison, aes(x=type, y=count, fill=verdict)) \n  p2 <- p2 + geom_bar(stat=\"identity\") + ylab(\"Number Of Experiments\")\n  print(p)\n  \n  multiplot(p1,p2, cols=2)\n}\n\n# scale_fill_manual(name=\"Verdict\", values=brewer.pal(2,\"Paired\"), guide=guide_legend(reverse=TRUE))\n# p <- p + theme(panel.background=element_rect(fill=\"#F0F0F0\"))\n# c(\"#F45F5A\", \"blue\")\n# \n###################################################################################################################\n# library(\"plyr\")\n# plied <- ddply (analyse, .(expNo), summarize,\n#                 maxJointProb = max(jointProb),\n#                 verdict = function(DF) {DF[DF$jointProb == max(DF$jointProb),]$isCorrect} )\n#                 //verdict = subset(isCorrect,jointProb==maxJointProb))\n# plied2 <- ddply (analyse, .(expNo), summarize,\n#                 maxJointProb = max(jointProb),\n#                 verdict = isCorrect)\n\n# p <- ggplot(subset(analyse, expNo %in% truePositive & Rank == 1 & verifyRank ==1), aes(y=jointProb, x=expNo))\n# p <- p + geom_point(size=1)\n# print(p)\n# \n# maxJPDF <- data.frame()\n# for (e in unique(analyse$expNo)) {\n#   xDF <- subset (analyse, expNo == e)\n#   xDF <- xDF[xDF$jointProb == max(xDF$jointProb),]\n#   maxJPDF <- rbind(maxJPDF,xDF)\n# }\n# p <- ggplot(maxJPDF, aes(y=jointProb, x=expNo, color=isCorrect))\n# p <- p + geom_point(size=1) + facet_grid(~match)\n# print(p)\n# \n# p <- ggplot(maxJPDF, aes(x=prob, fill=match))\n# p <- p + geom_histogram() + facet_wrap(~isCorrect,ncol=1, nrow=2) +ggtitle (\"title\")\n# print(p)\n\n\n# theme_update(axis.title.x = element_text(size = 12, vjust = -0.25),\n#              axis.title.y = element_text(size = 12, angle = 90, vjust = 0.25),\n#              axis.text.x = element_text(size = 11),\n#              axis.text.y = element_text(size = 11),\n#              panel.background = element_blank(),\n#              panel.grid.major = element_line(colour = \"grey90\"),\n#              legend.position = \"right\",\n#              legend.box = \"horizontal\",\n#              legend.key = element_blank(), \n#              legend.background = element_rect(fill=\"white\", size=0.25),\n#              legend.text = element_text(size=10))",
    "created" : 1417700091584.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2301870419",
    "id" : "86514903",
    "lastKnownWriteTime" : 1508104203,
    "last_content_update" : 1508104203133,
    "path" : "~/phd/R/2d/countVerify2D.R",
    "project_path" : "countVerify2D.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 7,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}