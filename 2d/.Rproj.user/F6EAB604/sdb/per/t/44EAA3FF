{
    "collab_server" : "",
    "contents" : "library(plyr)\nlibrary(reshape)\nlibrary(MASS)\nlibrary(reshape2)\n\n\nd_from_rss <- function(pr, pt=0, fc=2.405e9, n=3, d0=1) {\n  lamda <- 2.998e8/fc;\n  pl = pt-pr\n  d <- d0 * 10^((pl + 10*n*log10(lamda/(4*pi*d0))) / (10*n));\n  return(d)\n}\n\ndistanceTuples_3ref <- function (x, ref1, ref2, ref3)\n{ #browser()\n  all_receivers <- unique (x$receiver)\n  distances <- data.frame(receiver = numeric(0), refnode1 = numeric(0), refnode2 = numeric(0), refnode3 = numeric(0))\n  for (i in 1:length(all_receivers))\n  {\n    distances [i,1] <- all_receivers[i]\n    distances [i,2] <- subset(x, receiver == all_receivers[i] & sender == ref1, select=c(distance))\n    distances [i,3] <- subset(x, receiver == all_receivers[i] & sender == ref2, select=c(distance))\n    distances [i,4] <- subset(x, receiver == all_receivers[i] & sender == ref3, select=c(distance))\n  }\n  return(distances)\n}\n\ndistanceTuples_3ref_training <- function (x, ref1, ref2, ref3) ## bu olmadi =/\n{ #browser()\n  all_receivers <- unique (x$receiver)\n  distances <- data.frame(run = numeric(0), receiver = numeric(0), refnode1 = numeric(0), refnode2 = numeric(0), refnode3 = numeric(0))\n  z <- 0\n  for(r in unique(x$run)){\n    xr <- subset(x, run == r)\n    for (i in 1:length(all_receivers))\n    {\n      o_x <- z*length(all_receivers)\n      distances [o_x+i,1] <- subset(xr, receiver == all_receivers[i] & sender == ref1, select=c(run))\n      distances [o_x+i,2] <- all_receivers[i]\n      distances [o_x+i,3] <- subset(xr, receiver == all_receivers[i] & sender == ref1, select=c(distance))\n      distances [o_x+i,4] <- subset(xr, receiver == all_receivers[i] & sender == ref2, select=c(distance))\n      distances [o_x+i,5] <- subset(xr, receiver == all_receivers[i] & sender == ref3, select=c(distance))\n    }\n    z <- z + 1\n  }\n  return(distances)\n}\n\neuclideanDist_3 <- function (x1, x2, y1, y2, z1, z2) {sqrt( (x1-x2)^2 + (y1-y2)^2 + (z1-z2)^2)}\n\nsuccessList <- c()\nfailList <- c()\n\ndirectory <- \"inputs_simulation/equiDist/\"\ntrainingDataSet <- 1:5\n\nNx=5; Ny=4; dx=3; dy=3; sd_noise_dbm <- -30\nTruth <- matrix (c(0:(Nx*Ny-1)), nrow=Ny, byrow=TRUE)\n#refnodes <- c(Truth[1,1],Truth[Ny,1],Truth[Ny,Nx]) # Three corners\nrefnodes <- c(Truth[1,1],Truth[1,2],Truth[2,1]) # Three corners\n\n  startTime <- proc.time()\n\n  DATA_FILE <- paste(directory,\"distance_vector_stats_all_channels_\",Nx,\"x\",Ny,\"-\",dx,\"mX\",dy,\"m-Noise\",sd_noise_dbm,\"dbm.csv.txt\",sep=\"\")\n  cat(\"Loading:\",DATA_FILE, \"\\n\")  \n  \n  allstats <- read.csv (DATA_FILE, header=TRUE);\n  experimentSet <- unique(allstats$run) ;\n\n  training_stats <- subset(allstats, sender %in% refnodes & !(receiver %in% refnodes) & run %in% trainingDataSet, select=c(sender,receiver,avg_rssi,run))\n\n  training_distances <- mutate(training_stats, distance=d_from_rss(pr=avg_rssi, n=3)) #\n  training_tuples <- distanceTuples_3ref_training(training_distances,refnodes[1],refnodes[2], refnodes[3])\n  \n  # This line averages all the training measurements\n  training_tuples <- ddply(training_tuples,.(receiver), summarise, refnode1 = mean(refnode1), refnode2 = mean(refnode2), refnode3 = mean(refnode3))\n  \nfor(i in experimentSet[-trainingDataSet])\n{   \n  measurement_stats <- subset(allstats, sender %in% refnodes & !(receiver %in% refnodes) & run == i, select=c(sender,receiver,avg_rssi,run)) \n  measured_distances <- mutate(measurement_stats, distance=d_from_rss(pr=avg_rssi, n=3))\n  measured_tuples <- distanceTuples_3ref(measured_distances,refnodes[1],refnodes[2],refnodes[3])\n  \n  closestPositions <- data.frame(receiver=as.numeric(measured_tuples$receiver),position=-1)\n  \n  for (rcvr in 1:nrow(measured_tuples)) \n  {\n    #Find closest distance from training_distances to rcvr\n    min_pos <- -1\n    mindist <- 10000\n    \n    for (tr in 1:nrow(training_tuples))\n    {\n      if (training_tuples[tr,\"receiver\"] %in% closestPositions$position)\n        next;\n      #print(training_tuples[tr,\"receiver\"])\n      \n      eucdist <- euclideanDist_3(measured_tuples[rcvr,\"refnode1\"], training_tuples[tr,\"refnode1\"], measured_tuples[rcvr,\"refnode2\"], training_tuples[tr,\"refnode2\"],  measured_tuples[rcvr,\"refnode3\"], training_tuples[tr,\"refnode3\"])\n      if (eucdist <= mindist)\n      {\n        min_pos <- training_tuples[tr,\"receiver\"]\n        mindist <- eucdist\n      }\n    }\n    closestPositions[rcvr, \"receiver\"] <- measured_tuples[rcvr, \"receiver\"]\n    closestPositions[rcvr, \"position\"] <- min_pos\n  }\n  result <- Truth\n  for (rr in 1:nrow(result))\n  {\n    for (cc in 1:ncol(result))\n    {\n      if (result[rr,cc] %in% refnodes)\n      {  \n        next;\n      } else { \n        result[rr,cc] <- as.numeric(subset(closestPositions, receiver == result[rr,cc], select=c(position)))\n      }\n    }\n  }\n  cat(\"Simulation: \", i ,\"\\n\")\n  print(result)\n  if (all(closestPositions$receiver == closestPositions$position))\n  {\n    successList <- c(successList,i)\n  }\n  else failList <- c(failList,i)\n}\n\ncat(\"Total Success ratio: \", length(successList) / (length(experimentSet) - length(trainingDataSet)),\"\\n\")\n\ncat(\"Total Success: \", length(successList), \"\\n\")\ncat(\"Total Fail: \", length(failList), \"\\n\")\ncat(\"Nx=\",Nx, \" Ny=\",Ny, \" dx=\",dx,\" dy=\",dy,\" sd_noise_dbm=\",sd_noise_dbm, \"\\n\")\ncat(\"Dissimilarity metric: \", colnames(training_stats)[3], \"\\n\")\n\n\n",
    "created" : 1429653949321.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "48193151",
    "id" : "44EAA3FF",
    "lastKnownWriteTime" : 1438258161,
    "last_content_update" : 0,
    "path" : "~/phd/R/2d/fingerprinting-3anchor.R",
    "project_path" : "fingerprinting-3anchor.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 27,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}