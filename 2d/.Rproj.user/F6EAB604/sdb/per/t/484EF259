{
    "collab_server" : "",
    "contents" : "# Reference: \n# http://www.r-bloggers.com/7-functions-to-do-metric-multidimensional-scaling-in-r/\n\nlibrary(plyr)\nlibrary(reshape)\nlibrary(MASS)\nlibrary(smacof)\nlibrary(vegan) # for procrustes\nlibrary(ggplot2)\n\n#library(mapproj)\n\n#source(\"mds2matrix.R\")\n\n#source(\"configuration.R\")\n#source(\"commonFunctions.R\")\nd_from_rss <- function(pr, pt=0, fc=2.405e9, n=3, d0=1) {\n  lamda <- 2.998e8/fc;\n  pl = pt-pr\n  d <- d0 * 10^((pl + 10*n*log10(lamda/(4*pi*d0))) / (10*n));\n  return(d)\n}\nrc2xy <- function (r,c,dx, dy) {\n  x <- (c-1)*dx\n  y <- (r-1)*dy\n  return(c(x=x,y=y))\n}\n\neuclideanDist <- function (x1, x2, y1, y2) {sqrt( (x1-x2)^2 + (y1-y2)^2)}\n\nNx<-5; Ny<-4; dx<-3; dy<-3; sd_noise_dbm <- -30\nTruth <- matrix (c(0:(Nx*Ny-1)), nrow=Ny, byrow=TRUE)\n#Anchornodes <- c(Truth[1,1],Truth[Ny,1],Truth[Ny,Nx]) # Three corners zB c(0,40,49)\n#Anchornodes <- Truth[1:Ny,1]\n#Anchornodes <- Truth[c(1,Ny),1] # X\n#Anchornodes <- Truth[c(1,2,Ny),1]\nAnchornodes <- c(Truth[1,1],Truth[1,2],Truth[2,1]) # Three corners zB c(0,1,5)\n\ndirectory <- \"inputs_simulation/equiDist/\"\nDATA_FILE <- paste(directory,\"distance_vector_stats_all_channels_\",Nx,\"x\",Ny,\"-\",dx,\"mX\",dy,\"m-Noise\",sd_noise_dbm,\"dbm.csv.txt\",sep=\"\")\n\n  #DATA_FILE <- \"./inputs_simulation/distance_vector_stats_all_channels_10x2-2mX3m-Noise45dbm.csv.txt\"\n  #DATA_FILE <- \"./inputs_simulation/distance_vector_stats_all_channels_10x2-2mX3m-Noise30dbm.csv.txt\"\n   #Nx=10; Ny=2; dx=2; dy=3;\n  # Truth <- matrix(0:19, byrow=TRUE, ncol=Nx);\n  \n    #DATA_FILE <- \"./inputs_simulation/distance_vector_stats_all_channels_5x4-2mX3m-Noise45dbm.csv.txt\"\n    #DATA_FILE <- \"./inputs_simulation/distance_vector_stats_all_channels_5x4-2mX3m-Noise30dbm.csv.txt\"\n     #Nx=5; Ny=4; dx=2; dy=3;\n    #Truth <- matrix(0:19, byrow=TRUE, ncol=Nx) \n\n#refnode <- Truth[0]\n\nreal_positions <- data.frame(node=numeric(length(Truth)),x=numeric(length(Truth)), y=numeric(length(Truth)))\nrp_i <- 1\nfor (rrow in 1:Ny) {\n  for (ccol in 1:Nx) {\n    xy <- rc2xy(r=rrow,c=ccol,dx=dx,dy=dy)\n    #real_positions <- rbind(real_positions,c(Truth[rrow,ccol], xy$x, xy$y))\n    real_positions[rp_i,1] <- Truth[rrow,ccol]\n    real_positions[rp_i,2] <- xy[1]\n    real_positions[rp_i,3] <- xy[2]\n    rp_i <- rp_i +1\n  }\n}\n\n#Anchors <- matrix(data=c(0,0,0,9), nrow=2, byrow=TRUE, dimnames=list(NULL,c(\"D1\",\"D2\")))\n#Anchor_ix <- c(1,16,20) # Anchors are 0,15,19 with indices 1,16,20 respectively\nAnchor_ix <- Anchornodes + 1\nAnchors <- real_positions[Anchor_ix,2:3]\n\n\n\nallstats <- read.csv (DATA_FILE, header=TRUE);\nexperimentSet <- 1:100 #unique(allstats$run) ;# experimentSet <-  800 #21,168,214,218,270,535,799,879,975\n\nmds_node_sequence<-vector(\"list\", length(experimentSet))\n\nall_stats_rssi <- subset(allstats, select=c(run, sender, receiver, avg_rssi))\n#all_stats_rssi <- subset(allstats, (sender!=as.character(refnode) & receiver!=as.character(refnode)), select=c(run, sender, receiver, avg_rssi))\n#  real_sequence <- real_sequence[-1]\n\n#all_stats_rssi_distance <- mutate(all_stats_rssi, distance=avg_rssi)\n#all_stats_rssi_distance <- mutate(all_stats_rssi, distance=d_from_mw(Pr=avg_mw, n=3))\n all_stats_rssi_distance <- mutate(all_stats_rssi, distance=d_from_rss(pr=avg_rssi, n=3))\n\nstartTime <- proc.time()\ncat(length(experimentSet), names(all_stats_rssi_distance)[4],\"\\n\")\n#Error matrix\nErrorMatrix <- matrix (data=NA, nrow=max(allstats$run), ncol=3, byrow=TRUE, dimnames=list(NULL,c(\"expNo\",\"maxError\",\"sumError\")))\n\niteration <- 0\nMDSsuccess <- 0\nfail.list <- c()\nsuccess.list <- c()\n\nfor (i in experimentSet) {\n  iteration <- iteration + 1\n  cat(iteration,\": \",sep=\"\")\n  run_rssi_distance <- subset(all_stats_rssi_distance, run==i)\n\n  run_rssi_distance_c <- cast(run_rssi_distance, receiver ~ sender, fill=sqrt(((Nx-1)*dy)^2+((Ny-1)*dx)^2), value=\"distance\")\n   # for (r in 1:nrow(run_rssi_distance_c)) run_rssi_distance_c[r,r+1] <- 0\n  \n  run_rssi_distance_d <-as.dist(run_rssi_distance_c)\n\n   #mds_node_coordinates<- cmdscale(run_rssi_distance_d,k=2) \n  \n  mds_node_coordinates<- smacofSym(run_rssi_distance_d,ndim=2, type=\"ratio\") # SMACOF MDS\n  node_coordinates <- mds_node_coordinates$conf\n  \n  #node_coordinates <- cmdscale(run_rssi_distance_d,k=2); # Classical MDS\n  \n  #p <- plot(mds_node_coordinates)\n  \n  #map.grid(c(-1,1,-1,1),nx=4, ny=5)\n#  orgGrid<-data.frame(D1=c(2,4,6,8,10,2,4,6,8,10,2,4,6,8,10,2,4,6,8,10), D2=rev(c(rep(12,5),rep(9,5), rep(6,5),rep(3,5) )))\n#  row.names(orgGrid) <- 0:19\n  #library(ggplot2); \n#   ggplot(orgGrid, aes(x=D1, y=D2)) + geom_text(label=row.names(truthGrid),vjust=-1) + geom_point() + \n#                                        scale_x_discrete(breaks=seq(0,11,2), limits=c(0:12)) + scale_y_discrete(breaks=seq(0,13,3), limits=c(0:13)) +\n#                                        theme_update(panel.grid.major=element_blank(),panel.grid.minor=element_blank(), panel.background=element_rect(color=\"white\")) + theme_bw()\n  #ggsave(\"originalGrid.png\")\n  \n  \n\n##### APPLY PROCRUSTES ######\n  #X <- matrix(data=c(0,0,0,9,12,9), nrow=3, byrow=TRUE, dimnames=list(NULL,c(\"D1\",\"D2\")))\n  \n  #a <- procrustes(Anchors,mds_node_coordinates$conf[c(1,16,20),]) # match 3 anchors\n  anchor_proc <- procrustes(Anchors,matrix(node_coordinates[Anchor_ix,],ncol=2)) # match 2 anchors\n    #fitted_mds <- cmdscale(run_rssi_distance_d,k=2); anchor_proc <- procrustes(Anchors,matrix(fitted_mds[Anchor_ix,],ncol=2))  # classical MDS!!\n\n  # modify mds output accordingly!\n  fitted_mds <- node_coordinates # Smacof MDS\n  fitted_mds <- fitted_mds %*% anchor_proc$rotation # matrix multiplication\n  fitted_mds <- fitted_mds * anchor_proc$scale\n  fitted_mds[,1] <- fitted_mds[,1] + anchor_proc$translation[,1]\n  fitted_mds[,2] <- fitted_mds[,2] + anchor_proc$translation[,2]\n  colnames(fitted_mds) <- c(\"D1\",\"D2\")\n\npp1<-ggplot(as.data.frame(fitted_mds), aes(x=D1,y=D2)) + geom_point(label=rownames(fitted_mds)) + geom_text(label=rownames(fitted_mds)) + scale_y_reverse()\npp2<- pp1 + geom_point(data = as.data.frame(real_positions), aes(x=x,y=y), color='red') + geom_point(label=rownames(real_positions)) + geom_text(label=as.character(real_positions$node)) \nprint(pp2)\n#####\n\nmeasured <- fitted_mds\ntraining <- real_positions\n\n\nclosestPositions <- data.frame(node=rownames(node_coordinates),position=-1)\nfor (rcvr in 1:nrow(fitted_mds)) \n{\n  #Find closest distance from training_distances to rcvr\n  min_pos <- -1\n  mindist <- 10000\n  \n  for (tr in 1:nrow(real_positions))\n  {\n    if (real_positions[tr,\"node\"] %in% closestPositions$position)\n      next;\n    #print(real_positions[tr,\"receiver\"])\n    \n    eucdist <- euclideanDist(fitted_mds[rcvr,\"D1\"], real_positions[tr,\"x\"], fitted_mds[rcvr,\"D2\"], real_positions[tr,\"y\"])\n    if (eucdist <= mindist)\n    {\n      min_pos <- real_positions[tr,\"node\"]\n      mindist <- eucdist\n    }\n  }\n  #closestPositions[rcvr, \"receiver\"] <- fitted_mds[rcvr, \"receiver\"]\n  closestPositions[rcvr, \"position\"] <- min_pos\n}\n\nif (all(closestPositions$node == closestPositions$position))\n{\n  success.list <- c(success.list,i)\n  print(\"SUCCESS\")\n} else {\n  fail.list <- c(fail.list,i)\n  print(\"FAIL\")\n}\n\n#### HOME MADE ... it was simple and cute!\nif (FALSE){\n  r <- stretch.and.snap(mds_node_coordinates$conf, Nx=Nx, Ny=Ny, dx=dx, dy=dy)\n\n  is.success <- FALSE\n  for (f in 1:4) { # rotate max 4 times until 0 is at the corner\n    if (r[1,1] != 0)\n      r <- rotate(r)\n    else break;\n  }\n  if (all.equal(Truth,r) == TRUE || all.equal(Truth,t(r)) == TRUE ){\n      is.success <- TRUE\n      #print(r); \n      cat(\"matched experiment \", i, \"\\n\")\n      success.list <- c(success.list,i)\n  } else {\n    cat (\"no match for experiment \", i, \"\\n\")\n    fail.list <- c(fail.list,i)\n  }\n}\n  \n#print(is.success)\n\n  #cat(\"i=\",i,all(sequence==real_sequence),\"\\n\")\n  \n#   mds_node_sequence[[iteration]]<-sequence\n#   #if (sequence[length(sequence)]==real_sequence[[1]]) \n#   #  mds_node_sequence[[iteration]]<-rev(sequence)\n#   if (identical(sequence,real_sequence1) || identical(sequence,real_sequence2) || identical(sequence,real_sequence3) || identical(sequence,real_sequence4))\n#   {\n#     cat(\"TRUE, \")\n#     MDSsuccess <- MDSsuccess +1\n#   }\n    \n}\n\n#paste(fail.list,collapse=\",\")\n\ncat(\"Total Success: \", length(success.list), \"\\n\")\ncat(\"Total Fail: \", length(fail.list), \"\\n\")\ncat(\"Nx=\",Nx, \" Ny=\",Ny, \" dx=\",dx,\" dy=\",dy,\" sd_noise_dbm=\",sd_noise_dbm, \"\\n\")\ncat(\"Dissimilarity metric: \", colnames(all_stats_rssi)[4], \"\\n\")\n\n# print(MDSsuccess)\n# correct<-lapply(mds_node_sequence, identical, real_sequence)\n# length(correct[correct==TRUE])\n  \nif (FALSE){\n  binaryResults <- c()\n  for(i in 1:length(mds_node_sequence))\n  {\n  \tbinaryResults <- rbind(binaryResults,all(mds_node_sequence[[i]]==real_sequence))\n  \tError <- findError (as.integer(mds_node_sequence[[i]]),as.integer(real_sequence))\n    ErrorMatrix[i,] <- c(i,max(Error),sum(Error))\n    cat(paste(\"#RefNode:\",refnode,\"Success:\",sum(binaryResults)), \"out of \", length(binaryResults),\"experiments\",\n        \"MeanError=\", meanError,\"\\n\")\n  }\n  \n  meanError <- sum(ErrorMatrix[,\"maxError\"]) / sum(ErrorMatrix[,\"maxError\"] > 0) \n}\n## Print Elapsed Time\nendTime <- proc.time()\nprint(endTime-startTime)\n\n\n\n#findError (as.integer(mds_node_sequence[[2000]]),as.integer(real_sequence))\n",
    "created" : 1421794516090.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3934264006",
    "id" : "484EF259",
    "lastKnownWriteTime" : 1438258225,
    "last_content_update" : 0,
    "path" : "~/phd/R/2d/mds_smacof_2D.R",
    "project_path" : "mds_smacof_2D.R",
    "properties" : {
    },
    "relative_order" : 12,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}