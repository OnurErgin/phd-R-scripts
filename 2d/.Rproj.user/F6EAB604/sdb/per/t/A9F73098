{
    "collab_server" : "",
    "contents" : "#reilability.R\n# 08.07.2015\n\nsource(\"EdgeDiscovery.R\")\n\nif (\"package:ggplot2\" %in% search())\n  detach(\"package:ggplot2\", unload=TRUE)\n\nlibrary(\"ggplot2\")\n\ncols <- Nx <- 5; rows <- Ny <- 4; dx <- 3; dy <- 3; sd_noise_dbm <- -30\n\ntopQuantile <- 0.5\nrssMaxDifference <- 3 \nsource(\"probSeqFunctions-fixedPrune.R\")\n\nrun.verbose <- FALSE\nproduceOutput <- FALSE # for probabilitySeqDF and probabilitiesDF. This file will produce output anyways\n\nexperimentSet <- 1:100 # 3x3fails: c(8, 16, 34, 54, 59, 83, 90) # 5x5fails: c(8, 34, 41, 59, 81, 83, 90)\n\n  expSize  <- length(experimentSet)\n  \n  Truth <- matrix (c(0:(Nx*Ny-1)), nrow=Ny, byrow=TRUE)\n  refnodes <- c(Truth[1,1],Truth[Ny,1])\n  #refnodes <- c(Truth[1,1],Truth[2,1])\n  numnodes <- length(Truth)\n  \n  this.hostname <- Sys.info()['nodename']\n  \n  #directory <- paste(\"./simOut-\",Nx,\"x\",Ny,\"-\",dx,\"mX\",dy,\"m-Noise\",sd_noise_dbm,\"dbm/\",sep=\"\")\n  #basedirectory <- \"inputs_simulation/equiDist/3x3_ideal/\"; subdirectory<-\"\"\n  \n  if (grepl(\"carme\", this.hostname)){\n    basedirectory <- \"./equiDist/\" # For Carme\n  } else if (grepl(\"Onurs-MacBook-Pro\",this.hostname))\n    basedirectory <- \"/Volumes/carme_lhome/R/2d/equiDist/\"\n  \n  subdirectory <- paste(\"simOut-\",Nx,\"x\",Ny,\"-\",dx,\"mX\",dy,\"m-Noise\",sd_noise_dbm,\"dbm/\",sep=\"\")\n  #basedirectory <- paste(\"../measurements/simOut-\",Nx,\"x\",Ny,\"-\",dx,\"mX\",dy,\"m-Noise\",sd_noise_dbm,\"dbm/\",sep=\"\");  subdirectory<-\"\" #\"../measurements/simOut-5x4-3mX3m-Noise-30dbm/\";\n  directory <- paste(basedirectory,subdirectory,sep=\"\")\n  \nverifyWithEdges <- function(produceOutput = TRUE, numrefnodes = 2) {\n  \n  resdirectory <- paste(directory, ifelse (numrefnodes == 2, \"results-2CornerRef/\",\"results-3CornerRef/\") , sep=\"\")\n \n  totalSuccess <- 0\n  failedExpNos <- c()\n  verdicts <- data.frame(expNo=numeric(expSize), verdict=logical(expSize), reliability=character(expSize), stringsAsFactors=FALSE)\n  highReliable <- mediumReliable <- lowReliable <- c()\n  \n  overallTime <- proc.time()\n  for(expNo in experimentSet)\n  {   \n    \n  startTime <- proc.time()\n      TRACE_FILE <- paste(directory,\"2dSim-\",Nx,\"x\",Ny,\"-\",dx,\"mX\",dy,\"m-\",expNo,\".txt\",sep=\"\")\n      cat(\"Loading:\",TRACE_FILE, \"\\n\")  \n      packets <- read.table(TRACE_FILE,  na.strings=\"\", header=TRUE)\n      packets$time  <- 0\n      packets$power <- 0\n      \n      resultFile <- paste(resdirectory,\"result-\",Nx,\"x\",Ny,\"-\",dx,\"mX\",dy,\"m-\",expNo,\".txt\",sep=\"\")\n      cat(\"Loading:\",resultFile, \"\\n\")  \n      result <- read.table(resultFile,  na.strings=\"\", header=FALSE)\n      \n    if (all.equal(as.data.frame(Truth),result) == TRUE) {\n      totalSuccess <- totalSuccess + 1\n      isSuccess <- TRUE\n    } else {\n      failedExpNos <- c(failedExpNos,expNo)\n      isSuccess <- FALSE\n     # print(result)\n    }\n    cat(\"Result is \", isSuccess, \"\\t total: \",totalSuccess, \"/\",length(failedExpNos)+totalSuccess, \"\\n\")\n    \n    ## Reliability\n    score <- 0\n    refNodeSet <- result[,1]\n    # First column reverse:\n    revRefNodeSet <- as.integer(getFirstColumnRefs(rev(refnodes),packets, Ny))\n    if (TRUE == all.equal(rev(refNodeSet),revRefNodeSet)) {\n      print(\"First column matches\")\n      score <- score + 1\n    }\n    \n    if (-1 %in% result) {\n      score <- 0\n    } else { #cols <- ncolsResult ; rows <- nrowsResult\n    \n    lastColumn <- result[,cols]\n    \n    lastColumnRefnodes <- c(result[1,cols], result[rows,cols])\n    lastColumnRefnodeset <- as.integer(getFirstColumnRefs(lastColumnRefnodes, packets, Ny))\n    reverseLastColumnRefnodeset <- as.integer(getFirstColumnRefs(rev(lastColumnRefnodes), packets, Ny))\n    \n    if (TRUE == all.equal(as.integer(lastColumnRefnodeset),lastColumn) || \n        TRUE == all.equal(as.integer(reverseLastColumnRefnodeset),rev(lastColumn)) ){\n      print(\"Last column matches\")\n      score <- score + 1\n      \n      if (TRUE == all.equal(lastColumnRefnodeset,rev(reverseLastColumnRefnodeset)))\n        score <- score + 1\n    }\n    }\n    \n    if (score == 3)\n    {\n      highReliable <- c( highReliable , expNo)\n      cat(\"ExpNo:\",expNo,\" reliability is: High!\\n\")\n      reliability <- \"high\"\n    } else if (score == 2){\n      mediumReliable <- c(mediumReliable, expNo)\n      cat(\"ExpNo:\",expNo,\" reliability is: Medium!\\n\")\n      reliability <- \"medium\"\n    } else {\n      lowReliable <- c(lowReliable, expNo)\n      cat(\"ExpNo:\",expNo,\" reliability is: Low!\\n\")\n      reliability <- \"low\"\n    }\n    \n    verdicts[expNo,\"expNo\"] <- expNo\n    verdicts[expNo,\"verdict\"] <- isSuccess\n    verdicts[expNo,\"reliability\"] <- reliability\n    print(tail(verdicts[verdicts$expNo!=0,],n=1))\n   \n    ## Print Elapsed Time\n    endTime <- proc.time()\n    print(endTime-startTime) \n  }\n  ## Print Elapsed Time\n  overallEndTime <- proc.time()\n  print(overallEndTime - overallTime)\n  \n  if(produceOutput)\n    write.table(verdicts,paste(resdirectory,\"verdicts-edgeVerify.txt\",sep=\"\"),col.names = TRUE, row.names = FALSE)\n  \n  return(verdicts)\n} # verify2refnodes()\n\nfindCorner <- function (packets, cornerNodes, excludes=c(-1)) \n{\n  #\n  # cornerNodes[]: \n  # [1][3]\n  # [2]\n  #\n  cornerRef <- cornerNodes[1]; sideRefs <- cornerNodes[2:3]\n  winners1 <- getSendersWinningReceivers(allPackets=packets, theSender=cornerRef, excludeList=as.integer(excludes))\n  #closestNodes <- mostFreqReceiver(winners,tIndex=1)\n  \n  #winners2 <- getSendersWinningReceivers(allPackets=packets, theSender=sideRefs[1], excludeList=as.integer(excludes))\n  #winners3 <- getSendersWinningReceivers(allPackets=packets, theSender=sideRefs[2], excludeList=as.integer(excludes))\n  winners2 <- getSendersWinningReceivers(allPackets=packets, theSender=sideRefs[1], includeList=winners1[1,])\n  winners3 <- getSendersWinningReceivers(allPackets=packets, theSender=sideRefs[2], includeList=winners1[1,])\n  \n  #mostCommonReceiver <- as.integer(names(table(winners2[1,winners2[1,]%in%winners3[1,]])[1]))\n  \n  allWinners <- c(winners2[1,],winners3[1,])\n  mostFrequentReceiver <- as.integer(names(rev(sort(table(allWinners)))[1]))\n  \n  return(mostFrequentReceiver)\n}\n\nverify3refnodes <- function(produceOutput = TRUE, onlyError = FALSE, numrefnodes = 3) {\n  \n  resdirectory <- paste(directory, ifelse (numrefnodes == 2, \"results-2CornerRef/\",\"results-3CornerRef/\") , sep=\"\")\n  \n  totalSuccess <- 0\n  failedExpNos <- c()\n  verdicts <- data.frame(expNo=numeric(expSize), verdict=logical(expSize), reliability=character(expSize), stringsAsFactors=FALSE)\n  highReliable <- mediumReliable <- lowReliable <- c()\n  \n  manhattenError <- 0\n  biggestError <- c(expNo=0, Error=0)\n  \n  overallTime <- proc.time()\n  for(expNo in experimentSet)\n  {   \n    startTime <- proc.time()\n    \n    if (!onlyError) {\n      TRACE_FILE <- paste(directory,\"2dSim-\",Nx,\"x\",Ny,\"-\",dx,\"mX\",dy,\"m-\",expNo,\".txt\",sep=\"\")\n      cat(\"Loading:\",TRACE_FILE, \"\\n\")  \n      packets <- read.table(TRACE_FILE,  na.strings=\"\", header=TRUE)\n      packets$time  <- 0\n      packets$power <- 0\n    }\n    \n    resultFile <- paste(resdirectory,\"result-\",Nx,\"x\",Ny,\"-\",dx,\"mX\",dy,\"m-\",expNo,\".txt\",sep=\"\")\n    cat(\"Loading:\",resultFile, \"\\n\")  \n    result <- read.table(resultFile,  na.strings=\"\", header=FALSE)\n    \n    if (all.equal(as.data.frame(Truth),result) == TRUE) {\n      totalSuccess <- totalSuccess + 1\n      isSuccess <- TRUE\n    } else {\n      failedExpNos <- c(failedExpNos,expNo)\n      isSuccess <- FALSE\n      # print(result)\n    }\n    \n    err <- getError(result,Truth)\n    manhattenError <- manhattenError + err\n    if (err > biggestError[\"Error\"])\n      biggestError <- c(expNo = expNo, Error = err)\n    \n    if (onlyError)\n      next;\n    \n    #inner corners: [Ny-1,2] , [Ny-1,Nx-1], [2,Nx-1]\n    cToFind <- c(result[Ny-1,2] , result[Ny-1,Nx-1], result[2,Nx-1])\n    corner1 <- findCorner(packets, c(result[Ny,1],result[Ny-1,1],result[Ny,2])) \n    corner2 <- findCorner(packets, c(result[Ny,Nx],result[Ny,Nx-1],result[Ny-1,Nx]))\n    corner3 <- findCorner(packets, c(result[1,Nx],result[1,Nx-1],result[2,Nx]))\n\n    \n    #outer corners: [Ny,1], [Ny,Nx], [1,Nx]\n    #cToFind <- c(result[Ny,1], result[Ny,Nx], result[1,Nx])\n#     corner1 <- findCorner(packets, c(result[Ny-1,2],result[Ny-1,1],result[Ny,2])) \n#     corner2 <- findCorner(packets, c(result[Ny-1,Nx-1],result[Ny,Nx-1],result[Ny-1,Nx]))\n#     corner3 <- findCorner(packets, c(result[2,Nx-1],result[1,Nx-1],result[2,Nx]))\n# delete     score <- 0\n# delete     if (corner1 == result[Ny,1]) score <- score + 1\n# delete     if (corner2 == result[Ny,Nx]) score <- score + 1\n# delete     if (corner3 == result[1,Nx]) score <- score + 1\n    \n    score <- 0\n    if (corner1 == cToFind[1]) score <- score + 1\n    if (corner2 == cToFind[2]) score <- score + 1\n    if (corner3 == cToFind[3]) score <- score + 1\n    \n    cat(\"1: bottom left corner\",corner1); cat(\" : \",corner1 == cToFind[1] ,\"\\n\")\n    cat(\"2: bottom right corner\",corner2); cat(\" : \",corner2 == cToFind[2] ,\"\\n\")\n    cat(\"3: top right corner\",corner3); cat(\" : \", corner3 == cToFind[3] ,\"\\n\")\n    \n      \n    if (score == 3)\n    {\n      highReliable <- c( highReliable , expNo)\n      cat(\"ExpNo:\",expNo,\" reliability is: High!\\n\")\n      reliability <- \"high\"\n    } else if (score == 2){\n      mediumReliable <- c(mediumReliable, expNo)\n      cat(\"ExpNo:\",expNo,\" reliability is: Medium!\\n\")\n      reliability <- \"medium\"\n    } else {\n      lowReliable <- c(lowReliable, expNo)\n      cat(\"ExpNo:\",expNo,\" reliability is: Low!\\n\")\n      reliability <- \"low\"\n    }\n    \n    verdicts[expNo,\"expNo\"] <- expNo\n    verdicts[expNo,\"verdict\"] <- isSuccess\n    verdicts[expNo,\"reliability\"] <- reliability\n    #print(tail(verdicts[verdicts$expNo!=0,],n=1))\n    \n    \n    cat(\"Result is \", isSuccess, reliability, \"\\t total: \",totalSuccess, \"/\",length(failedExpNos)+totalSuccess, \"\\n\")\n    \n    #Reliability\n    \n    ## Print Elapsed Time\n    endTime <- proc.time()\n    print(endTime-startTime) \n  }\n  cat(\"Total Success\", totalSuccess, \"\\n\")\n  cat(\"Mean Manhattan Error:\", manhattenError, \"\\n\")\n  cat(\"Biggest Error:\"); print(biggestError)\n  \n  cat(\"Mean Error: \", manhattenError / (length(experimentSet) - totalSuccess ))\n  \n  ## Print Elapsed Time\n  overallEndTime <- proc.time()\n  print(overallEndTime - overallTime)\n  \n  if (produceOutput)\n    write.table(verdicts,paste(resdirectory,\"verdicts-cornerVerify.txt\",sep=\"\"),col.names = TRUE, row.names = FALSE)\n  \n  return(verdicts)\n}\n\nplotVerdict <- function (finalVerdicts, titleTxt){\n  scale_fill_manual2 <- function(){ \n    #return (scale_fill_manual(\"Verdict\",values=c(\"#f03b20\",\"#1f78b4\")))\n    #temporarily ignore below\n    if(length(unique(finalVerdicts$verdict))==2) \n      scale_fill_brewer(\"Verdict\",palette=\"Paired\") # Blue and light blue\n    #scale_fill_manual(\"Verdict\",values=c(\"#f03b20\",\"#1f78b4\")) #Blue and Red \n    else \n      scale_fill_manual(\"Verdict\",values=c(\"#1f78b4\"))\n  }\n  theme_update(axis.title.x = element_text(size = 20, vjust = -0.25),\n               axis.title.y = element_text(size = 20, angle = 90, vjust = 0.25),\n               axis.text.x = element_text(size = 16, color = \"black\"),\n               axis.text.y = element_text(size = 16, color = \"black\"),\n               title = element_text(size=8),\n               panel.background = element_blank(),\n               panel.grid.major = element_line(colour = \"grey90\"),\n               panel.background = element_rect(fill=NA, color=\"black\"),\n               legend.position = \"bottom\",\n               legend.box = \"horizontal\",\n               legend.key = element_blank(), \n               legend.background = element_rect(fill=\"white\", size=0.25),\n               legend.text = element_text(size=16),\n               legend.title = element_text(size=16),\n               strip.background = element_blank(),\n               strip.text = element_text(size=14)\n               )\n#browser()\n#a <- finalVerdicts; \n#finalVerdicts <- a\n#finalVerdicts <- subset(finalVerdicts,noise==-30)\n#finalVerdicts <- subset(finalVerdicts, select = -expNo) #aes(x=noise, y=success, fill=name)\n  p1 <- ggplot(finalVerdicts, aes(x=reliability, fill=verdict))\n  #p1 <- p1 + geom_bar(aes(y = (..count..)/sum(..count..))) + scale_y_continuous(\"Verdict Ratio [%]\",labels=percent) # ylab(\"Number Of Experiments\") #+ labels(percent_format())\n  p1 <- p1 + geom_bar() + facet_grid(. ~ noise)\n  p1 <- p1 + scale_y_continuous(\"Number Of Experiments\", limits=c(0,length(unique(finalVerdicts$expNo))))\n  p1 <- p1 + scale_x_discrete(\"Reliability\",drop=FALSE) \n  p1 <- p1 + scale_fill_manual2() + guides(fill=guide_legend(reverse=TRUE)) \n  p1 <- p1 + ggtitle(titleTxt)# + theme(panel.background=element_rect(fill=\"#FAFAFA\"), legend.position=\"bottom\")\n  #p1 <- p1+facet_wrap(~Rank+verifyRank)\n  #p1 <- p1 + stat_bin(aes(label=(..count..) ), vjust=-0.5, geom=\"text\", position=\"identity\") # add text above bars\n  print(p1)\n  return (p1)\n}\n\nreadResults <- function (refnodes = 3, verificationtype = \"edge\" ) { # \"edge\" or \"corner\"\n  #dx <- 3; dy <- 3; \n  #basedirectory <- \"./equiDist/\" # For Carme\n  #basedirectory <- \"/Volumes/carme_lhome/R/2d/equiDist/\"\n  #basedirectory <- paste(\"../measurements/simOut-\",Nx,\"x\",Ny,\"-\",dx,\"mX\",dy,\"m-Noise\",sd_noise_dbm,\"dbm/\",sep=\"\");  subdirectory<-\"\" #\"../measurements/simOut-5x4-3mX3m-Noise-30dbm/\";\n  if (verificationtype == \"edge\")\n    verdict_filename <- \"verdicts-edgeVerify.txt\"\n  else if (verificationtype == \"corner\")\n    verdict_filename <- \"verdicts-cornerVerify.txt\"\n  \n  sd_noise_dbm <- -45\n  \n  subdirectory <- paste(\"simOut-\",Nx,\"x\",Ny,\"-\",dx,\"mX\",dy,\"m-Noise\",sd_noise_dbm,\"dbm/\",sep=\"\")\n  directory <- paste(basedirectory,subdirectory,sep=\"\")\n  if (refnodes == 2)\n    resdirectory <- paste(directory, \"results-2CornerRef/\", sep=\"\")\n  else if (refnodes == 3)\n    resdirectory <- paste(directory, \"results-3CornerRef/\", sep=\"\")\n  \n  verdicts_45 <- read.table(paste(resdirectory,verdict_filename,sep=\"\"), header = TRUE)\n  verdicts_45$noise <- \"Moderate Noise\"\n  \n  #basedirectory <- \"./equiDist/\" # For Carme\n  #basedirectory <- \"/Volumes/carme_lhome/R/2d/equiDist/\"\n  #basedirectory <- paste(\"../measurements/simOut-\",Nx,\"x\",Ny,\"-\",dx,\"mX\",dy,\"m-Noise\",sd_noise_dbm,\"dbm/\",sep=\"\");  subdirectory<-\"\" #\"../measurements/simOut-5x4-3mX3m-Noise-30dbm/\";\n  sd_noise_dbm <- -30\n  subdirectory <- paste(\"simOut-\",Nx,\"x\",Ny,\"-\",dx,\"mX\",dy,\"m-Noise\",sd_noise_dbm,\"dbm/\",sep=\"\")\n  directory <- paste(basedirectory,subdirectory,sep=\"\")\n  if (refnodes == 2)\n    resdirectory <- paste(directory, \"results-2CornerRef/\", sep=\"\")\n  else if (refnodes == 3)\n    resdirectory <- paste(directory, \"results-3CornerRef/\", sep=\"\")\n  \n  verdicts_30 <- read.table(paste(resdirectory,verdict_filename,sep=\"\"), header = TRUE)\n  verdicts_30$noise <- \"High Noise\"\n  \n  verdicts <- rbind (verdicts_30,verdicts_45)\n  verdicts$reliability <- factor(verdicts$reliability, levels=c(\"high\",\"medium\",\"low\"))\n  \n  cat(\"Nx=\",Nx, \" Ny=\",Ny, \" dx=\",dx,\" dy=\",dy,\" sd_noise_dbm=\",sd_noise_dbm, \"\\n\")\n  cat(\"Refnodes: \", refnodes, \"\\n\")\n  cat(\"Success 45:\", sum(verdicts_45$verdict), \", Success 30:\", sum(verdicts_30$verdict),\"\\n\")\n  \n  return (verdicts)\n}\n\ngetError <- function (result, Truth) {\n  Error<- matrix(rep(0,nrow(Truth)*ncol(Truth)),nrow=nrow(Truth), ncol=ncol(Truth)) # Comparison matrix\n  \n  for (r in 1:nrow(result))\n    for(c in 1:ncol(result))\n    {\n      resultLoc <- which(Truth==result[r,c], arr.ind=TRUE)\n      diffRow <- abs(resultLoc[1,\"row\"]-r)\n      diffCol <- abs(resultLoc[1,\"col\"]-c)\n      Error[r,c] <- sum(diffRow, diffCol)\n    }\n  return (mean(Error))\n}\n\nsavePlotToFile <- function (plot1, plotName) {\n  plotfilename <- paste(\"./inputs_simulation/equiDist/plots/\",plotName,\".pdf\",sep=\"\")\n  cat(plotName, \"saving...\",plotfilename,\"\\n\")\n  ggsave(filename=plotfilename, plot=p, width=6.86, height=5)\n}\n\n#verify2refnodes()\n#verdicts_2ref <- readResults(5,4)\n#plotVerdict(verdicts_2ref, \"\")\n\n#verify3refnodes(FALSE, onlyError = TRUE)\n#verdicts_3ref <- verify2refnodes(produceOutput = FALSE)\n#verifyWithEdges(produceOutput = TRUE, numrefnodes = 3)\n#verdicts_3ref <- readResults(3, verificationtype = \"edge\")\nNumRefNodes <- 3\nverdicts <- readResults( NumRefNodes, verificationtype = \"edge\")\nplotName <- paste(Nx,\"x\",Ny,\"-\",dx,\"mx\",dy,\"m-\",NumRefNodes,\"refs-reliability\", sep=\"\") \np <- plotVerdict(verdicts, \"\")\nsavePlotToFile(p,plotName)\n",
    "created" : 1436392349809.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "163598581",
    "id" : "A9F73098",
    "lastKnownWriteTime" : 1438260297,
    "last_content_update" : 0,
    "path" : "~/phd/R/2d/reliability.R",
    "project_path" : "reliability.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 29,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}