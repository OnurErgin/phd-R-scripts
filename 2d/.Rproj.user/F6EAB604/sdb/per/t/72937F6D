{
    "collab_server" : "",
    "contents" : "#2D.R\n\nlibrary(plyr)\n#library(reshape)\n#library(MASS)\n\ntopDebugLevel <- 1\n\nrows <- 8\ncols <- 2\nrefnode <- 100\nplacedNodes <- c()\n#arr <- array (1:8, dim=c(2,10,2))\n#myprint(arr,level=0,debugLevel=topDebugLevel)\n\nreadkey <- function()\n{\n    cat (\"Press [enter] to continue\")\n    line <- readline()\n}\n\nmyprint <- function (..., level=0, debugLevel = 1, separator=\" \")\n{\n\twholestring <- list(...)\n\tmain_print <- paste(wholestring,sep=separator) # convert to 'cat()' printable string\n\tforeprint <- paste(\"<\",level,\">\",sep=\"\")\n\tif (level >= debugLevel)\n\t\tcat(foreprint, main_print,\"\\n\", sep=separator)\n}\n\nd_path_loss <- function(pr, pt=0, fc=2.405e9, n=2, d0=1) {\n  lamda <- 2.998e8/fc;\n  pl0 <- -20*log10(lamda/(4*pi*d0));\n  d0*10^((pt-pr-pl0)/(10*n))\n}\n\n# Returns the best 'numWinners' nodes according to \"constraint\"\ngetWinners <- function(node, stats, excludeSeq, argConstraint, numWinners=2) {\n\tsenderPackets <- subset(stats,!(receiver %in% excludeSeq) & (sender == node))\n\tnodeWinners <- head(senderPackets[order(-senderPackets[,argConstraint]),],numWinners)[,c(\"receiver\")]\n\tnodeWinners <- as.numeric(as.character(nodeWinners))\n\treturn(nodeWinners)\n}\n\ngetClosestIn <- function (node, stats, includeSet, argConstraint, numClosest=1) {\n\tsenderPackets <- subset(stats,(receiver %in% includeSet) & (sender == node))\n\tclosestNode <- senderPackets[order(-senderPackets[,argConstraint]),\"receiver\"][numClosest]\n\tclosestNode <- as.numeric(as.character(closestNode))\n\treturn(closestNode)\n}\n\ntwoBy7 <- c(152,151,13,12,150,149,90,89,143,144,94,93,140,139)\n#twoBy7 <- c(151, 153,12,10,149,147,89,88,144,145,93,92,139,141)\nTruth <- matrix(twoBy7,nrow=2,ncol=length(twoBy7)/2)\nrefnode <- twoBy7[1]\n\ndirectory <- \"./chOuterLoop4thFl-4x7/\"\nfilePrefix <- \"seq16ch_\"\nfileSuffix <- \".txt\"\nfile <- \"seq16ch_10.txt\"\ncsvfile <- \"distance_vector_stats_all_channels_4x7.csv.txt\"\nif (!(\"Big_all_stats\" %in% ls()) && TRUE) {\n\tmyprint(\"Loading Big_all_stats\",level=1,debugLevel=topDebugLevel)\n\tBig_all_stats <- read.table (csvfile, sep=',', colClasses=c(rep(\"factor\",2),rep(\"numeric\",11)), header=TRUE)\n\t#Big_all_stats <- read.csv (csvfile, header=TRUE) #Works but with all factors\n\t#Big_all_stats <- read.csv (csvfile, header=TRUE, colClasses=c(rep(\"factor\",2),rep(\"numeric\",11)))\n\t\n\tBig_all_stats <- subset(Big_all_stats, sender %in% twoBy7 & receiver %in% twoBy7)\t\t\n\tBig_all_stats <- droplevels(Big_all_stats)\n}\n\nconstraint <- \"avg_max_5\"\n#constraint <- \"max_rssi\"\n\nrunBegin <- 1\nrunEnd   <- 693\n\n#fileBegin <- fileEnd <- 10\n\nRUNS <- runBegin:runEnd\n#RUNS <- 693\n#RUNS <- 100:300\ncMaxError <- c()\ncMeanError <- c()\n\nfor (RUN in RUNS)\n{\t\n\tmyprint(\"|===============\",level=1,debugLevel=topDebugLevel)\n\tmyprint(\"RUN:\",RUN,level=2,debugLevel=topDebugLevel)\n\tall_stats <- subset(Big_all_stats, run == RUN)\n\t\n\tif (!(\"packets\" %in% ls()) && FALSE)\n\t{\n\t\t#file <- paste(directory,filePrefix,RUN,fileSuffix,sep=\"\")\n\t\tSfile <- paste(directory,file,sep=\"\")\n\t\tpackets <- read.table(file, sep=\"\\t\", na.strings=\"\", col.names=c(\"receiver\", \"sender\", \"channel\", \"rssi\", \"power\", \"time\", \"packetnum\"), colClasses=c(rep(\"factor\",3), \"numeric\", \"factor\", \"character\", \"numeric\"), header=FALSE)\n\t\t\n\t\tpackets <- subset(packets, sender %in% twoBy7 & receiver %in% twoBy7)\n\t\t\n\t\tpackets <- droplevels(packets)\n\t\n\t\tall_stats<-ddply(packets, .(sender,receiver), summarise,\n\t\t                packets=length(rssi),\n\t\t                max_rssi=max(rssi), count_max_rssi=sum(rssi==max(rssi)),\n\t\t                min_rssi=min(rssi),\n\t\t                median_rssi=median(rssi),\n\t\t                avg_rssi=mean(rssi),\n\t\t                sd_rssi=sd(rssi),\n\t\t                avg_max_2=mean(subset(rssi, rssi>=quantile(rssi, 0.98))),\n\t\t                avg_max_5=mean(subset(rssi, rssi>=quantile(rssi, 0.95))),\n\t\t                avg_max_10=mean(subset(rssi, rssi>=quantile(rssi, 0.90)))\n\t\t                )\n\t\t\n\t\t#all_stats_m <- melt(all_stats, variable_name=\"dv\")\n\t\tif (FALSE){\n\t\t\tall_stats_rssi <- subset(all_stats, select=c(sender, receiver, max_rssi)) \n\t\t\t\n\t\t\tall_stats_rssi_distance <- mutate(all_stats_rssi, distance=d_path_loss(pr=max_rssi, n=3))\n\t\t\t\n\t\t\trun_rssi_distance <- all_stats_rssi_distance\n\t\t\t\n\t\t\trun_rssi_distance_c <- cast(run_rssi_distance, receiver ~ sender , value=\"distance\", fill=50.0, add.missing=TRUE)\n\t\t\t\n\t\t\trun_rssi_distance_d <-as.dist(run_rssi_distance_c)\n\t\t\tmds_node_coordinates<-`cmdscale`(run_rssi_distance_d,k=2)\n\t\t\t\n\t\t\t#plot(mds_node_coordinates[,1]~mds_node_coordinates[,2],xlab=\"X Coordinates(m)\",ylab=\"Y Coordinates(m)\")\n\t\t\t#text(mds_node_coordinates[,1]~mds_node_coordinates[,2], labels=row.names(mds_node_coordinates),pos=3)\n\t\t}\n\t\t#sequence<-names(sort(mds_node_coordinates[,1]))\n\t}\n\tif(FALSE)\n\tfor (s in unique(all_stats$sender)) \n\t{\n\t\tsubstat <- subset(all_stats,sender == s)\n\t\tr <- head(substat[order(-substat[,constraint]),],4)[,c(\"receiver\",constraint)]\n\t\tr[,1] <- as.character(r[,1])\n\t\tcat(\"sender\",s,\":\",\"\\n\",sep=\" \")\n\t\tprint(r)\n\t}\n\tnodeseq <- c()\n\tnextnode <- refnode\n\tnodeseq <-c(nodeseq, nextnode)\n\t\n\tsenderPackets <- subset(all_stats,sender == nextnode)\n\tsenderPackets <- senderPackets[order(-senderPackets[,constraint]),c(\"receiver\",constraint)] # ordered\n\t\n\t# First two nodes are chosen by the refnode\n\tnode1 <- as.numeric(as.character(senderPackets[1,\"receiver\"]))\n\tnode2 <- as.numeric(as.character(senderPackets[2,\"receiver\"]))\n\tnodeseq <-c(nodeseq, node1); nodeseq <-c(nodeseq, node2) #add nodes to nodeseq\n\t\tmyprint(nodeseq,level=0,debugLevel=topDebugLevel)\n\t\n\t# Iterate loop from here \n\tfor  (i in 1:10)\n\t{\n\t\tmyprint(i,level=0,debugLevel=topDebugLevel)\n\t\twinners <-c()\n\t\t#senderPackets <- subset(all_stats,!(receiver %in% nodeseq) & (sender == node1))\n\t\t#node1Winners <- head(senderPackets[order(-senderPackets[,constraint]),],2)[,c(\"receiver\")]\n\t\t#node1Winners <- as.numeric(as.character(node1Winners))\n\t\tnode1Winners <- getWinners(node1, all_stats, nodeseq, constraint, numWinners=2)\n\t\t\n\t\t#senderPackets <- subset(all_stats,!(receiver %in% nodeseq) & (sender == node2))\n\t\t##senderPackets <- senderPackets[order(-senderPackets$max_rssi),c(\"receiver\",\"max_rssi\")] # ordered\n\t\t#node2Winners <- head(senderPackets[order(-senderPackets[,constraint]),],2)[,c(\"receiver\")]\n\t\t#node2Winners <- as.numeric(as.character(node2Winners))\n\t\tnode2Winners <- getWinners(node2, all_stats, nodeseq, constraint, numWinners=2)\n\t\t\n\t\twinners <- c(node1Winners,node2Winners)\n\t\tif(length(unique(winners)) <= 1) #last node\n\t\t{\n\t\t\tif (length(unique(winners)) != 0)\n\t\t\t{\n\t\t\t\tnodeseq <- c(nodeseq,winners[1]) #add last node\n\t\t\t\tmyprint(nodeseq,level=1,debugLevel=topDebugLevel)\n\t\t\t}\n\t\t\tbreak;\n\t\t}else\n\t\t{\n\t\t\twinnerFreq <- table(winners)\n\t\t\t if (max(winnerFreq) > 1)\n\t\t\t{\n\t\t\t\tclosestCornerNode <- as.numeric(names(which.max(winnerFreq)))\n\t\t\t}else #ask the previous node\n\t\t\t{\n\t\t\t\tpreviousNode <- nodeseq[length(nodeseq)-2]\n\t\t\t\t#senderPackets <- subset(all_stats,(receiver %in% winners) & (sender == previousNode))\n\t\t\t\t#closestCornerNode <- senderPackets[order(-senderPackets[,constraint]),\"receiver\"][1]\n\t\t\t\t#closestCornerNode <- as.numeric(as.character(closestCornerNode))\n\t\t\t\tclosestCornerNode <- getClosestIn(previousNode, all_stats, winners, constraint, 1)\n\t\t\t\tmyprint(node1,\" and \",node2,\" asked the previous node:\", previousNode, level=1, debugLevel=topDebugLevel)\n\t\t\t\t#stop(node1,\" and \",node2,\" asked the previous node:\", previousNode, \" and it picked: \", closestCornerNode)\n\t\t\t}\n\t\t\tnodeseq <- c(nodeseq,closestCornerNode) #add\n\t\t\t\n\t\t\toldnode <- nodeseq[length(nodeseq)-3] # at the opposite corner of last couple\n\t\t\t#senderPackets <- subset(all_stats,sender == oldnode & receiver %in% winners[winners!=closestCornerNode])\n\t\t\t#senderPackets <- senderPackets[order(-senderPackets[,constraint]),c(\"receiver\")] # ordered\n\t\t\t#diagonalNode <- as.numeric(as.character(senderPackets[1]))\n\n\n\t\t\tdiagonalNode <- getClosestIn(oldnode, all_stats, winners[winners!=closestCornerNode], constraint, 1)\n\t\t\t\n\t\t\t#Two opinions test:\n\t\t\t\n\t\tif(FALSE){\t\t\t\n\t\t\tccnWinners <- getWinners(closestCornerNode, all_stats, nodeseq, constraint, numWinners=2)\n\t\t\toldnodeWinners <- getWinners(oldnode, all_stats, nodeseq, constraint, numWinners=2)\n\t\t\tdiagonalWinners <- c(ccnWinners,oldnodeWinners)\n\t\t\tdiagonalWinnerFreq <- table(diagonalWinners)\n\t\t\tprint(diagonalWinnerFreq)\n\t\t\tif (max(diagonalWinnerFreq) > 1)\n\t\t\t{\n\t\t\t\tdiagonalNode <- as.numeric(names(which.max(diagonalWinnerFreq)))\n\n\t\t\t}else #ask the previous node only!\n\t\t\t{\n\t\t\t\tdiagonalNode <- getClosestIn(oldnode, all_stats, winners[winners!=closestCornerNode], constraint, 1)\t\n\t\t\t}\n\t\t\t\n\t\t\t# Bu da ccn'in en yakin ikinci nodu secmesi.\n\t\t\tdiagonalNode <- getWinners(closestCornerNode, all_stats, nodeseq, constraint,2)\n\t\t\tprint(diagonalNode)\n\t\t\tdiagonalNode <- diagonalNode[2]\n\n#\t\t\tstop(\"nodeSeq=\",nodeseq,\" <= ADD diagonalNode:\",diagonalNode)\n\t\t\tmyprint(\"nodeSeq=\",nodeseq,\" <= ADD diagonalNode:\",diagonalNode,level=2,debugLevel=topDebugLevel)\n\t\t}\n\t\t\t\n\t\t\t# Two opinions test up to here!\n\t\t\t\n\t\t\tnodeseq <- c(nodeseq, diagonalNode) #add\n\t\t\tmyprint(nodeseq,level=0,debugLevel=topDebugLevel)\n\t\t\t\n\t\t\t#Fix previous couple\n\t\t\tif (length(nodeseq) > 4 && FALSE )\n\t\t\t{\n\t\t\t\tlastnode1 <- nodeseq[length(nodeseq)]\n\t\t\t\tlastnode2 <- nodeseq[length(nodeseq)-1]\n\t\t\t\t\n\t\t\t\tsenderPackets <- subset(all_stats,(receiver %in% nodeseq) & (sender == lastnode1))\n\t\t\t\tlastnode1Winners <- head(senderPackets[order(-senderPackets[,constraint]),],2)[,c(\"receiver\")]\n\t\t\t\tlastnode1Winners <- as.numeric(as.character(lastnode1Winners))\n\t\t\t\t\n\t\t\t\tsenderPackets <- subset(all_stats,(receiver %in% nodeseq) & (sender == lastnode2))\n\t\t\t\t#senderPackets <- senderPackets[order(-senderPackets$max_rssi),c(\"receiver\",\"max_rssi\")] # ordered\n\t\t\t\tlastnode2Winners <- head(senderPackets[order(-senderPackets[,constraint]),],2)[,c(\"receiver\")]\n\t\t\t\tlastnode2Winners <- as.numeric(as.character(lastnode2Winners))\n\t\t\t\twinners <- c(lastnode1Winners,lastnode2Winners)\n\t\t\t\t\n\t\t\t\twinnerFreq <- table(winners)\n\t\t\t\t\n\t\t\t\tif (max(winnerFreq) > 1)\n\t\t\t\t{\n\t\t\t\t\tlastClosestCornerNode <- as.numeric(names(which.max(winnerFreq)))\n\t\t\t\t\t\n\t\t\t\t\tif (!(lastClosestCornerNode %in% c(nodeseq[length(nodeseq)-2],nodeseq[length(nodeseq)-3])))\n\t\t\t\t\t{\n\t\t\t\t\t\tmyprint(\"unreliable\",level=3,debugLevel=topDebugLevel); # uh-oh.. unreliable\n\t\t\t\t\t\tmyprint(lastClosestCornerNode,c(nodeseq[length(nodeseq)-2],nodeseq[length(nodeseq)-3]),level=3)\n\t\t\t\t\t}else\t\t\t\t\t\n\t\t\t\t\tif (lastClosestCornerNode == nodeseq[length(nodeseq)-2])\n\t\t\t\t\t\t{myprint(\"check good!\",level=3,debugLevel=topDebugLevel);}#then it is good\n\t\t\t\t\telse # swap!\n\t\t\t\t\t{\n\t\t\t\t\t\tmyprint(\"SWAP\",level=3,debugLevel=topDebugLevel)\n\t\t\t\t\t\tdummy <- nodeseq[length(nodeseq)-2]\n\t\t\t\t\t\tnodeseq[length(nodeseq)-2] <- nodeseq[length(nodeseq)-3]\n\t\t\t\t\t\tnodeseq[length(nodeseq)-3] <- dummy\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t} #last node\n\t\tif (8 %in% nodeseq) {\n\t\t\tmyprint(\"weird found\",level=2,debugLevel=topDebugLevel)\n\t\t\tbreak;\n\t\t}\n\t\tnode1 <- nodeseq[length(nodeseq)]\n\t\tnode2 <- nodeseq[length(nodeseq)-1]\n\t\t\n\t} #while true\n\t\n\tcat(\"result:\", nodeseq,\"\\n\")\n\tresultSeq <- matrix(nodeseq,nrow=2,ncol=length(twoBy7)/2, dimnames=list(c(1:2),c(1:7)))\n\tmyprint(resultSeq,level=1,debugLevel=topDebugLevel)\n\t\n\tError<- matrix(rep(0,nrow(Truth)*ncol(Truth)),nrow=nrow(Truth), ncol=ncol(Truth)) # Comparison matrix\n\t#A<- matrix(as.character(Truth == resultSeq),nrow=nrow(Truth), ncol=ncol(Truth)) # Comparison matrix\n\t#A[A==\"TRUE\"]<-\"\"\n\t#A[A==\"FALSE\"]<-\"F\"\n\t\n\tfor (r in 1:nrow(Truth))\n\t\tfor(c in 1:ncol(Truth))\n\t\t{\n\t\t\tresultLoc <- which(resultSeq==Truth[r,c], arr.ind=TRUE)\n\t\t\tdiffRow <- abs(resultLoc[1,\"row\"]-r)\n\t\t\tdiffCol <- abs(resultLoc[1,\"col\"]-c)\n\t\t\tError[r,c] <- sum(diffRow, diffCol)\n\t\t}\n\t\t\n\tfor(i in resultSeq)\n\t\t{\n\t\t\ttruthLoc <- which(Truth==i, arr.ind=TRUE)\n\t\t\tresultLoc <- which(resultSeq==i, arr.ind=TRUE)\n\t\t\tdiffRow <- abs(resultLoc[1,\"row\"]-truthLoc[1,\"row\"])\n\t\t\tdiffCol <- abs(resultLoc[1,\"col\"]-truthLoc[1,\"col\"])\n\t\t\tr <- resultLoc[1,\"row\"]; c <- resultLoc[1,\"col\"]\n\t\t\tError[r,c] <- max(diffRow, diffCol)\n\t\t}\n\t\t\n\tA<- matrix(as.character(Error),nrow=nrow(Truth), ncol=ncol(Truth)) # Comparison matrix\n\tA[A==\"0\"] <- \"\"\n\t\n\tif (FALSE){\n\trowno <- 1\n\tplot(colnames(resultSeq),-as.numeric(rep(rownames(resultSeq)[rowno],ncol(resultSeq))),ylim=c(-4,0),main=RUN)\n\ttext(as.numeric(colnames(resultSeq)),-as.numeric(rep(rownames(resultSeq)[rowno],ncol(resultSeq))),as.character(resultSeq[rowno,]),pos=1, col=\"blue\")\n\ttext(as.numeric(colnames(resultSeq)),-as.numeric(rep(rownames(resultSeq)[rowno],ncol(resultSeq))),as.character(Truth[rowno,]),pos=3, col=\"black\")\n\ttext(as.numeric(colnames(resultSeq)),-as.numeric(rep(rownames(resultSeq)[rowno],ncol(resultSeq))),as.character(A[rowno,]),pos=2, col=\"red\")\n\tpar(new=T) \n\trowno <- 2\n\tplot(colnames(resultSeq),-as.numeric(rep(rownames(resultSeq)[rowno],ncol(resultSeq))),ylim=c(-4,0))\n\ttext(as.numeric(colnames(resultSeq)),-as.numeric(rep(rownames(resultSeq)[rowno],ncol(resultSeq))),as.character(resultSeq[rowno,]),pos=1, col=\"blue\")\n\ttext(as.numeric(colnames(resultSeq)),-as.numeric(rep(rownames(resultSeq)[rowno],ncol(resultSeq))),as.character(Truth[rowno,]),pos=3, col=\"black\")\n\ttext(as.numeric(colnames(resultSeq)),-as.numeric(rep(rownames(resultSeq)[rowno],ncol(resultSeq))),as.character(A[rowno,]),pos=2, col=\"red\")\n\t}\n\n\tmyprint(file,level=1,debugLevel=topDebugLevel)\n\tmyprint(\"Error=====>>>>>\",Error,level=1,debugLevel=topDebugLevel)\n\tprint(\"Error Matrix:\"); print(Error) ; print(resultSeq)\n\tmaxError <- max(Error)\n\tmeanError <- mean(Error)\n\tmyprint(\"Max Error:\", maxError,level=1,debugLevel=topDebugLevel)\n\tmyprint(\"Mean Error:\", meanError,level=1,debugLevel=topDebugLevel)\n\t\n\tcMaxError <- c(cMaxError,maxError)\n\tcMeanError <- c(cMeanError,meanError)\n\n\t#readkey()\n\n} # For RUN\nmyprint (\"RUNS:\",runBegin,\":\",runEnd,\"with\",constraint,level=2,debugLevel=topDebugLevel)\n\nmyprint(\"Average maxError:\",mean(cMaxError),level=2,debugLevel=topDebugLevel)\nmyprint(\"Average meanError:\", mean(cMeanError),level=2,debugLevel=topDebugLevel)\n\nmyprint(\"Minimum maxError:\",min(cMaxError),level=2,debugLevel=topDebugLevel)\nmyprint(\"Maximum maxError:\",max(cMaxError),level=2,debugLevel=topDebugLevel)\n\ntable(cMaxError)\n#table(a)\n\n#rm(list=ls())\nif (length(nodeseq) > 0 && FALSE)\n\t\t\t{\n\t\t\t\tprevnode1 <- nodeseq[length(nodeseq)-2]\n\t\t\t\tprevnode2 <- nodeseq[length(nodeseq)-3]\n\t\t\t\tfixingWinners <-c()\n\t\t\t\tsenderPackets <- subset(all_stats,(receiver %in% c(node1,node2)) & (sender == closestCornerNode))\n\t\t\t\tccnWinners <- head(senderPackets[order(-senderPackets[,constraint]),],2)[,c(\"receiver\")]\n\t\t\t\tccnWinners <- as.numeric(as.character(ccnWinners))\n\t\t\t\t\n\t\t\t\tsenderPackets <- subset(all_stats,(receiver %in% c(node1,node2)) & (sender == diagonalNode))\n\t\t\t\t#senderPackets <- senderPackets[order(-senderPackets$max_rssi),c(\"receiver\",\"max_rssi\")] # ordered\n\t\t\t\tdnWinners <- head(senderPackets[order(-senderPackets[,constraint]),],2)[,c(\"receiver\")]\n\t\t\t\tdnWinners <- as.numeric(as.character(dnWinners))\n\t\t\t\t\n\t\t\t\tfixingWinners <- c(ccnWinners,dnWinners)\n\t\t\t\tfixingWinnerFreq <- table(fixingWinners)\n\t\t\t\tif (max(winnerFreq) > 1)\n\t\t\t\t{\n\t\t\t\t\tprevNode <- as.numeric(names(which.max(fixingWinnerFreq)))\n\t\t\t\t\tif(nodeseq[length(nodeseq)-2] != prevNode) \n\t\t\t\t\t{\n\t\t\t\t\t\tcat(\"fixPrev:\", nodeseq[length(nodeseq)-2], nodeseq[length(nodeseq)-3],\"\\n\")\n\t\t\t\t\t\t\ttemp <- nodeseq[length(nodeseq)-2]\n\t\t\t\t\t\t\tnodeseq[length(nodeseq)-2] <- nodeseq[length(nodeseq)-3]\n\t\t\t\t\t\t\tnodeseq[length(nodeseq)-3] <- temp\n\t\t\t\t\t\tmyprint(nodeseq,level=1,debugLevel=topDebugLevel)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}",
    "created" : 1416326116525.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "12770271",
    "id" : "72937F6D",
    "lastKnownWriteTime" : 1416326126,
    "last_content_update" : 0,
    "path" : "~/phd/R/2d/2d.R",
    "project_path" : "2d.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}