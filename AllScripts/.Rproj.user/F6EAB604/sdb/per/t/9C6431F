{
    "collab_server" : "",
    "contents" : "library(ggplot2)\n\n\nmw2dbm <- function (milliW) { dBm <- 10*log10((milliW)); return(dBm) }\ndbm2mw <- function (dBm)   { milliW <- 10^(dBm/10); return(milliW) }\n\nrayleigh_rnd <- function(mean=0,sd=1) { return(sqrt(rnorm(1,mean,sd)^2 + rnorm(1,mean,sd)^2)) }\n\n\n## Pr_in_mW\n#  Pt \t: Transmit power \n#  fc \t: Frequency\n#  d \t: Distance in meters\n#  alpha: Path loss Alpha\n#  h \t: Rayleigh random variable\n#  Pn \t: White noise\n##\nPr_in_mW <- function (Pt, fc, d, alpha, h, Pn) {\n  c <- 2.998e8 #speed of light (m/s)\n  lambda <- c/fc;\n  Pr <- (h^2)*Pt*((lambda/(4*pi*d))^alpha) + Pn^2\n  return(Pr)\n}\n\n# Radio parameters\nPt_dbm <- 0 \nfc1 <- 2.405e9\nspacing <- 0.005e9\nchannels <- (11:26)\nch1 <- channels[1]\nch2fc <- function (ch, firstChannel=ch1, firstFreq= fc1, ch_spacing=spacing) {return((ch-firstChannel)*ch_spacing + firstFreq)}\nradioSensitivity <- -97\n# Channel Settings\npathloss_alpha <- 3\nsd_rayleigh <- 10\nmean_rayleigh <- 0\n\nsd_noise_dbm <- -45 \nmean_noise <- 0\n\nsd_noise_mW <- dbm2mw (sd_noise_dbm)\nPt_mW <- dbm2mw (Pt_dbm)\n\nTruth <- matrix(c(0:19), nrow=2, byrow=TRUE)\n\nNx <- 10  # Number of nodes in X-axis\nNy <- 2 # Number of nodes in Y-axis\n\ndx <- 2 # internode distances on x-dimension\ndy <- 3 # internode distances on y-dimension\ndistance <- function (positions, N1, N2) {\n  x1 <- subset(positions, NodeId == N1, select=c(\"X\"))\n  y1 <- subset(positions, NodeId == N1, select=c(\"Y\"))\n  \n  x2 <- subset(positions, NodeId == N2, select=c(\"X\"))\n  y2 <- subset(positions, NodeId == N2, select=c(\"Y\"))\n  \n  return ( sqrt( ((x2 - x1)*dx)^2 + ((y2 - y1)*dy)^2 ) )\n}\n\ntruth.distance <- function (positions, N1, N2) {\n  x1 <- which(positions == N1, arr.ind=TRUE)[,\"row\"]\n  y1 <- which(positions == N1, arr.ind=TRUE)[,\"col\"]\n  \n  x2 <- which(positions == N2, arr.ind=TRUE)[,\"row\"]\n  y2 <- which(positions == N2, arr.ind=TRUE)[,\"col\"]\n  \n  return ( sqrt( ((x2 - x1)*dx)^2 + ((y2 - y1)*dy)^2 ) )\n}\n\n\nnodeCoords <- matrix(data = NA, nrow = 0, ncol = 3, byrow = TRUE, dimnames = list(NULL,c(\"NodeId\",\"X\",\"Y\")))\n\nnodeId <- 0\nfor (nx in 0:(Nx-1)){\n  for (ny in 0:(Ny-1)){\n    nodeCoords <- rbind (nodeCoords, c(nodeId, nx, ny))\n    nodeId <- nodeId + 1\n  }\n}\nnodeId <- nodeId - 1\n\nnodeCoordsDF <- as.data.frame(nodeCoords)\np <- ggplot(nodeCoordsDF, aes(x=X, y=Y))\np <- p + geom_point() + geom_text(aes(label=NodeId),hjust=1, vjust=1)\nprint(p)\n\nALL_CHANNELS <- 11:26\nPACKET_NUMS <- 1:10\ncolnames.list <- c(\"sender\",\"receiver\",\"channel\",\"packetnum\",\"rssi\")\n\nwrite.table(Truth, \"Truth.txt\")\n\nfor (run in 1:100){\n  \n  measurements <- data.frame(sender=integer(0), receiver = integer(0), channel = integer(0), packetnum = integer(0), rssi = integer(0))\n  \n  for (s in Truth) {\n    for (r in Truth){\n      if(r == s)\n        next;\n      dist.s.r <- truth.distance(Truth,s,r)\n      for (ch in ALL_CHANNELS){\n      \n        h <- rayleigh_rnd(mean_rayleigh, sd_rayleigh)\n        \n        for (pn in PACKET_NUMS){\n          Pn <- rnorm(1, mean=0, sd=sd_noise_mW)\n          P <- Pr_in_mW(Pt_mW, ch2fc(ch), dist.s.r, pathloss_alpha, h, Pn)\n          rssi <- round(mw2dbm(P)) - 5\n          if (rssi >= radioSensitivity)\n            measurements <- rbind(measurements,c(s,r,ch,pn,rssi))\n          #print(measurements[nrow(measurements),])\n        }\n      }\n    }\n  }\n  colnames(measurements) <- colnames.list\n  filename <- paste(\"2dSim-\",Nx,\"x\",Ny,\"-\",run,\".txt\",sep=\"\")\n  write.table(measurements, filename, col.names=TRUE, row.names=FALSE)\n}",
    "created" : 1414959248132.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2364949795",
    "id" : "9C6431F",
    "lastKnownWriteTime" : 1415872924,
    "last_content_update" : 0,
    "path" : "~/phd/R/AllScripts/2D-SimulatedNodes.R",
    "project_path" : "2D-SimulatedNodes.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 0,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}