{
    "collab_server" : "",
    "contents" : "# Common functions:\n\nmw2dbm <- function (milliW) { dBm <- 10*log10((milliW)); return(dBm) }\ndbm2mw <- function (dBm) \t{ milliW <- 10^(dBm/10); return(milliW) }\n\nrayleigh_rnd <- function(mean=0,sd=1) { return(sqrt(rnorm(1,mean,sd)^2 + rnorm(1,mean,sd)^2)) }\n\n\n## Pr_in_mW\n#  Pt \t: Transmit power \n#  fc \t: Frequency\n#  d \t: Distance in meters\n#  alpha: Path loss Alpha\n#  h \t: Rayleigh random variable\n#  Pn \t: White noise\n##\nPr_in_mW <- function (Pt, fc, d, alpha, h, Pn) {\n\tc <- 2.998e8 #speed of light (m/s)\n\tlambda <- c/fc;\n\tPr <- (h^2)*Pt*((lambda/(4*pi*d))^alpha) + Pn^2\n\treturn(Pr)\n}\n\n## Pr_in_mW_obs : With uni-distance obstacles\n#  Pt \t: Transmit power \n#  fc \t: Frequency\n#  d \t: Distance in meters\n#  alpha: Path loss Alpha\n#  h \t: Rayleigh random variable\n#  Pn \t: White noise\n#  Wd\t: inter-wall Distance\n#  od \t: distance between obstacles\n##\nPr_in_mW_obs <- function (Pt, fc, d, alpha, h, Pn, od) {\n\tc <- 2.998e8 #speed of light (m/s)\n\tlambda <- c/fc;\n\tPr <- 0.9^(ceiling(d/od)-1)^2 * (h^2)*Pt*((lambda/(4*pi*d))^alpha) + Pn^2\n\treturn(Pr)\n}\n\n## Unused functions\nrss_path_loss <- function(d, pt=0, fc=2.405e9, n=2, d0=1) {\n  lamda <- 2.998e8/fc;\n  pl <- -10*n*log10(lamda/(4*pi*d0)) + 10*n*log10(d/d0);\n  pt-pl\n}\n\nd_path_loss <- function(pr, pt=0, fc=2.405e9, n=3, d0=1) {\n  lamda <- 2.998e8/fc;\n  pl0 <- -10*n*log10(lamda/(4*pi*d0));\n  d0*10^((pt-pr-pl0)/(10*n))\n}\n\nd_from_rss <- function(pr, pt=0, fc=2.405e9, n=3, d0=1) {\n  lamda <- 2.998e8/fc;\n  pl = pt-pr\n  d <- d0 * 10^((pl + 10*n*log10(lamda/(4*pi*d0))) / (10*n));\n  return(d)\n}\n\ncolNameFix <- function (columnCount) \n{\n  if (columnCount == 7)\n    return (c(\"receiver\", \"sender\", \"channel\", \"rssi\", \"power\", \"time\", \"packetnum\"))\n  else if (columnCount == 8)\n    return (c(\"receiver\", \"sender\", \"channel\", \"rssi\", \"power\", \"time\", \"packetnum\", \"lqi\"))\n  else cat(\"Don't know what to do with \", columnCount, \"column file\\n\");\n}\n\ncolClassesFix <- function (columnCount) \n{\n  if (columnCount == 7)\n    return (c(rep(\"numeric\",3), \"numeric\", \"factor\", \"character\", \"numeric\"))\n  else if (columnCount == 8)\n    return (c(rep(\"factor\",3), \"numeric\", \"factor\", \"character\", \"numeric\", \"numeric\"))\n  else cat(\"Don't know what to do with \", columnCount, \"column file\\n\");\n}\n\nreadExpFileRange <- function (sourceFolder, fileSet, prefix=\"seq16ch_\") \n{\n  # Test input\n  tmp <- read.table(paste(sourceFolder,prefix,fileSet[1],\".txt\",sep=\"\"),header=FALSE, nrows=2)\n  nCols <- ncol(tmp)\n  if (!(nCols %in% c(7,8)))\n  {\n    cat(\"Don't know what to do with \", nCols, \"column file\\n\");\n    return();\n  }\n  \n  packets <- data.frame()\n  for (i in fileSet)\n  {\n    TRACE_FILE<- paste(sourceFolder,prefix,i,\".txt\",sep=\"\")\n    expPackets <- read.table(TRACE_FILE, sep=\"\\t\", na.strings=\"\", col.names=colNameFix(nCols), colClasses=colClassesFix(nCols), header=FALSE, stringsAsFactors=FALSE)\n    expPackets$run <- i\n    packets<-rbind(packets,expPackets)\n  }\n  return(packets)\n}\n\n#Compute 1D Position Error:\nfindError <- function(computedSequence, realSequence)\n{\n  fwError <- c()\n  for (p in 1:length(realSequence))\n  {\n    location.in.computedSequence <- which(computedSequence == realSequence[p], arr.ind=FALSE)\n    difference.in.location <- abs(location.in.computedSequence - p)\n    fwError <- c(fwError, difference.in.location)\n  }\n  revError <- c()\n  for (p in 1:length(realSequence))\n  {\n    location.in.computedSequence <- which(rev(computedSequence) == realSequence[p], arr.ind=FALSE)\n    difference.in.location <- abs(location.in.computedSequence - p)\n    revError <- c(revError, difference.in.location)\n  }\n  \n  if (sum(fwError) < sum(revError))\n    Error <- fwError\n  else \n    Error <- revError\n  return(Error)\n}\n",
    "created" : 1404861904774.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1171925705",
    "id" : "40ABE8D7",
    "lastKnownWriteTime" : 1416493085,
    "last_content_update" : 0,
    "path" : "~/phd/R/commonFunctions.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 0,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}