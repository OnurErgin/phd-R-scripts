{
    "collab_server" : "",
    "contents" : "library(ggplot2)\n\nremoveSpaces <- function(...) gsub(\" \",\"\", ... , fixed=TRUE)\n\njoinReports <- function(files) {\n  verifyDF <- data.frame()\n  for (f in files)\n    verifyDF <- rbind(verifyDF, read.table(f, header=TRUE, stringsAsFactors=FALSE))\n  \n  expNoOrder <- with(verifyDF,order(expNo))\n  verifyDF <- verifyDF[expNoOrder,]\n  row.names(verifyDF) <- 1:nrow(verifyDF)\n  return(verifyDF)\n}\n\nreadExpFileRange <- function (sourceFolder, fileSet) \n{\n  packets <- data.frame()\n  for (i in fileSet)\n  {\n    TRACE_FILE<-paste(sourceDir,\"seq16ch_\",i,\".txt\",sep=\"\")\n    expPackets <- read.table(TRACE_FILE, sep=\"\\t\", na.strings=\"\", col.names=c(\"receiver\", \"sender\", \"channel\", \"rssi\", \"power\", \"time\", \"packetnum\"), colClasses=c(rep(\"numeric\",3), \"numeric\", \"factor\", \"character\", \"numeric\"), header=FALSE, stringsAsFactors=FALSE)\n    expPackets$run <- i\n    packets<-rbind(packets,expPackets)\n  }\n  return(packets)\n}\n\nexpID <- 3\nif (expID == 1) \n{\n  files <- Sys.glob(\"../probabilisticSeq/verify/verify4thFlSouthWindow2ndRowNormal/*verify*txt\")\n  expName <- \"4th-Fl-South-Window2ndRow-Normal\"\n  sourceDir <- \"/Users/ergin/phd/R/measurements/4thFloor/chOuterLoop4thFl-2ndRow10Nodes/\"\n} else \n  if (expID == 2) \n  {\n    files <- Sys.glob(\"../probabilisticSeq/verify/verify4thFlSouthWindow2ndRowReverse/verifyVerdicts-*.txt\")\n    expName <- \"4th-Fl-South-Window2ndRow-Reverse\"\n    sourceDir <- \"/Users/ergin/phd/R/measurements/4thFloor/chOuterLoop4thFl-2ndRow10Nodes/\"\n  } else \n    if (expID == 3) \n    {\n      files <- Sys.glob(\"../probabilisticSeq/verify/verify4thFlSouth1stRowAisleReverse/4thFloor1stRow-verify*.txt\")\n      expName <- \"4th-Fl-South-Window1stRow-Reverse\"\n      sourceDir <- \"/Users/ergin/phd/R/measurements/4thFloor/FourthFloor_chLoop2000withPktID/\"\n    } else if (expID == 4) \n    {\n      files <- Sys.glob(\"../probabilisticSeq/verify/4thFloorNorthSide-3interferers-Reverse-verify1-300.txt\")\n      expName <- \"4th-Fl-North-Window1stRow-Reverse\"\n      sourceDir <- \"/Users/ergin/phd/R/measurements/interferenceMeasurements/2D-NorthSide/withinterference/3interferers/\"\n    }\n\nanalyse <- joinReports(files)\n\nplainResults <- subset(analyse, Rank == 1 & verifyRank == 1, select=-c(5,6,7,8,9,11)) # just single result\nplainSuccess <- subset(plainResults, isCorrect == TRUE)\nplainFail <- subset(plainResults, isCorrect == FALSE)\nmost.common.mistake.str <- names(table(plainFail$computedSeq)[order(table(plainFail$computedSeq),decreasing=TRUE)][1])\nmost.common.mistake <- as.numeric(strsplit(most.common.mistake.str,\",\")[[1]])\nTruth <- as.numeric(strsplit(plainSuccess[1,\"computedSeq\"],\",\")[[1]])\n\n\n\nrng <- 40\nsuccess.range <- plainSuccess[1:rng,\"expNo\"]\nmost.common.fails <- subset(plainFail, computedSeq == most.common.mistake.str)\nfail.range <- most.common.fails[1:rng,\"expNo\"] # consecutive olanlardan bul.\n\nexpRange <- fail.range\n#expRange <- 620:660 ; expType <- \"Successful\"\nexpRange <- 579:619 ; \nexpType <- \"Failed\"\n\nexpRange <- 15; expType <- \"Single Exp\"\nsenderNode <- 16\n\n\nreadExperimentsFromFile <- TRUE\nif (readExperimentsFromFile)\n  packets <- readExpFileRange(sourceDir,expRange)\n  \nsendersPackets <- subset(packets,sender==senderNode, select=c(\"receiver\",\"rssi\", \"run\",\"channel\"))\n#sendersPackets <- rbind(sendersPackets,c(senderNode,0,expRange[1]))\n#packets <- rbind(packets,c(senderNode,max(packets$rssi),expRange[1]))\n\n\n# Plot measurement values\nif (TRUE) {\n  mainTitle <- paste(\"Values from\", expType, \"Measurements \\n Sender node: \", senderNode)\n  pdfFileName <- paste(removeSpaces(mainTitle),\".pdf\",sep=\"\")\n  pngFileName <- paste(removeSpaces(mainTitle),\".png\",sep=\"\")\n  #mainTitle <- paste(mainTitle,\"\\nNorth Side\")\n  \n  #Here comes plotting measurements\n  \n  #levels(packets$receiver) <- as.character(Truth)\n  sendersPackets$receiver <- factor(sendersPackets$receiver, levels=rev(as.character(Truth)))\n  if (FALSE)\n  {\n    sortedDF <- as.data.frame(matrix(data = NA, nrow = 0, ncol = ncol(sendersPackets), byrow = TRUE, dimnames = list(NULL,colnames(sendersPackets))))\n    for (i in Truth)\n    {\n      subpackets = subset(sendersPackets, receiver == i)\n      sortedDF <- rbind(sortedDF,subpackets)\n    }\n    sendersPackets <- sortedDF\n  }\n  \n  #plot(packets$receiver,packets$rssi,pch=20, ylab=\"RSSI\", xlab=\"Node Id (not distance sorted)\"); title(mainTitle)\n  p <- ggplot(sendersPackets, aes(x=receiver, y=rssi, fill=receiver))\n  p <- p + stat_boxplot(geom='errorbar') # for horizontal lines on boxplot borders\n  p <- p + geom_boxplot() + scale_y_continuous(breaks=-105:-42, limits=c(-105,-42), expand=c(0,0))# ylim(-105,-42)  \n  #p <- p + geom_point() + stat_summary(fun.y=mean, geom=\"line\", aes(group=1))  + stat_summary(fun.y=mean, geom=\"point\")\n  p <- p + scale_x_discrete(drop=FALSE)\n  p <- p + ggtitle(paste(mainTitle,\"\\nRange\",expRange[1],\"-\",expRange[length(expRange)]))\n  p <- p + geom_vline(xintercept=1, color=\"darkblue\", linetype = \"longdash\")\n  print(p)\n  #ggsave (paste(expType,\"40exps-\",senderNode,\".pdf\",sep=\"\"));\n \n  if (TRUE) #This is for the paper\n  {\n    mainTitle <- \"Values from measurements\"\n    pdfFileName <- paste(removeSpaces(mainTitle),\".pdf\",sep=\"\")\n    pdf(pdfFileName)\n     par(mar=c(5,5,4,2))\n    plot(sendersPackets$receiver,sendersPackets$rssi,pch=20, ylab=\"RSS(dbm)\", xlab=\"Node Id (distance sorted)\", ylim=c(-105,-42), cex.lab=2, cex.axis=1.3); title(mainTitle, cex.main=2)\n    dev.off()\n  }\n  theme_update (\n    panel.grid.major = element_blank(),\n    panel.grid.minor = element_blank(),\n    #panel.border = theme_blank(),\n    panel.background = element_blank(),\n    axis.title = element_text(size=30),\n    axis.text = element_text(size=16),\n    plot.title = element_text(size=30, face=\"bold\", vjust=3)\n    #plot.margin = unit(c(1,1,1,1), \"cm\")\n  )\n  \n  p <- ggplot(sendersPackets, aes(x=receiver, y=rssi, group=receiver))\n  p <- p + stat_boxplot(geom='errorbar') + geom_boxplot()\n  p <- p + scale_x_discrete(\"Node Id (distance sorted)\", drop=FALSE) #+\n   p <- p+scale_y_continuous(\"RSS[dBm]\",expand = c(0,0.5), limits = c(-105,-40), breaks=floor(seq(-110,-40,by=10)))\n  #p <- p + geom_hline(yintercept=radioSensitivity, color=\"orange\") + annotate(\"text\",label=\"Sensitivity Threshold\",y=radioSensitivity+2, x=3, color=\"orange\")\n  p <- p + ggtitle(\"Values from measurements\")\n  print(p)\n  ggsave(pdfFileName, width=7, height=7)\n  # Convert pdf to png\n  #system(paste(\"sips -s format png\",pdfFileName,\"--out\",pngFileName))\n}",
    "created" : 1402664924171.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3968781190",
    "id" : "BC9BB0C6",
    "lastKnownWriteTime" : 1412603828,
    "last_content_update" : 0,
    "path" : "~/phd/R/AllScripts/RSSboxplots.R",
    "project_path" : "RSSboxplots.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 0,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}