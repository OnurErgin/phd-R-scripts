p <- p + labs(x="Distance [m]", y="RSS [dBm]") + theme(axis.title=element_text(size=20), text=element_text(size=18)) #+ theme(legend.position="none")
p <- p+ggtitle(paste("sd_rayleigh=", sd_rayleigh, " sd_noise_mW=", sd_noise_dbm, sep=" "))
print(p)
# ggsave(paste("SimulationVsIdeal_sdRayleigh",sd_rayleigh,"_sdNoise",sd_noise_dbm,".pdf",sep=""))
}
RSSvsDistance (d, 1/sqrt(2),0,-4599999999,3)
RSSvsDistance (d, 0, 15,-45, 3)
RSSvsDistance (d, 0, 15,-45, 3)
RSSvsDistance (d, 1/sqrt(2),0,-4599999999,3)
d
RSSvsDistance <- function (d = seq(1,10,by=0.1), mean_rayleigh=0, sd_rayleigh=15, sd_noise_dbm = -45, pathloss_alpha = 3) {
sd_noise_mW <- dbm2mw (sd_noise_dbm)
awgn_hPn <- c()
awgn_simple <- c()
for (i in d)
{
awgn_simple <- c(awgn_simple,mw2dbm(Pr_in_mW( Pt=dbm2mw(0), fc=2.405e9, d=i,alpha=pathloss_alpha, h=1,Pn=0))) + 20
}
for (i in d){
Pn <- rnorm(1, mean=0, sd=sd_noise_mW)
h <- rayleigh_rnd(mean_rayleigh, sd_rayleigh)
P <- Pr_in_mW(Pt_mW, ch2fc(ch), i, pathloss_alpha, h, Pn)
rssi <- round(mw2dbm(P)) #- 5
awgn_hPn <- c(awgn_hPn,rssi)
}
pr <-data.frame(distance=d, awgn_simple=awgn_simple, awgn_hPn=awgn_hPn)
meltedPr <- melt.data.frame(pr,id="distance",measure=c("awgn_simple","awgn_hPn"))
p <- ggplot(meltedPr, aes(x=distance, y=value, color=variable))
p <- p + geom_line() + geom_point()
p <- p + scale_color_manual(name="Type of attenuation",
breaks=c("awgn_simple",  "awgn_hPn"),
labels=c("Ideal pathloss", "Simulated pathloss"),
values=c("black","blue"))
p <- p + labs(x="Distance [m]", y="RSS [dBm]") + theme(axis.title=element_text(size=20), text=element_text(size=18)) #+ theme(legend.position="none")
p <- p+ggtitle(paste("sd_rayleigh=", sd_rayleigh, " sd_noise_mW=", sd_noise_dbm, sep=" "))
print(p)
# ggsave(paste("SimulationVsIdeal_sdRayleigh",sd_rayleigh,"_sdNoise",sd_noise_dbm,".pdf",sep=""))
}
RSSvsDistance (d, 0, 15,-45, 3)
awgn_simple
awgn_simple + 20
RSSvsDistance <- function (d = seq(1,10,by=0.1), mean_rayleigh=0, sd_rayleigh=15, sd_noise_dbm = -45, pathloss_alpha = 3) {
sd_noise_mW <- dbm2mw (sd_noise_dbm)
awgn_hPn <- c()
awgn_simple <- c()
for (i in d)
{
awgn_simple <- c(awgn_simple,mw2dbm(Pr_in_mW( Pt=dbm2mw(0), fc=2.405e9, d=i,alpha=pathloss_alpha, h=1,Pn=0)))
}
awgn_simple <- awgn_simple + 20
for (i in d){
Pn <- rnorm(1, mean=0, sd=sd_noise_mW)
h <- rayleigh_rnd(mean_rayleigh, sd_rayleigh)
P <- Pr_in_mW(Pt_mW, ch2fc(ch), i, pathloss_alpha, h, Pn)
rssi <- round(mw2dbm(P)) #- 5
awgn_hPn <- c(awgn_hPn,rssi)
}
pr <-data.frame(distance=d, awgn_simple=awgn_simple, awgn_hPn=awgn_hPn)
meltedPr <- melt.data.frame(pr,id="distance",measure=c("awgn_simple","awgn_hPn"))
p <- ggplot(meltedPr, aes(x=distance, y=value, color=variable))
p <- p + geom_line() + geom_point()
p <- p + scale_color_manual(name="Type of attenuation",
breaks=c("awgn_simple",  "awgn_hPn"),
labels=c("Ideal pathloss", "Simulated pathloss"),
values=c("black","blue"))
p <- p + labs(x="Distance [m]", y="RSS [dBm]") + theme(axis.title=element_text(size=20), text=element_text(size=18)) #+ theme(legend.position="none")
p <- p+ggtitle(paste("sd_rayleigh=", sd_rayleigh, " sd_noise_mW=", sd_noise_dbm, sep=" "))
print(p)
# ggsave(paste("SimulationVsIdeal_sdRayleigh",sd_rayleigh,"_sdNoise",sd_noise_dbm,".pdf",sep=""))
}
RSSvsDistance (d, 0, 15,-45, 3)
RSSvsDistance (d, 0, 15,-45, 3)
RSSvsDistance (d, 1/sqrt(2),0,-4599999999,3)
RSSvsDistance <- function (d = seq(1,10,by=0.1), mean_rayleigh=0, sd_rayleigh=15, sd_noise_dbm = -45, pathloss_alpha = 3, default_channel_gain = 0) {
sd_noise_mW <- dbm2mw (sd_noise_dbm)
awgn_hPn <- c()
awgn_simple <- c()
for (i in d)
{
awgn_simple <- c(awgn_simple,mw2dbm(Pr_in_mW( Pt=dbm2mw(0), fc=2.405e9, d=i,alpha=pathloss_alpha, h=1,Pn=0)))
}
awgn_simple <- awgn_simple + default_channel_gain
for (i in d){
Pn <- rnorm(1, mean=0, sd=sd_noise_mW)
h <- rayleigh_rnd(mean_rayleigh, sd_rayleigh)
P <- Pr_in_mW(Pt_mW, ch2fc(ch), i, pathloss_alpha, h, Pn)
rssi <- round(mw2dbm(P)) #- 5
awgn_hPn <- c(awgn_hPn,rssi)
}
pr <-data.frame(distance=d, awgn_simple=awgn_simple, awgn_hPn=awgn_hPn)
meltedPr <- melt.data.frame(pr,id="distance",measure=c("awgn_simple","awgn_hPn"))
p <- ggplot(meltedPr, aes(x=distance, y=value, color=variable))
p <- p + geom_line() + geom_point()
p <- p + scale_color_manual(name="Type of attenuation",
breaks=c("awgn_simple",  "awgn_hPn"),
labels=c("Ideal pathloss", "Simulated pathloss"),
values=c("black","blue"))
p <- p + labs(x="Distance [m]", y="RSS [dBm]") + theme(axis.title=element_text(size=20), text=element_text(size=18)) #+ theme(legend.position="none")
p <- p+ggtitle(paste("sd_rayleigh=", sd_rayleigh, " sd_noise_mW=", sd_noise_dbm, sep=" "))
print(p)
# ggsave(paste("SimulationVsIdeal_sdRayleigh",sd_rayleigh,"_sdNoise",sd_noise_dbm,".pdf",sep=""))
}
RSSvsDistance (d, 0, 15,-45, 3)
RSSvsDistance (d, 0, 15,-45, 3, 25)
RSSvsDistance (d, 0, 15,-45, 3, 22)
RSSvsDistance (d, 0, 15,-45, 3, 22)
RSSvsDistance (d, 0, 15,-45, 3, 22)
RSSvsDistance (d, 0, 15,-45, 3, 23)
RSSvsDistance (d, 0, 15,-45, 3, 23)
RSSvsDistance (d, 0, 15,-45, 3, 23)
RSSvsDistance (d, 1/sqrt(2),0,-4599999999,3)
RSSvsDistance (d, 0, 15,-45, 3, 23)
RSSvsDistance <- function (d = seq(1,10,by=0.1), mean_rayleigh=0, sd_rayleigh=15, sd_noise_dbm = -45, pathloss_alpha = 3, default_channel_gain = 23) {
sd_noise_mW <- dbm2mw (sd_noise_dbm)
awgn_hPn <- c()
awgn_simple <- c()
for (i in d)
{
awgn_simple <- c(awgn_simple,mw2dbm(Pr_in_mW( Pt=dbm2mw(0), fc=2.405e9, d=i,alpha=pathloss_alpha, h=1,Pn=0)))
}
awgn_simple <- awgn_simple + default_channel_gain
for (i in d){
Pn <- rnorm(1, mean=0, sd=sd_noise_mW)
h <- rayleigh_rnd(mean_rayleigh, sd_rayleigh)
P <- Pr_in_mW(Pt_mW, ch2fc(ch), i, pathloss_alpha, h, Pn)
rssi <- round(mw2dbm(P)) #- 5
awgn_hPn <- c(awgn_hPn,rssi)
}
pr <-data.frame(distance=d, awgn_simple=awgn_simple, awgn_hPn=awgn_hPn)
meltedPr <- melt.data.frame(pr,id="distance",measure=c("awgn_simple","awgn_hPn"))
p <- ggplot(meltedPr, aes(x=distance, y=value, color=variable))
p <- p + geom_line() + geom_point()
p <- p + scale_color_manual(name="Type of attenuation",
breaks=c("awgn_simple",  "awgn_hPn"),
labels=c("Ideal pathloss", "Simulated pathloss"),
values=c("black","blue"))
p <- p + labs(x="Distance [m]", y="RSS [dBm]") + theme(axis.title=element_text(size=20), text=element_text(size=18)) #+ theme(legend.position="none")
p <- p+ggtitle(paste("sd_rayleigh=", sd_rayleigh, " sd_noise_mW=", sd_noise_dbm, sep=" "))
print(p)
# ggsave(paste("SimulationVsIdeal_sdRayleigh",sd_rayleigh,"_sdNoise",sd_noise_dbm,".pdf",sep=""))
}
RSSvsDistance <- function (d = seq(1,10,by=0.1), mean_rayleigh=0, sd_rayleigh=15, sd_noise_dbm = -45, pathloss_alpha = 3, default_channel_gain = 23) {
sd_noise_mW <- dbm2mw (sd_noise_dbm)
awgn_hPn <- c()
awgn_simple <- c()
for (i in d)
{
awgn_simple <- c(awgn_simple,mw2dbm(Pr_in_mW( Pt=dbm2mw(0), fc=2.405e9, d=i,alpha=pathloss_alpha, h=1,Pn=0)))
}
awgn_simple <- awgn_simple + default_channel_gain # add default channel gain for the ideal curve..
for (i in d){
Pn <- rnorm(1, mean=0, sd=sd_noise_mW)
h <- rayleigh_rnd(mean_rayleigh, sd_rayleigh)
P <- Pr_in_mW(Pt_mW, ch2fc(ch), i, pathloss_alpha, h, Pn)
rssi <- round(mw2dbm(P)) #- 5
awgn_hPn <- c(awgn_hPn,rssi)
}
pr <-data.frame(distance=d, awgn_simple=awgn_simple, awgn_hPn=awgn_hPn)
meltedPr <- melt.data.frame(pr,id="distance",measure=c("awgn_simple","awgn_hPn"))
p <- ggplot(meltedPr, aes(x=distance, y=value, color=variable))
p <- p + geom_line() + geom_point()
p <- p + scale_color_manual(name="Type of attenuation",
breaks=c("awgn_simple",  "awgn_hPn"),
labels=c("Ideal pathloss", "Simulated pathloss"),
values=c("black","blue"))
p <- p + labs(x="Distance [m]", y="RSS [dBm]") + theme(axis.title=element_text(size=20), text=element_text(size=18)) #+ theme(legend.position="none")
p <- p+ggtitle(paste("sd_rayleigh=", sd_rayleigh, " sd_noise_mW=", sd_noise_dbm, sep=" "))
print(p)
# ggsave(paste("SimulationVsIdeal_sdRayleigh",sd_rayleigh,"_sdNoise",sd_noise_dbm,".pdf",sep=""))
}
RSSvsDistance (d, 0, 15,-45, 3, 23)
RSSvsDistance (d, 1/sqrt(2),0,-4599999999,3)
RSSvsDistance (d, 0, 15,-45, 3, 23)
RSSvsDistance (d, 0, 15,-45, 3, 23)
RSSvsDistance <- function (d = seq(1,10,by=0.1), mean_rayleigh=0, sd_rayleigh=15, sd_noise_dbm = -45, pathloss_alpha = 3, default_channel_gain = 23) {
sd_noise_mW <- dbm2mw (sd_noise_dbm)
awgn_hPn <- c()
awgn_simple <- c()
for (i in d)
{
awgn_simple <- c(awgn_simple,mw2dbm(Pr_in_mW( Pt=dbm2mw(0), fc=2.405e9, d=i,alpha=pathloss_alpha, h=1,Pn=0)))
}
awgn_simple <- awgn_simple + default_channel_gain # add default channel gain for the ideal curve..
for (i in d){
Pn <- rnorm(1, mean=0, sd=sd_noise_mW)
h <- rayleigh_rnd(mean_rayleigh, sd_rayleigh)
P <- Pr_in_mW(Pt_mW, ch2fc(ch), i, pathloss_alpha, h, Pn)
rssi <- round(mw2dbm(P)) #- 5
awgn_hPn <- c(awgn_hPn,rssi)
}
pr <-data.frame(distance=d, awgn_simple=awgn_simple, awgn_hPn=awgn_hPn)
meltedPr <- melt.data.frame(pr,id="distance",measure=c("awgn_simple","awgn_hPn"))
p <- ggplot(meltedPr, aes(x=distance, y=value, color=variable))
p <- p + geom_line() + geom_point()
p <- p + scale_color_manual(name="Type of attenuation",
breaks=c("awgn_simple",  "awgn_hPn"),
labels=c("Ideal pathloss", "Simulated pathloss"),
values=c("black","blue"))
p <- p + labs(x="Distance [m]", y="RSS [dBm]") + theme(axis.title=element_text(size=20), text=element_text(size=18)) #+ theme(legend.position="none")
p <- p+ggtitle(paste("sd_rayleigh=", sd_rayleigh, " sd_noise_mW=", sd_noise_dbm, "dbm", sep=" "))
print(p)
# ggsave(paste("SimulationVsIdeal_sdRayleigh",sd_rayleigh,"_sdNoise",sd_noise_dbm,".pdf",sep=""))
}
RSSvsDistance (d, 0, 15,-45, 3, 23)
RSSvsDistance <- function (d = seq(1,10,by=0.1), mean_rayleigh=0, sd_rayleigh=15, sd_noise_dbm = -45, pathloss_alpha = 3, default_channel_gain = 23, saveToFile = FALSE) {
sd_noise_mW <- dbm2mw (sd_noise_dbm)
awgn_hPn <- c()
awgn_simple <- c()
for (i in d)
{
awgn_simple <- c(awgn_simple,mw2dbm(Pr_in_mW( Pt=dbm2mw(0), fc=2.405e9, d=i,alpha=pathloss_alpha, h=1,Pn=0)))
}
awgn_simple <- awgn_simple + default_channel_gain # add default channel gain for the ideal curve..
for (i in d){
Pn <- rnorm(1, mean=0, sd=sd_noise_mW)
h <- rayleigh_rnd(mean_rayleigh, sd_rayleigh)
P <- Pr_in_mW(Pt_mW, ch2fc(ch), i, pathloss_alpha, h, Pn)
rssi <- round(mw2dbm(P)) #- 5
awgn_hPn <- c(awgn_hPn,rssi)
}
pr <-data.frame(distance=d, awgn_simple=awgn_simple, awgn_hPn=awgn_hPn)
meltedPr <- melt.data.frame(pr,id="distance",measure=c("awgn_simple","awgn_hPn"))
p <- ggplot(meltedPr, aes(x=distance, y=value, color=variable))
p <- p + geom_line() + geom_point()
p <- p + scale_color_manual(name="Type of attenuation",
breaks=c("awgn_simple",  "awgn_hPn"),
labels=c("Ideal pathloss", "Simulated pathloss"),
values=c("black","blue"))
p <- p + labs(x="Distance [m]", y="RSS [dBm]") + theme(axis.title=element_text(size=20), text=element_text(size=18)) #+ theme(legend.position="none")
p <- p+ggtitle(paste("sd_rayleigh=", sd_rayleigh, " sd_noise_mW=", sd_noise_dbm, "dbm", sep=" "))
print(p)
if(saveToFile)
ggsave(paste("SimulationVsIdeal_sdRayleigh",sd_rayleigh,"_sdNoise",sd_noise_dbm,".pdf",sep=""))
}
RSSvsDistance (d, 0, 15,-45, 3, 23)
RSSvsDistance (d, 0, 15,-45, 3, 23, TRUE)
getwd()
RSSvsDistance (d, 1/sqrt(2),0,-4599999999,3)
library(plyr)
library(ggplot2)
library(grid)
library(reshape)
source("commonFunctions.R")
d <- seq(1,10,by=0.1)
RSSvsDistance <- function (d = seq(1,10,by=0.1), mean_rayleigh=0, sd_rayleigh=15, sd_noise_dbm = -45, pathloss_alpha = 3, default_channel_gain = 23, saveToFile = FALSE) {
sd_noise_mW <- dbm2mw (sd_noise_dbm)
awgn_hPn <- c()
awgn_simple <- c()
for (i in d)
{
awgn_simple <- c(awgn_simple,mw2dbm(Pr_in_mW( Pt=dbm2mw(0), fc=2.405e9, d=i,alpha=pathloss_alpha, h=1,Pn=0)))
}
awgn_simple <- awgn_simple + default_channel_gain # add default channel gain for the ideal curve..
for (i in d){
Pn <- rnorm(1, mean=0, sd=sd_noise_mW)
h <- rayleigh_rnd(mean_rayleigh, sd_rayleigh)
P <- Pr_in_mW(Pt_mW, ch2fc(ch), i, pathloss_alpha, h, Pn)
rssi <- round(mw2dbm(P)) #- 5
awgn_hPn <- c(awgn_hPn,rssi)
}
pr <-data.frame(distance=d, awgn_simple=awgn_simple, awgn_hPn=awgn_hPn)
meltedPr <- melt.data.frame(pr,id="distance",measure=c("awgn_simple","awgn_hPn"))
p <- ggplot(meltedPr, aes(x=distance, y=value, color=variable))
p <- p + geom_line() + geom_point()
p <- p + scale_color_manual(name="Type of attenuation",
breaks=c("awgn_simple",  "awgn_hPn"),
labels=c("Ideal pathloss", "Simulated pathloss"),
values=c("black","blue"))
p <- p + labs(x="Distance [m]", y="RSS [dBm]") + theme(axis.title=element_text(size=20), text=element_text(size=18)) #+ theme(legend.position="none")
p <- p+ggtitle(paste("sd_rayleigh=", sd_rayleigh, " sd_noise_mW=", sd_noise_dbm, "dbm", sep=" "))
print(p)
if(saveToFile)
ggsave(paste("SimulationVsIdeal_sdRayleigh",sd_rayleigh,"_sdNoise",sd_noise_dbm,".pdf",sep=""))
}
RSSvsDistance (d, 1/sqrt(2),0,-4599999999,3)
RSSvsDistance (d, 0, 15,-45, 3, 23)
RSSvsDistance (d, 1/sqrt(2),0,-4599999999,3)
RSSvsDistance (d,mean_rayleigh= 1/sqrt(2), sd_rayleigh=0, sd_noise_dbm = -4599999999,pathloss_alpha=3, default_channel_gain=0)
RSSvsDistance (d, 0, 15,-45, 3, 23)
RSSvsDistance (d, 0, 15,-45, 3, 0)
RSSvsDistance (d, 0, 15,-45, 3, 23)
RSSvsDistance (d,mean_rayleigh= 1/sqrt(2), sd_rayleigh=0, sd_noise_dbm = -4599999999,pathloss_alpha=3, default_channel_gain=0)
RSSvsDistance (d,mean_rayleigh= 1/sqrt(2), sd_rayleigh=0, sd_noise_dbm = -4599999999,pathloss_alpha=3, default_channel_gain=23)
RSSvsDistance (d,mean_rayleigh= 1/sqrt(2), sd_rayleigh=0, sd_noise_dbm = -4599999999,pathloss_alpha=3, default_channel_gain=0)
RSSvsDistance (d, 0, 15,-45, 3, default_channel_gain=23)
RSSvsDistance (d,mean_rayleigh= 1/sqrt(2), sd_rayleigh=0, sd_noise_dbm = -4599999999,pathloss_alpha=3, default_channel_gain=0)
RSSvsDistance (d, 0, 15,-45, 3, default_channel_gain=23)
d <- seq(1,10,by=0.1)
RSSvsDistance <- function (d = seq(1,10,by=0.1), mean_rayleigh=0, sd_rayleigh=15, sd_noise_dbm = -45, pathloss_alpha = 3, constant_channel_gain = 23, saveToFile = FALSE) {
sd_noise_mW <- dbm2mw (sd_noise_dbm)
awgn_hPn <- c()
awgn_simple <- c()
for (i in d)
{
awgn_simple <- c(awgn_simple,mw2dbm(Pr_in_mW( Pt=dbm2mw(0), fc=2.405e9, d=i,alpha=pathloss_alpha, h=1,Pn=0)))
}
awgn_simple <- awgn_simple + constant_channel_gain # add default channel gain for the ideal curve..
for (i in d){
Pn <- rnorm(1, mean=0, sd=sd_noise_mW)
h <- rayleigh_rnd(mean_rayleigh, sd_rayleigh)
P <- Pr_in_mW(Pt_mW, ch2fc(ch), i, pathloss_alpha, h, Pn)
rssi <- round(mw2dbm(P)) #- 5
awgn_hPn <- c(awgn_hPn,rssi)
}
pr <-data.frame(distance=d, awgn_simple=awgn_simple, awgn_hPn=awgn_hPn)
meltedPr <- melt.data.frame(pr,id="distance",measure=c("awgn_simple","awgn_hPn"))
p <- ggplot(meltedPr, aes(x=distance, y=value, color=variable))
p <- p + geom_line() + geom_point()
p <- p + scale_color_manual(name="Type of attenuation",
breaks=c("awgn_simple",  "awgn_hPn"),
labels=c("Ideal pathloss", "Simulated pathloss"),
values=c("black","blue"))
p <- p + labs(x="Distance [m]", y="RSS [dBm]") + theme(axis.title=element_text(size=20), text=element_text(size=18)) #+ theme(legend.position="none")
p <- p+ggtitle(paste("sd_rayleigh=", sd_rayleigh, " sd_noise_mW=", sd_noise_dbm, "dbm", sep=" "))
print(p)
if(saveToFile)
ggsave(paste("SimulationVsIdeal_sdRayleigh",sd_rayleigh,"_sdNoise",sd_noise_dbm,".pdf",sep=""))
}
d <- seq(1,10,by=0.1)
RSSvsDistance (d, 0, 15,-45, 3, constant_channel_gain=23)
RSSvsDistance (d,mean_rayleigh= 1/sqrt(2), sd_rayleigh=0, sd_noise_dbm = -4599999999,pathloss_alpha=3, constant_channel_gain=0)
d <- seq(1,5,by=0.1)
RSSvsDistance (d, 0, 15,-45, 3, constant_channel_gain=23)
RSSvsDistance (d,mean_rayleigh= 1/sqrt(2), sd_rayleigh=0, sd_noise_dbm = -4599999999,pathloss_alpha=3, constant_channel_gain=0)
RSSvsDistance (d, 0, 15,-45, 3, constant_channel_gain=23)
RSSvsDistance (d,mean_rayleigh= 1/sqrt(2), sd_rayleigh=0, sd_noise_dbm = -4599999999,pathloss_alpha=3, constant_channel_gain=0)
RSSvsDistance (d, 0, 15,-45, 3, constant_channel_gain=23)
print(p)
library(ggplot2)
print(p)
sendersPackets
expType <- c("Set-A"=1, "Set-C"=2, "Set-B"=3, "Simulation"=4)
mds.f <- mds.r <- greedyAvg.f <- greedyAvg.r <- greedyAvg11.f <- greedyAvg11.r <- c()
greedyAvg18.f <- greedyAvg18.r <- greedyAvg26.f <- greedyAvg26.r <- c()
pnsd.f <- pnsd.r <- c()
expSize <- c()
type <- 1 #South Aisle
expSize[type] <- 2000
pnsd.f[type] <- 2000
pnsd.r[type] <- 1871
#forward
mds.f[type] <- 2000 #ratio, #ordinal:2000
greedyAvg.f[type] <- 1996
greedyAvg11.f[type] <- 83
greedyAvg18.f[type] <- 1777
greedyAvg26.f[type] <- 0
#reverse
mds.r[type] <- 5 #ratio&MeanError= 1 , #ordinal:0&MeanError= 1
greedyAvg.r[type] <- 171
greedyAvg11.r[type] <- 0
greedyAvg18.r[type] <- 1997
greedyAvg26.r[type] <- 0
type <- 2   # South Window
expSize[type] <- 2000
pnsd.r[type] <- 1201
pnsd.f[type] <- 1348
#forward
mds.f[type] <- 0 #ratio& MeanError= 1.0055, #ordinal:0 &MeanError= 1.0055 #RefNode: 154 Success: 0 out of  2000 experiments
greedyAvg.f[type] <- 1124
greedyAvg11.f[type] <- 402
greedyAvg18.f[type] <- 2
greedyAvg26.f[type] <- 6
#reverse
mds.r[type] <- 1450  #ratio:1450 & MeanError= 1.003636, #ordinal:1454 #RefNode: 97 Success: 1450 out of  2000 experiments MeanError = 1
greedyAvg.r[type] <- 883
greedyAvg11.r[type] <- 1642
greedyAvg18.r[type] <- 1
greedyAvg26.r[type] <- 14
type <- 3   # North Window
expSize[type] <- 692
pnsd.f[type] <- 692
pnsd.r[type] <- 692
#forward
mds.f[type] <- 692 #ratio, #ordinal: #RefNode: 140 Success: 692 out of  693 experiments MeanError= 0 (1. exp is corrupt)
greedyAvg.f[type] <- 601
greedyAvg11.f[type] <- 65
greedyAvg18.f[type] <- 690
greedyAvg26.f[type] <- 25
#reverse
mds.r[type] <- 692  #ratio, #ordinal: #RefNode: 152 Success: 692 out of  693 experiments MeanError= 1
greedyAvg.r[type] <- 131
greedyAvg11.r[type] <- 573
greedyAvg18.r[type] <- 25
greedyAvg26.r[type] <- 692
type <- 4   # Simulation
expSize[type] <- 2000
pnsd.f[type] <- 2000
pnsd.r[type] <- 2000
#forward
mds.f[type] <- 1981 #ratio=1981, #ordinal: 1988 &MeanError= 1  #RefNode: 1 Success: 1981 out of  2000 experiments MeanError= 1
greedyAvg.f[type] <- 2000
greedyAvg11.f[type] <- 775
greedyAvg18.f[type] <- 750
greedyAvg26.f[type] <- 758
#reverse
mds.r[type] <- 1974  #ratio:1974, #ordinal:1989 #RefNode: 10 Success: 1989 out of  2000 experiments MeanError= 1
greedyAvg.r[type] <- 2000
greedyAvg11.r[type] <- 637
greedyAvg18.r[type] <- 673
greedyAvg26.r[type] <- 639
plotSuccess <- function (eType, saveToFile=FALSE)
{
library(ggplot2)
library(RColorBrewer)
library(reshape)
plotName <- names(expType[eType])
dataNames <- c("PNSD","MDS","Greedy Avg", "Greedy AvgCh11", "Greedy AvgCh18", "Greedy AvgCh26");
results <- matrix(data = c(
pnsd.f[eType],pnsd.r[eType],    # PNSD - Probabilistic Node Sequence Discovery
mds.f[eType],mds.r[eType],    # MDS
greedyAvg.f[eType],greedyAvg.r[eType], # Greedy Avg
greedyAvg11.f[eType], greedyAvg11.r[eType],    # Greedy AvgCh11
greedyAvg18.f[eType], greedyAvg18.r[eType], #Greedy AvgCh18
greedyAvg26.f[eType],greedyAvg26.r[eType]         #Greedy AvgCh26
),
ncol = 2, byrow = TRUE,
dimnames = list(dataNames,     # Rownames
c("LeftToRight", "RightToLeft"))                  # Colnames
)
# Convert to percents:
results <- round((results/expSize[eType]) * 100,2)
results <- melt(results)
colnames(results)=c("algorithm","direction", "success")
#reorder bars
results <- within(results, algorithm <- factor(algorithm, levels = dataNames))
theme_update(axis.title.x = element_text(size = 20, vjust = -0.25),
axis.title.y = element_text(size = 20, angle = 90, vjust = 0.25),
axis.text.x = element_text(size = 16, color="black"),
axis.text.y = element_text(size = 16, color="black"),
title = element_text(size=20),
panel.background = element_blank(),
panel.grid.major = element_line(colour = "grey90"),
legend.position = "bottom",
legend.box = "horizontal",
legend.key = element_blank(),
legend.background = element_rect(fill="white", size=0.25),
legend.text = element_text(size=14))
p <- ggplot (results, aes(x=direction, y=success, fill=algorithm)) + geom_bar(stat="identity", position="dodge")
p<- p + geom_bar(stat="identity", position="dodge", colour="white", show_guide=FALSE) # to hide legend slashes
p <- p + labs(x="Direction") + scale_y_continuous("Success [%]", limits=c(0,100))
p <- p + scale_fill_manual(name="Algorithm", values = rev(brewer.pal(6,"YlGnBu")), guide=guide_legend(nrow=2,))
p <- p + geom_text(data=results, aes(y=(success),label=paste(success,"%",sep="")),position=position_dodge(width=0.9), size=3, vjust=0)
#p <- p + geom_text(data=results, aes(y=(50), label=algorithm),position=position_dodge(width=0.9), size=3.5, vjust=0, angle=90)
p <- p + ggtitle(plotName)
print(p)
if (saveToFile)
{
cat(plotName, "saving...\n")
ggsave(filename=paste("./plots/",plotName,".pdf",sep=""), plot=p, width=6.86, height=5)
}
}
plotSuccess(1)
plotSuccess(1)
plotName
source('~/phd/R/AllScripts/totalSuccess.R')
plotSuccess(1,TRUE)
source('~/phd/R/AllScripts/totalSuccess.R')
plotSuccess(1,TRUE)
plotSuccess(2,TRUE)
plotSuccess(3,TRUE)
plotSuccess(4,TRUE)
rayleigh_rnd <- function(mean=0,sd=1) { return(sqrt(rnorm(1,mean,sd)^2 + rnorm(1,mean,sd)^2)) }
for i in 1:10; print(i)
for i = 1:10; print(i)
for (i in 1:10) print(i)
a<-rayleigh_rnd()
a
a<-c(rayleigh_rnd())
for (i in 1:1000) a<-c(a,rayleigh_rnd())
mean(A)
mean(a)
a<-c(rayleigh_rnd()); for (i in 1:1000) a<-c(a,rayleigh_rnd())
mean(a)
a<-c(rayleigh_rnd()); for (i in 1:10000) a<-c(a,rayleigh_rnd())
mean(a)
plot(A)
plot(a)
hist(a)
?rnorm
a<-c(rayleigh_rnd(mean = 0, sd = 10)); for (i in 1:10000) a<-c(a,rayleigh_rnd())
plot(a)
hist(a)
mean(a)
a<-c(rayleigh_rnd(mean = 0, sd = 10)); for (i in 1:100000) a<-c(a,rayleigh_rnd())
mean(a)
hist(a)
density(a)
plot(density(a))
a<-c(rayleigh_rnd(mean = 0, sd = 10)); for (i in 1:10000) a<-c(a,rayleigh_rnd())
plot(density(a))
plot(density(a))
a<-c(rayleigh_rnd(mean = 0, sd = 10)); for (i in 1:10000) a<-c(a,rayleigh_rnd())
plot(density(a))
a<-c(rayleigh_rnd(mean = 0, sd = 10)); for (i in 1:10000) a<-c(a,rayleigh_rnd())
plot(density(a))
a<-c(rayleigh_rnd(mean = 0, sd = 15)); for (i in 1:10000) a<-c(a,rayleigh_rnd())
plot(density(a))
a<-c(rayleigh_rnd(mean = 0, sd = 15)); for (i in 1:10000) a<-c(a,rayleigh_rnd())
a<-c(rayleigh_rnd(mean = 0, sd = 15)); for (i in 1:10000) a<-c(a,rayleigh_rnd()); plot(density(a))
a<-c(rayleigh_rnd(mean = 0, sd = 15)); for (i in 1:10000) a<-c(a,rayleigh_rnd()); plot(density(a))
a<-c(rayleigh_rnd(mean = 0, sd = 15)); for (i in 1:10000) a<-c(a,rayleigh_rnd()); plot(density(a))
a<-c(rayleigh_rnd(mean = 0, sd = 15)); for (i in 1:10000) a<-c(a,rayleigh_rnd()); plot(density(a))
a<-c(rayleigh_rnd(mean = 0, sd = 15)); for (i in 1:10000) a<-c(a,rayleigh_rnd()); plot(density(a))
a<-c(rayleigh_rnd(mean = 0, sd = 15)); for (i in 1:10000) a<-c(a,rayleigh_rnd()); plot(density(a))
a<-c(rayleigh_rnd(mean = 0, sd = 15)); for (i in 1:10000) a<-c(a,rayleigh_rnd()); plot(density(a))
a<-c(rayleigh_rnd(mean = 0, sd = 15)); for (i in 1:10000) a<-c(a,rayleigh_rnd()); plot(density(a))
a<-c(rayleigh_rnd(mean = 0, sd = 15)); for (i in 1:10000) a<-c(a,rayleigh_rnd()); plot(density(a))
a<-c(rayleigh_rnd(mean = 0, sd = 15)); for (i in 1:10000) a<-c(a,rayleigh_rnd()); plot(density(a))
a<-c(rayleigh_rnd(mean = 0, sd = 15)); for (i in 1:10000) a<-c(a,rayleigh_rnd()); plot(density(a))
a<-c(rayleigh_rnd(mean = 0, sd = 15)); for (i in 1:10000) a<-c(a,rayleigh_rnd()); plot(density(a))
a<-c(rayleigh_rnd(mean = 0, sd = 15)); for (i in 1:10000) a<-c(a,rayleigh_rnd()); plot(density(a))
a<-c(rayleigh_rnd(mean = 0, sd = 15)); for (i in 1:10000) a<-c(a,rayleigh_rnd()); plot(density(a))
