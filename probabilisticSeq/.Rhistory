#p1 <- p1 + stat_bin(aes(label=(..count..) ), vjust=-0.5, geom="text", position="identity") # add text above bars
print(p1)
p1 <- ggplot(nVerdicts, aes(x=reliability, fill=isCorrect))
p1 <- p1 + geom_bar() + scale_y_continuous("Number Of Experiments", limits=c(0,2000))
p1 <- p1 + scale_fill_manual2() + guides(fill=guide_legend(reverse=TRUE))
p1 <- p1 + ggtitle(paste(sName,"\n packets per Channel:")) + theme(panel.background=element_rect(fill="#FAFAFA"), plot.title=element_text(size=20), strip.text.x = element_text(size = 16), axis.text.x = element_text(size = 10, color = "black", angle = 45))
p1 <- p1 + scale_x_discrete(drop=FALSE)
p1 <- p1+facet_wrap(~numPackets, ncol=4)
#p1 <- p1 + stat_bin(aes(label=(..count..) ), vjust=-0.5, geom="text", position="identity") # add text above bars
print(p1)
p1 <- ggplot(nVerdicts, aes(x=reliability, fill=isCorrect))
p1 <- p1 + geom_bar() + scale_y_continuous("Number Of Experiments", limits=c(0,2000))
p1 <- p1 + scale_fill_manual2() + guides(fill=guide_legend(reverse=TRUE))
p1 <- p1 + ggtitle(paste(sName,"\n packets per Channel:")) + theme(panel.background=element_rect(fill="#FAFAFA"), plot.title=element_text(size=20), strip.text.x = element_text(size = 16), axis.text.x = element_text(size = 14, color = "black", angle = 45))
p1 <- p1 + scale_x_discrete(drop=FALSE)
p1 <- p1+facet_wrap(~numPackets, ncol=4)
#p1 <- p1 + stat_bin(aes(label=(..count..) ), vjust=-0.5, geom="text", position="identity") # add text above bars
print(p1)
fileName <- paste("verify/plots/3-levels-highExclusive/",removeSpaces(sName),"-nPackets.pdf", sep="")
#ggsave(fileName,p1)
ggsave(fileName,p1)
expID
print(p1)
finalVerdicts
print(p2)
#nVerdicts$reliability <- factor(nVerdicts$reliability, levels=c("high","medium", "low"))
p2 <- ggplot(nVerdicts, aes(x=expNo, y=numPackets, fill=reliability))
p2 <- p2 + geom_tile(width=1)
# Add plainFails:
#p2 <- p2 + geom_tile(data=plainFail, aes(x=expNo, y="plainFail", fill=isCorrect))
#p2 <- scale_y_discrete(limits=c("a","b","c","d"))
p2 <- p2 + scale_fill_brewer("Verdict", palette=5) + guides(fill=guide_legend(reverse=TRUE))
p2 <- p2 + ggtitle(sName) + theme(panel.background=element_rect(fill="#FAFAFA"), plot.title=element_text(size=10))
p2 <- p2 + scale_y_discrete(drop=FALSE)
print(p2)
SetA-Qx <- c(10,30); setName [5] <- "Set-A, Left-to-Right, Qx"
SetA-Qx <- c(10,30); setName [5] <- "Set-A, Left-to-Right, Qx"
SetA_Qx <- c(10,30); setName [5] <- "Set-A, Left-to-Right, Qx"
sets <- SetA_Qx
sName <- setName[5]
nVerdicts <- data.frame()
for (set in sets){
expID <- set
source("countVerify.R")
nVerdicts <- rbind(nVerdicts, finalVerdicts)
}
nVerdicts$numPackets <- factor(nVerdicts$numPackets, levels=sort(unique(nVerdicts$numPackets)))
p1 <- ggplot(nVerdicts, aes(x=reliability, fill=isCorrect))
p1 <- p1 + geom_bar() + scale_y_continuous("Number Of Experiments", limits=c(0,2000))
p1 <- p1 + scale_fill_manual2() + guides(fill=guide_legend(reverse=TRUE))
p1 <- p1 + ggtitle(paste(sName,"\n packets per Channel:")) + theme(panel.background=element_rect(fill="#FAFAFA"), plot.title=element_text(size=20), strip.text.x = element_text(size = 16), axis.text.x = element_text(size = 14, color = "black", angle = 45))
p1 <- p1 + scale_x_discrete(drop=FALSE)
p1 <- p1+facet_wrap(~numPackets, ncol=4)
#p1 <- p1 + stat_bin(aes(label=(..count..) ), vjust=-0.5, geom="text", position="identity") # add text above bars
print(p1)
head(nVerdicts)
tail(nVerdicts)
SetA_Qx <- c(130); setName [5] <- "Set-A, Left-to-Right, Qx"
SetA_Qx <- c(30); setName [5] <- "Set-A, Left-to-Right, Qx"
sets <- SetA_Qx
sName <- setName[5]
nVerdicts <- data.frame()
for (set in sets){
expID <- set
source("countVerify.R")
nVerdicts <- rbind(nVerdicts, finalVerdicts)
}
expId
expID
source("countVerify.R")
source('~/phd/R/probabilisticSeq/countVerify.R')
print(p3)
SetA_Qx <- c(10,30); setName [5] <- "Set-A, Left-to-Right, Qx"
sets <- SetA_Qx
sName <- setName[5]
nVerdicts <- data.frame()
for (set in sets){
expID <- set
source("countVerify.R")
nVerdicts <- rbind(nVerdicts, finalVerdicts)
}
nVerdicts$numPackets <- factor(nVerdicts$numPackets, levels=sort(unique(nVerdicts$numPackets)))
p1 <- ggplot(nVerdicts, aes(x=reliability, fill=isCorrect))
p1 <- p1 + geom_bar() + scale_y_continuous("Number Of Experiments", limits=c(0,2000))
p1 <- p1 + scale_fill_manual2() + guides(fill=guide_legend(reverse=TRUE))
p1 <- p1 + ggtitle(paste(sName,"\n packets per Channel:")) + theme(panel.background=element_rect(fill="#FAFAFA"), plot.title=element_text(size=20), strip.text.x = element_text(size = 16), axis.text.x = element_text(size = 14, color = "black", angle = 45))
p1 <- p1 + scale_x_discrete(drop=FALSE)
p1 <- p1+facet_wrap(~numPackets, ncol=4)
#p1 <- p1 + stat_bin(aes(label=(..count..) ), vjust=-0.5, geom="text", position="identity") # add text above bars
print(p1)
SetA_Qx <- c(10,30,11,31); setName [5] <- "Set-A, Left-to-Right, Qx"
sets <- SetA_Qx
sName <- setName[5]
nVerdicts <- data.frame()
for (set in sets){
expID <- set
source("countVerify.R")
nVerdicts <- rbind(nVerdicts, finalVerdicts)
}
nVerdicts$numPackets <- factor(nVerdicts$numPackets, levels=sort(unique(nVerdicts$numPackets)))
p1 <- ggplot(nVerdicts, aes(x=reliability, fill=isCorrect))
p1 <- p1 + geom_bar() + scale_y_continuous("Number Of Experiments", limits=c(0,2000))
p1 <- p1 + scale_fill_manual2() + guides(fill=guide_legend(reverse=TRUE))
p1 <- p1 + ggtitle(paste(sName,"\n packets per Channel:")) + theme(panel.background=element_rect(fill="#FAFAFA"), plot.title=element_text(size=20), strip.text.x = element_text(size = 16), axis.text.x = element_text(size = 14, color = "black", angle = 45))
p1 <- p1 + scale_x_discrete(drop=FALSE)
p1 <- p1+facet_wrap(~numPackets, ncol=4)
#p1 <- p1 + stat_bin(aes(label=(..count..) ), vjust=-0.5, geom="text", position="identity") # add text above bars
print(p1)
SetA_Qx
SetA_Qx <- c(11,31); setName [5] <- "Set-A, Left-to-Right, Qx"
sets <- SetA_Qx
sName <- setName[5]
nVerdicts <- data.frame()
for (set in sets){
expID <- set
source("countVerify.R")
nVerdicts <- rbind(nVerdicts, finalVerdicts)
}
nVerdicts$numPackets <- factor(nVerdicts$numPackets, levels=sort(unique(nVerdicts$numPackets)))
p1 <- ggplot(nVerdicts, aes(x=reliability, fill=isCorrect))
p1 <- p1 + geom_bar() + scale_y_continuous("Number Of Experiments", limits=c(0,2000))
p1 <- p1 + scale_fill_manual2() + guides(fill=guide_legend(reverse=TRUE))
p1 <- p1 + ggtitle(paste(sName,"\n packets per Channel:")) + theme(panel.background=element_rect(fill="#FAFAFA"), plot.title=element_text(size=20), strip.text.x = element_text(size = 16), axis.text.x = element_text(size = 14, color = "black", angle = 45))
p1 <- p1 + scale_x_discrete(drop=FALSE)
p1 <- p1+facet_wrap(~numPackets, ncol=4)
#p1 <- p1 + stat_bin(aes(label=(..count..) ), vjust=-0.5, geom="text", position="identity") # add text above bars
print(p1)
?quantile
quantile(1:100,0.90)
quantile(1:100,0.99)
quantile(1:100,1)
quantile(1:160,1)
quantile(1:1687,1)
quantile(1:1687,0.99)
quantile(1:1687,1)
sample(1:120,10)
sample(1:120,100)
a<-sample(1:120,100)
max(a)
quantile(a,0.99)
quantile(a,1)
a<-sample(1:120,100)
max(a)
a<-sample(1:1425,100)
max(a)
quantile(a,1)
quantile(a,0.99)
outputDirectory
outputDirectory
outputDirectory
testName
definition
exp.set.name
c(10,30,31,32)+1
SetA_Qx_Normal <- c(10,30,31,32); setName [5] <- "Set-A, Left-to-Right, Qx"
SetA_Qx_Reverse <- c(11,33,34,35); setName [6] <- "Set-A, Right-to-Left, Qx"
SetC_Qx_Normal <- c(2,36,37,38); setName [7] <- "Set-C, Left-to-Right, Qx"
SetC_Qx_Reverse <- c(1,39,40,41); setName [8] <- "Set-C, Right-to-Left, Qx"
sets <- SetA_Qx_Normal
sName <- setName[5]
nVerdicts <- data.frame()
for (set in sets){
expID <- set
source("countVerify.R")
nVerdicts <- rbind(nVerdicts, finalVerdicts)
}
nVerdicts$numPackets <- factor(nVerdicts$numPackets, levels=sort(unique(nVerdicts$numPackets)))
p1 <- ggplot(nVerdicts, aes(x=reliability, fill=isCorrect))
p1 <- p1 + geom_bar() + scale_y_continuous("Number Of Experiments", limits=c(0,2000))
p1 <- p1 + scale_fill_manual2() + guides(fill=guide_legend(reverse=TRUE))
p1 <- p1 + ggtitle(paste(sName,"\n packets per Channel:")) + theme(panel.background=element_rect(fill="#FAFAFA"), plot.title=element_text(size=20), strip.text.x = element_text(size = 16), axis.text.x = element_text(size = 14, color = "black", angle = 45))
p1 <- p1 + scale_x_discrete(drop=FALSE)
p1 <- p1+facet_wrap(~numPackets, ncol=4)
#p1 <- p1 + stat_bin(aes(label=(..count..) ), vjust=-0.5, geom="text", position="identity") # add text above bars
print(p1)
sets
expID
for (set in sets){
expID <- set
source("countVerify.R")
nVerdicts <- rbind(nVerdicts, finalVerdicts)
}
nVerdicts <- data.frame()
for (set in sets){
expID <- set
source("countVerify.R")
nVerdicts <- rbind(nVerdicts, finalVerdicts)
}
expID
expID=30; source("countVerify.R")
if (expID == 30)
{
files <- Sys.glob("/Users/ergin/phd/R/probabilisticSeq/verify/Qx/SetA-Q50-verify-Normal-verify1-2000.txt")
expName <- "SetA-Q50-Normal"
nPackets <- "Q50"
}
nPackets
joinReports <- function(files) {
verifyDF <- data.frame()
for (f in files)
verifyDF <- rbind(verifyDF, read.table(f, header=TRUE, stringsAsFactors=FALSE))
expNoOrder <- with(verifyDF,order(expNo))
verifyDF <- verifyDF[expNoOrder,]
row.names(verifyDF) <- 1:nrow(verifyDF)
return(verifyDF)
}
#Filename <- "verify/4thFloorNorthSide-nointerference-verify1-300.txt"
#analyse <- read.table (Filename, header=TRUE)
analyse <- joinReports(files)
tail(analyse)
f
files
files <- Sys.glob("/Users/ergin/phd/R/probabilisticSeq/verify/Qx/SetA-Q50-verify-Normal-verify1-2000.txt")
files
Sys.glob("/Users/ergin/phd/R/probabilisticSeq/verify/Qx/SetA-Q50-verify-Normal-verify1-2000.txt")
"/Users/ergin/phd/R/probabilisticSeq/verify/Qx/SetA-Q50-verify-Normal-verify1-2000.txt"
Sys.glob("/Users/ergin/phd/R/probabilisticSeq/verify/Qx/SetA-Q50-verify-Normal-verify1-2000.txt")
Sys.glob("/Users/ergin/phd/R/probabilisticSeq/verify/Qx/SetA-Q50-Normal-verify1-2000.txt")
expID=30; source("countVerify.R")
sets <- SetA_Qx_Normal
sName <- setName[5]
nVerdicts <- data.frame()
for (set in sets){
expID <- set
source("countVerify.R")
nVerdicts <- rbind(nVerdicts, finalVerdicts)
}
nVerdicts$numPackets <- factor(nVerdicts$numPackets, levels=sort(unique(nVerdicts$numPackets)))
p1 <- ggplot(nVerdicts, aes(x=reliability, fill=isCorrect))
p1 <- p1 + geom_bar() + scale_y_continuous("Number Of Experiments", limits=c(0,2000))
p1 <- p1 + scale_fill_manual2() + guides(fill=guide_legend(reverse=TRUE))
p1 <- p1 + ggtitle(paste(sName,"\n packets per Channel:")) + theme(panel.background=element_rect(fill="#FAFAFA"), plot.title=element_text(size=20), strip.text.x = element_text(size = 16), axis.text.x = element_text(size = 14, color = "black", angle = 45))
p1 <- p1 + scale_x_discrete(drop=FALSE)
p1 <- p1+facet_wrap(~numPackets, ncol=4)
#p1 <- p1 + stat_bin(aes(label=(..count..) ), vjust=-0.5, geom="text", position="identity") # add text above bars
print(p1)
print(paste(expName,
#"\nSuccess=",success,"/",length(experiments),"(",round(success/length(experiments),digit=4)*100,"%) ",
"\n Total Success =", verifiedSuccess, "/",length(experiments),"(",round(verifiedSuccess/length(experiments),digits=4)*100,"%)\n",
"HighReliable Success =",highReliableSuccess,"/",highReliableTotal,"(",highReliableSuccessRatio,"%)\n"))
print(paste(expName,
"| Total Success =", verifiedSuccess, "/",length(experiments),"(",round(verifiedSuccess/length(experiments),digits=4)*100,"%) |",
"HighReliable Success =",highReliableSuccess,"/",highReliableTotal,"(",highReliableSuccessRatio,"%)\n"))
success
print(paste(expName,
"Success = ",success, " | Total verified Success =", verifiedSuccess, "/",length(experiments),"(",round(verifiedSuccess/length(experiments),digits=4)*100,"%) |",
"HighReliable Success =",highReliableSuccess,"/",highReliableTotal,"(",highReliableSuccessRatio,"%)\n"))
print(paste(expName,
"Success = ",success, "/",length(experiments),"(",round(success/length(experiments),digits=4)*100,"%)", " | Total verified Success =", verifiedSuccess, "/",length(experiments),"(",round(verifiedSuccess/length(experiments),digits=4)*100,"%) |",
"HighReliable Success =",highReliableSuccess,"/",highReliableTotal,"(",highReliableSuccessRatio,"%)\n"))
sets <- SetA_Qx_Reverse
sName <- setName[6]
nVerdicts <- data.frame()
for (set in sets){
expID <- set
source("countVerify.R")
nVerdicts <- rbind(nVerdicts, finalVerdicts)
}
nVerdicts$numPackets <- factor(nVerdicts$numPackets, levels=sort(unique(nVerdicts$numPackets)))
p1 <- ggplot(nVerdicts, aes(x=reliability, fill=isCorrect))
p1 <- p1 + geom_bar() + scale_y_continuous("Number Of Experiments", limits=c(0,2000))
p1 <- p1 + scale_fill_manual2() + guides(fill=guide_legend(reverse=TRUE))
p1 <- p1 + ggtitle(paste(sName,"\n packets per Channel:")) + theme(panel.background=element_rect(fill="#FAFAFA"), plot.title=element_text(size=20), strip.text.x = element_text(size = 16), axis.text.x = element_text(size = 14, color = "black", angle = 45))
p1 <- p1 + scale_x_discrete(drop=FALSE)
p1 <- p1+facet_wrap(~numPackets, ncol=4)
#p1 <- p1 + stat_bin(aes(label=(..count..) ), vjust=-0.5, geom="text", position="identity") # add text above bars
print(p1)
sets <- SetC_Qx_Normal
sName <- setName[7]
nVerdicts <- data.frame()
for (set in sets){
expID <- set
source("countVerify.R")
nVerdicts <- rbind(nVerdicts, finalVerdicts)
}
nVerdicts$numPackets <- factor(nVerdicts$numPackets, levels=sort(unique(nVerdicts$numPackets)))
p1 <- ggplot(nVerdicts, aes(x=reliability, fill=isCorrect))
p1 <- p1 + geom_bar() + scale_y_continuous("Number Of Experiments", limits=c(0,2000))
p1 <- p1 + scale_fill_manual2() + guides(fill=guide_legend(reverse=TRUE))
p1 <- p1 + ggtitle(paste(sName,"\n packets per Channel:")) + theme(panel.background=element_rect(fill="#FAFAFA"), plot.title=element_text(size=20), strip.text.x = element_text(size = 16), axis.text.x = element_text(size = 14, color = "black", angle = 45))
p1 <- p1 + scale_x_discrete(drop=FALSE)
p1 <- p1+facet_wrap(~numPackets, ncol=4)
#p1 <- p1 + stat_bin(aes(label=(..count..) ), vjust=-0.5, geom="text", position="identity") # add text above bars
print(p1)
sets <- SetC_Qx_Reverse
sName <- setName[8]
nVerdicts <- data.frame()
for (set in sets){
expID <- set
source("countVerify.R")
nVerdicts <- rbind(nVerdicts, finalVerdicts)
}
nVerdicts$numPackets <- factor(nVerdicts$numPackets, levels=sort(unique(nVerdicts$numPackets)))
p1 <- ggplot(nVerdicts, aes(x=reliability, fill=isCorrect))
p1 <- p1 + geom_bar() + scale_y_continuous("Number Of Experiments", limits=c(0,2000))
p1 <- p1 + scale_fill_manual2() + guides(fill=guide_legend(reverse=TRUE))
p1 <- p1 + ggtitle(paste(sName,"\n packets per Channel:")) + theme(panel.background=element_rect(fill="#FAFAFA"), plot.title=element_text(size=20), strip.text.x = element_text(size = 16), axis.text.x = element_text(size = 14, color = "black", angle = 45))
p1 <- p1 + scale_x_discrete(drop=FALSE)
p1 <- p1+facet_wrap(~numPackets, ncol=4)
#p1 <- p1 + stat_bin(aes(label=(..count..) ), vjust=-0.5, geom="text", position="identity") # add text above bars
print(p1)
nVerdicts$numPackets <- factor(nVerdicts$numPackets, levels=c("40","Q50","Q90", "Q100"))
p1 <- ggplot(nVerdicts, aes(x=reliability, fill=isCorrect))
p1 <- p1 + geom_bar() + scale_y_continuous("Number Of Experiments", limits=c(0,2000))
p1 <- p1 + scale_fill_manual2() + guides(fill=guide_legend(reverse=TRUE))
p1 <- p1 + ggtitle(paste(sName,"\n packets per Channel:")) + theme(panel.background=element_rect(fill="#FAFAFA"), plot.title=element_text(size=20), strip.text.x = element_text(size = 16), axis.text.x = element_text(size = 14, color = "black", angle = 45))
p1 <- p1 + scale_x_discrete(drop=FALSE)
p1 <- p1+facet_wrap(~numPackets, ncol=4)
#p1 <- p1 + stat_bin(aes(label=(..count..) ), vjust=-0.5, geom="text", position="identity") # add text above bars
print(p1)
source('~/phd/R/probabilisticSeq/probabilisticSeq-v2.5.R')
source('~/phd/R/probabilisticSeq/probabilisticSeq-v2.5.R')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
# countVerify.R icinde expID'yi comment out et
setName <- c()
southAisleNormal <- c(10,18,22,26); setName[1] <- "South Aisle Normal"
southAisleReverse <- c(11,19,23,27); setName[2] <- "Set-A, Right-to-Left"
southWindowNormal <- c(2,20,24,28); setName[3] <- "South Window Normal"
southWindowReverse <- c(1,21,25,29); setName[4] <- "South Window Reverse"
SetA_Qx_Normal <- c(10,30,31,32); setName [5] <- "Set-A, Left-to-Right, Qx"
SetA_Qx_Reverse <- c(11,33,34,35); setName [6] <- "Set-A, Right-to-Left, Qx"
SetC_Qx_Normal <- c(2,36,37,38); setName [7] <- "Set-C, Left-to-Right, Qx"
SetC_Qx_Reverse <- c(1,39,40,41); setName [8] <- "Set-C, Right-to-Left, Qx"
sets <- SetC_Qx_Reverse
sName <- setName[8]
nVerdicts <- data.frame()
for (set in sets){
expID <- set
source("countVerify.R")
nVerdicts <- rbind(nVerdicts, finalVerdicts)
}
nVerdicts$numPackets <- factor(nVerdicts$numPackets, levels=sort(unique(nVerdicts$numPackets)))
nVerdicts$numPackets <- factor(nVerdicts$numPackets, levels=c("40","Q50","Q90", "Q100"))
p1 <- ggplot(nVerdicts, aes(x=reliability, fill=isCorrect))
p1 <- p1 + geom_bar() + scale_y_continuous("Number Of Experiments", limits=c(0,2000))
p1 <- p1 + scale_fill_manual2() + guides(fill=guide_legend(reverse=TRUE))
p1 <- p1 + ggtitle(paste(sName,"\n packets per Channel:")) + theme(panel.background=element_rect(fill="#FAFAFA"), plot.title=element_text(size=20), strip.text.x = element_text(size = 16), axis.text.x = element_text(size = 14, color = "black", angle = 45))
p1 <- p1 + scale_x_discrete(drop=FALSE)
p1 <- p1+facet_wrap(~numPackets, ncol=4)
#p1 <- p1 + stat_bin(aes(label=(..count..) ), vjust=-0.5, geom="text", position="identity") # add text above bars
print(p1)
source('~/.active-rstudio-document')
sets <- SetC_Qx_Normal
sName <- setName[7]
nVerdicts <- data.frame()
for (set in sets){
expID <- set
source("countVerify.R")
nVerdicts <- rbind(nVerdicts, finalVerdicts)
}
nVerdicts$numPackets <- factor(nVerdicts$numPackets, levels=sort(unique(nVerdicts$numPackets)))
nVerdicts$numPackets <- factor(nVerdicts$numPackets, levels=c("40","Q50","Q90", "Q100"))
p1 <- ggplot(nVerdicts, aes(x=reliability, fill=isCorrect))
p1 <- p1 + geom_bar() + scale_y_continuous("Number Of Experiments", limits=c(0,2000))
p1 <- p1 + scale_fill_manual2() + guides(fill=guide_legend(reverse=TRUE))
p1 <- p1 + ggtitle(paste(sName,"\n packets per Channel:")) + theme(panel.background=element_rect(fill="#FAFAFA"), plot.title=element_text(size=20), strip.text.x = element_text(size = 16), axis.text.x = element_text(size = 14, color = "black", angle = 45))
p1 <- p1 + scale_x_discrete(drop=FALSE)
p1 <- p1+facet_wrap(~numPackets, ncol=4)
#p1 <- p1 + stat_bin(aes(label=(..count..) ), vjust=-0.5, geom="text", position="identity") # add text above bars
print(p1)
winnerSeq
outputFileName
cat("Verdict is:", verdict,"\n");
?write
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
TRACE_FILE <- "measurementtoday3.txt"
packets <- read.table(TRACE_FILE, sep="\t", na.strings="", col.names=c("receiver", "sender", "channel", "rssi", "power", "time", "packetnum"), colClasses=c(rep("factor",3), "numeric", "factor", "character", "numeric"), header=FALSE)
packets
packets <- subset(packets, sender %in% Truth & receiver %in% Truth)
packets <- droplevels(packets)
packets
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
packets
packets <- read.table(TRACE_FILE, sep="\t", na.strings="", col.names=c("receiver", "sender", "channel", "rssi", "power", "time", "packetnum"), colClasses=c(rep("factor",3), "numeric", "factor", "character", "numeric"), header=FALSE)
head(packets)
subset(packets,sender==363)
subset(packets,sender==363 && receiver==100)
subset(packets,sender==100 && receiver==363)
subset(packets,sender==100 & receiver==363)
subset(packets,sender==363 & receiver==100)
unique(packets$sender)
unique(packets$receiver)
debugging
packets <- read.table(TRACE_FILE, sep="\t", na.strings="", col.names=c("receiver", "sender", "channel", "rssi", "power", "time", "packetnum"), colClasses=c(rep("factor",3), "numeric", "factor", "character", "numeric"), header=FALSE)
packets <- droplevels(packets)
source('~/.active-rstudio-document')
winnerSeq
refnode
produceOutput
run.verbose
findProbSequences(packets,refnode, produceOutput=produceOutput, verbose=run.verbose);
packets
packets <- read.table(TRACE_FILE, sep="\t", na.strings="", col.names=c("receiver", "sender", "channel", "rssi", "power", "time", "packetnum"), colClasses=c(rep("factor",3), "numeric", "factor", "character", "numeric"), header=FALSE)
findProbSequences(packets,refnode, produceOutput=produceOutput, verbose=run.verbose);
subset(packets,sender==363 & receiver==100)
subset(packets,sender==363 & receiver==100)$channels
subset(packets,sender==363 & receiver==100)$channel
unique(subset(packets,sender==363 & receiver==100)$channel)
nrow(packets)
unique(packets$sender)\
unique(packets$sender)
7*6*5*16
TRACE_FILE <- "today5.txt"
packets <- read.table(TRACE_FILE, sep="\t", na.strings="", col.names=c("receiver", "sender", "channel", "rssi", "power", "time", "packetnum"), colClasses=c(rep("factor",3), "numeric", "factor", "character", "numeric"), header=FALSE)
head(packets)
refnode
findProbSequences(packets,refnode, produceOutput=produceOutput, verbose=run.verbose);
source("configuration.R")
source("probSeqFunctions.R")
run.verbose <- FALSE
findProbSequences(packets,refnode, produceOutput=produceOutput, verbose=run.verbose);
refnode
refnode <- 100
findProbSequences(packets,refnode, produceOutput=produceOutput, verbose=run.verbose);
run.verbose <- TRUE
findProbSequences(packets,refnode, produceOutput=produceOutput, verbose=run.verbose);
numnodes <- length(unique(packets$sender))
numnodes
findProbSequences(packets,refnode, produceOutput=produceOutput, verbose=run.verbose);
probabilitySeqDF <- findProbSequences(packets,refnode, produceOutput=produceOutput, verbose=run.verbose);
probOrder <- with(probabilitySeqDF,order(-prob))
probabilitySeqDF <- probabilitySeqDF[probOrder,]
probabilitySeqDF
Truth <- c(100, 369, 367, 368, 333, 357, 334, 363)
Truth
ls ()
source('~/.active-rstudio-document')
source("probSeqFunctions.R")
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/phd/R/probabilisticSeq/Student_Proj_probabilisticSeq-v2.5.R')
source('~/.active-rstudio-document')
source('~/phd/R/probabilisticSeq/Student_Proj_probabilisticSeq-v2.5.R')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
analyse
outputFileName
source('~/phd/R/probabilisticSeq/Student_Proj_probabilisticSeq-v2.5.R')
?
;
source('~/phd/R/probabilisticSeq/probSeqFunctions.R')
source('~/phd/R/probabilisticSeq/Student_Proj_probabilisticSeq-v2.5.R')
result <- subset(analyse, verifyIsCorrect == TRUE)
result
result <- subset(analyse, match == TRUE)
result
result <- which.max(result$prob)
result
matches <- subset(analyse, match == TRUE)
matches <- subset(analyse, match == TRUE)
result <- which.max(result$prob)[1]
result
matches <- subset(analyse, match == TRUE)
result <- which.max(matches$prob)[1]
result
result <- which.max(matches$prob)[1,computedSeq]
result
result <- which.max(matches$prob)[1,"computedSeq"]
result
matches$prob
whichMatch <- which.max(matches$prob)
whichMatch
maxMatch <- which.max(matches$prob)
result
result <- matches[maxMatch]
result
matches
maxMatch
maxMatch <- which.max(matches$prob)
result <- matches[maxMatch]
result
result <- matches[maxMatch,]
result
result <- matches[maxMatch,]$computedSeq
result
subset(analyse, match == TRUE)
subset(analyse, match == 333)
nrow(subset(analyse, match == 333))
if (nrow(matches) == 0 ) matches <- analyse
matches
cat(result)
cat ("The result is: ", matches[maxMatch,]$isCorrect, " => ",result ,"\n")
source('~/phd/R/probabilisticSeq/Student_Proj_probabilisticSeq-v2.5.R')
source('~/phd/R/probabilisticSeq/Student_Proj_probabilisticSeq-v2.5.R')
?rm
source('~/phd/R/probabilisticSeq/Student_Proj_probabilisticSeq-v2.5.R')
source('~/phd/R/probabilisticSeq/Student_Proj_probabilisticSeq-v2.5.R')
source('~/.active-rstudio-document')
source('~/phd/R/probabilisticSeq/Student_Proj_probabilisticSeq-v2.5.R')
q
q()
source('~/.active-rstudio-document')
Truth
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
Truth
source('~/.active-rstudio-document')
probabilitySeqDF
head(packets)
packets <- read.table(TRACE_FILE, sep="\t", na.strings="", col.names=c("receiver", "sender", "channel", "rssi", "power", "time", "packetnum"), colClasses=c(rep("factor",3), "numeric", "factor", "character", "numeric"), header=FALSE)
unique(packets$sender)
unique(packets$receiver)
unique(packets$sender) %in% unique(packets$receiver)
unique(packets$receiver) %in% unique(packets$sender)
unique(packets$receiver) %in% unique(packets$channel)
unique(packets$receiver) %in% unique(packets$sender)
source('~/phd/R/probabilisticSeq/Student_Proj_probabilisticSeq-v2.5.R')
View(matches)
ggp
