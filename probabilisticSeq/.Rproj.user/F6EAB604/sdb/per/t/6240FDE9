{
    "collab_server" : "",
    "contents" : "# Depreciated.. unnecessary now.\nprint(\"Loading userFunctions.R\")\n\n\nmostFreqReceiver <- function (valueSet, tIndex=1) { mfr <- names(rev(sort(table(valueSet)))[tIndex]); return(mfr) }\nfindProbability <- function (valueSet, tIndex=1, setLength) { rev(sort(table(valueSet)))[tIndex]/setLength }\nfindProbabilityByName <- function (valueSet, name){table(valueSet[as.character(name)])/length(valueSet)}\nfindWeight <- function(placedReceivers, weightSet) { ix<-(placedReceivers+1); return(weightSet[ix]) }\n\nsetTruth <- function (TruthList,referencenode) { #print(TruthList)\n  if (TruthList[length(TruthList)] == referencenode)\n    return(rev(TruthList))\n  else\n    return(TruthList)\n}\n\ncomputeProbabilities <- function (probDF, vRows){\n  probs <- c()\n  for(rr in 1:vRows)\n  {\n    prob <- 1\n    if (TRUE)\n      for (cc in 1:ncol(probDF))\n      {\n        #cat(\" probabilitiesDF[\",rr,\",\",cc,\"]=\",probabilitiesDF[rr,cc], sep=\"\")\n        prob <- prob * probDF[rr,cc]\n      }\n    prob <- prod(probDF[rr,])\n    #print(\"\\n\")\n    probs <- c(probs,prob)\n    #cat(\"probabilitySeqDF[\",rr,\",prob] <- \",prob,\"=>\",probabilitySeqDF[rr,\"prob\"],\"\\n\",sep=\"\")\n  }\n  #print(probabilitySeqDF[1:validRows,]); #print(probabilitiesDF)\n  return(probs)\n}\n\ngetSendersWinningReceivers <- function (allPackets, theSender, excludeList=NULL, includeList=NULL) {\n  \n  if (is.null(excludeList) && is.null(includeList)) \n  {\n    thisFunctionsName <- match.call()[[1]]\n    stop (paste(\"In \", thisFunctionsName,\", excludeList and includeList cannot be both NULL!\"))\n  } \n  else if (!is.null(excludeList) && !is.null(includeList)) \n  {\n    thisFunctionsName <- match.call()[[1]]\n    stop (paste(\"In \", thisFunctionsName,\", excludeList and includeList cannot be both non-NULL!\"))\n  } \n  else if (!is.null(excludeList)) \n    senderPackets <- subset(allPackets, sender == theSender & !(receiver %in% excludeList), select=c(-time,-power)) \n  else if (!is.null(includeList))\n    senderPackets <- subset(allPackets, sender == theSender & (receiver %in% includeList), select=c(-time,-power))\n   \n  if (!exists(\"senderPackets\") || nrow(senderPackets)==0) {\n    cat(paste(\"No packets found from sender\",theSender,\"to receivers:\",paste(excludeList,sep=','),paste(includeList,sep=',')))\n    # Above was stop(...), below was not there\n    return(NA)\n  }\n  \n  packetNums <- unique(senderPackets$packetnum)\n  channelSet <- unique(packets$channel)\n  \n  sendersWinningReceivers <- c()\n  for (c in channelSet) \n  {\n    for (n in packetNums) \n    {\n      sendersNthPackets <- subset(senderPackets,packetnum==n&channel==c)\t # find all reports for {s, c, n}\n      theWinningReceiver <- -9999 #impossible receiver\n      \n      #sendersNthPackets <- sendersNthPackets[order(-sendersNthPackets[,\"rssi\"]),]  # reorder by rssi, big to small\n      #theWinningReceiver <- as.numeric(as.character(sendersNthPackets[1,\"receiver\"])) # find the receiver with best rssi\n      #theWinningRssi <- as.numeric(as.character(sendersNthPackets[1,\"rssi\"])) # find the rssi of the best receiver\n      #sendersWinningReceivers <- c(sendersWinningReceivers,theWinningReceiver) # put it into the list.\n      \n      #rssMaxDifference <- 2 # now in configuration.R\n      rssDifference <- 0\n      \n      firstRssiDummy <- -1000\n      firstRssi <- firstRssiDummy # impossible rssi, so 1st iteration of loop actuates\n      \n      while (rssDifference <= rssMaxDifference)\n      {\n        sendersNthPackets <- subset(sendersNthPackets, receiver!=theWinningReceiver)\n        if (nrow(sendersNthPackets) == 0) # if there was only one receiver, strange measurement!.\n          break\n        sendersNthPackets <- sendersNthPackets[order(-sendersNthPackets[,\"rssi\"]),]  # reorder by rssi, big to small\n        \n        theWinningReceiver <- as.numeric(as.character(sendersNthPackets[1,\"receiver\"])) # find the receiver with best rssi\n        theWinningRssi <- as.numeric(as.character(sendersNthPackets[1,\"rssi\"])) # find the rssi of the best receiver\n        \n        rssDifference <- firstRssi - theWinningRssi\n        #cat(\"rssDifference=\",rssDifference, \"firstRssi=\",firstRssi, \"theWinningRssi=\",theWinningRssi,\"theWinningReceiver=\",theWinningReceiver , \"at c =\",c,\"n =\",n,\"for sender:\",s,\"\\n\")\n        \n        if(rssDifference <= rssMaxDifference)\n        {\n          sendersWinningReceivers <- c(sendersWinningReceivers,theWinningReceiver) # put it into the list.\n          \n          if (firstRssi != firstRssiDummy && FALSE)\n          {\n            cat(\"rssDifference=\",rssDifference, \"firstRssi=\",firstRssi, \"theWinningRssi=\",theWinningRssi,\"theWinningReceiver=\",theWinningReceiver , \"at c =\",c,\"n =\",n,\"for sender:\",s,\"\\n\")\n            cat (\"Just inserted\", theWinningReceiver,\":\",theWinningRssi,\"\\n\")\n          }\n        }\n        else\n          next\n        \n        if (firstRssi == firstRssiDummy)  # set just once\n          firstRssi <- theWinningRssi\n      }\n      \n      if (c==13 && FALSE)\n      {stop (\"Stopped after c=13\"); warning (\"warning iste.\")}\n    } # for n\n  } # for c\n  sendersWinningReceivers <- sendersWinningReceivers[!is.na(sendersWinningReceivers)]   # remove NAs\n  return (sendersWinningReceivers)\n}\n\ngetSendersFreqTable <- function (allPackets, theSender, excludeList=NULL, includeList=NULL) {\n  \n  if (is.null(excludeList) && is.null(includeList)) \n  {\n    thisFunctionsName <- match.call()[[1]]\n    stop (paste(\"In \", thisFunctionsName,\", excludeList and includeList cannot be both NULL!\"))\n  } \n  else if (!is.null(excludeList) && !is.null(includeList)) \n  {\n    thisFunctionsName <- match.call()[[1]]\n    stop (paste(\"In \", thisFunctionsName,\", excludeList and includeList cannot be both non-NULL!\"))\n  } \n  else if (!is.null(excludeList)) \n    senderPackets <- subset(allPackets, sender == theSender & !(receiver %in% excludeList), select=c(-time,-power)) \n  else if (!is.null(includeList))\n    senderPackets <- subset(allPackets, sender == theSender & (receiver %in% includeList), select=c(-time,-power))\n  \n  if (!exists(\"senderPackets\") || nrow(senderPackets)==0)\n    stop(paste(\"No packets found from sender\",theSender,\"to receivers:\",paste(excludeList,sep=','),paste(includeList,sep=',')))\n  \n  packetNums <- unique(senderPackets$packetnum)\n  channelSet <- unique(packets$channel)\n  \n  placeHolderStr <- \"placeholder\"\n  sendersFreqTable<-c()\n  sendersFreqTable[placeHolderStr] <- -999\n  for (c in channelSet) \n  {\n    for (n in packetNums) \n    {\n      sendersNthPackets <- subset(senderPackets,packetnum==n&channel==c)   # find all reports for {s, c, n}\n      theWinningReceiver <- -9999 #impossible receiver\n      \n      #rssMaxDifference <- 2 # now in configuration.R\n      rssDifference <- 0\n      \n      firstRssiDummy <- -1000\n      firstRssi <- firstRssiDummy # impossible rssi, so 1st iteration of loop actuates\n      \n      while (rssDifference <= rssMaxDifference)\n      {\n        sendersNthPackets <- subset(sendersNthPackets, receiver!=theWinningReceiver)\n        if (nrow(sendersNthPackets) == 0) # if there was only one receiver, strange measurement!.\n          break\n        sendersNthPackets <- sendersNthPackets[order(-sendersNthPackets[,\"rssi\"]),]  # reorder by rssi, big to small\n        \n        theWinningReceiver <- as.numeric(as.character(sendersNthPackets[1,\"receiver\"])) # find the receiver with best rssi\n        theWinningRssi <- as.numeric(as.character(sendersNthPackets[1,\"rssi\"])) # find the rssi of the best receiver\n        \n        rssDifference <- firstRssi - theWinningRssi\n        #cat(\"rssDifference=\",rssDifference, \"firstRssi=\",firstRssi, \"theWinningRssi=\",theWinningRssi,\"theWinningReceiver=\",theWinningReceiver , \"at c =\",c,\"n =\",n,\"for sender:\",s,\"\\n\")\n        \n        if(rssDifference <= rssMaxDifference && !is.na(theWinningReceiver))\n        {\n          ## Add to the table\n          \n          if(is.na(sendersFreqTable[as.character(theWinningReceiver)]))\n            sendersFreqTable[as.character(theWinningReceiver)]<-0\n          sendersFreqTable[as.character(theWinningReceiver)] <- sendersFreqTable[as.character(theWinningReceiver)]+1\n          \n        }\n        else\n          next\n        \n        if (firstRssi == firstRssiDummy)  # set just once\n          firstRssi <- theWinningRssi\n      }\n      \n      if (c==13 && FALSE)\n      {stop (\"Stopped after c=13\"); warning (\"warning iste.\")}\n    } # for n\n  } # for c\n  sendersFreqTable <- sendersFreqTable[-which(names(sendersFreqTable)==placeHolderStr)]\n  return (sendersFreqTable)\n}\n\nFASTgetSendersFreqTable <- function (allPackets, theSender, excludeList=NULL, includeList=NULL) {\n  \n  ## dd<-ddply(packets,c(\"sender\",\"channel\",\"packetnum\"), function(DF) DF[DF$rssi == max(DF$rssi),c(-5,-6)])\n  ## names(dd)[4]<-\"max_rssi\"\n  \n  if (is.null(excludeList) && is.null(includeList)) \n  {\n    thisFunctionsName <- match.call()[[1]]\n    stop (paste(\"In \", thisFunctionsName,\", excludeList and includeList cannot be both NULL!\"))\n  } \n  else if (!is.null(excludeList) && !is.null(includeList)) \n  {\n    thisFunctionsName <- match.call()[[1]]\n    stop (paste(\"In \", thisFunctionsName,\", excludeList and includeList cannot be both non-NULL!\"))\n  } \n  else if (!is.null(excludeList)) \n    senderPackets <- subset(allPackets, sender == theSender & !(receiver %in% excludeList), select=c(-time,-power)) \n  else if (!is.null(includeList))\n    senderPackets <- subset(allPackets, sender == theSender & (receiver %in% includeList), select=c(-time,-power))\n  \n  if (!exists(\"senderPackets\") || nrow(senderPackets)==0)\n    stop(paste(\"No packets found from sender\",theSender,\"to receivers:\",paste(excludeList,sep=','),paste(includeList,sep=',')))\n  \n  packetNums <- unique(senderPackets$packetnum)\n  channelSet <- unique(packets$channel)\n  \n  placeHolderStr <- \"placeholder\"\n  sendersFreqTable<-c()\n  sendersFreqTable[placeHolderStr] <- -999\n  for (c in channelSet) \n  {\n    for (n in packetNums) \n    {\n      sendersNthPackets <- subset(senderPackets,packetnum==n&channel==c)   # find all reports for {s, c, n}\n      theWinningReceiver <- -9999 #impossible receiver\n      \n      #rssMaxDifference <- 2 # now in configuration.R\n      rssDifference <- 0\n      \n      firstRssiDummy <- -1000\n      firstRssi <- firstRssiDummy # impossible rssi, so 1st iteration of loop actuates\n      \n      while (rssDifference <= rssMaxDifference)\n      {\n        sendersNthPackets <- subset(sendersNthPackets, receiver!=theWinningReceiver)\n        if (nrow(sendersNthPackets) == 0) # if there was only one receiver, strange measurement!.\n          break\n        sendersNthPackets <- sendersNthPackets[order(-sendersNthPackets[,\"rssi\"]),]  # reorder by rssi, big to small\n        \n        theWinningReceiver <- as.numeric(as.character(sendersNthPackets[1,\"receiver\"])) # find the receiver with best rssi\n        theWinningRssi <- as.numeric(as.character(sendersNthPackets[1,\"rssi\"])) # find the rssi of the best receiver\n        \n        rssDifference <- firstRssi - theWinningRssi\n        #cat(\"rssDifference=\",rssDifference, \"firstRssi=\",firstRssi, \"theWinningRssi=\",theWinningRssi,\"theWinningReceiver=\",theWinningReceiver , \"at c =\",c,\"n =\",n,\"for sender:\",s,\"\\n\")\n        \n        if(rssDifference <= rssMaxDifference && !is.na(theWinningReceiver))\n        {\n          ## Add to the table\n          \n          if(is.na(sendersFreqTable[as.character(theWinningReceiver)]))\n            sendersFreqTable[as.character(theWinningReceiver)]<-0\n          sendersFreqTable[as.character(theWinningReceiver)] <- sendersFreqTable[as.character(theWinningReceiver)]+1\n          \n        }\n        else\n          next\n        \n        if (firstRssi == firstRssiDummy)  # set just once\n          firstRssi <- theWinningRssi\n      }\n      \n      if (c==13 && FALSE)\n      {stop (\"Stopped after c=13\"); warning (\"warning iste.\")}\n    } # for n\n  } # for c\n  sendersFreqTable <- sendersFreqTable[-which(names(sendersFreqTable)==placeHolderStr)]\n  return (sendersFreqTable)\n}\n",
    "created" : 1389887189059.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "16|49|34|0|\n36|100|117|0|\n119|93|193|0|\n195|97|272|0|\n",
    "hash" : "2770143656",
    "id" : "6240FDE9",
    "lastKnownWriteTime" : 1416494475,
    "last_content_update" : 0,
    "path" : "~/phd/R/probabilisticSeq/userFunctions.R",
    "project_path" : "userFunctions.R",
    "properties" : {
    },
    "relative_order" : 0,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}