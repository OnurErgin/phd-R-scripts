library("ggplot2")
#library("RColorBrewer")

source("multiplot.R")

expID <- 9

if (expID == 1) 
{
  files <- Sys.glob("verify/verify4thFlSouthWindow2ndRowNormal/*verify*txt")
  expName <- "4th-Fl-South-Window2ndRow-Normal"
} else 
  if (expID == 2) 
  {
    files <- Sys.glob("verify/verify4thFlSouthWindow2ndRowReverse/verifyVerdicts-*.txt")
    expName <- "4th-Fl-South-Window2ndRow-Reverse"
  } else 
    if (expID == 3) 
    {
      files <- Sys.glob("verify/verify4thFlNorthSideWindow/4thFloorNorthSide-nointerference-verify1-300.txt")
      expName <- "4th-Fl-North-Window-Normal-NoInterference"
    } else 
      if (expID == 4) 
      {
        files <- Sys.glob("verify/verify4thFlNorthSideWindow/4thFloorNorthSide-with3interferers-verify1-300.txt")
        expName <- "4th-Fl-North-Window-Normal-With3Interferers"
      } else 
        if (expID == 5) 
        {
          files <- Sys.glob("verify/verify4thFlNorthSideWindow/4thFloorNorthSide-with1interferers-verify301-600.txt")
          expName <- "4th-Fl-North-Window-Normal-With1Interferer"
        } else 
          if (expID == 6) 
          {
            files <- Sys.glob("verify/4thFlSouth1stRowFailedOnes-verify.txt")
            expName <- "4th-Fl-South-Window1stRow-Reverse"
          } else 
            if (expID == 7) 
            {
              files <- Sys.glob("verify/4thFloorNorthSide-nointerference-Reverse-verify1-300.txt")
              expName <- "4th-Fl-North-Window1stRow-Reverse-noInterferer"
            } else 
              if (expID == 8) 
              {
                files <- Sys.glob("verify/4thFloorNorthSide-1interferer-Reverse-verify301-600.txt")
                expName <- "4th-Fl-North-Window1stRow-Reverse-with1interferer"
              } else 
                if (expID == 9) 
                {
                  files <- Sys.glob("verify/4thFloorNorthSide-3interferers-Reverse-verify1-300.txt")
                  expName <- "4th-Fl-North-Window1stRow-Reverse-with3interferers"
                }
      

joinReports <- function(files) {
  verifyDF <- data.frame()
  for (f in files)
    verifyDF <- rbind(verifyDF, read.table(f, header=TRUE, stringsAsFactors=FALSE))
  
  expNoOrder <- with(verifyDF,order(expNo))
  verifyDF <- verifyDF[expNoOrder,]
  row.names(verifyDF) <- 1:nrow(verifyDF)
  return(verifyDF)
}

#Filename <- "verify/4thFloorNorthSide-nointerference-verify1-300.txt"
#analyse <- read.table (Filename, header=TRUE)

analyse <- joinReports(files)

experiments <- unique(analyse$expNo)
success <- 0
match <- 0
truePositive <- c() # TRUE TRUE & match
falsePositive <- c() # FALSE FALSE & match

trueNegative <- c() # FALSE TRUE 
falseNegative <- c() # TRUE FALSE

for (e in experiments) {
  tExp <- subset(analyse, expNo == e)
  
  if (tExp[1,"isCorrect"])
    success <- success +1
  
  if (tExp[1,"match"])
    match <- match +1
  
  if(tExp[1,"isCorrect"] == TRUE && tExp[1,"verifyIsCorrect"] == TRUE )
    truePositive <- c(truePositive,e)
  
  if(tExp[1,"isCorrect"] == FALSE && tExp[1,"match"] == TRUE)
    falsePositive <- c(falsePositive,e)
  
  if(tExp[1,"isCorrect"] == FALSE && tExp[1,"match"] == FALSE)
    trueNegative <- c(trueNegative,e)
  
  if(tExp[1,"isCorrect"] == TRUE && tExp[1,"match"] == FALSE)
    falseNegative <- c(falseNegative,e)	
}

#matches <- subset(analyse, match == TRUE)

cat("success: ", success, "\n")
cat("match: ", match, "\n")

cat("truePositive: ", length(truePositive), "\n")
cat("falsePositive: ", length(falsePositive), "\n")
cat("trueNegative: ", length(trueNegative), "\n")
cat("falseNegative: ", length(falseNegative), "\n")

#plot(subset(analyse, expNo %in% truePositive & Rank == 1 & verifyRank ==1)$jointProb)

# expNos of Unreliable measurements
findUnreliables <- function(analyse) 
{
    unreliables <- c()
    #unreliables <- data.frame()
    for (e in unique(analyse$expNo))
    {
      tDF <- subset(analyse, expNo == e) # or tDF <- analyse[analyse$expNo==e,]
      seqStrings <- c(as.character(tDF$computedSeq),as.character(tDF$verifySeq))
      
      thisExpIsUnreliable <- FALSE
      for(s in seqStrings) {
        
        if (grepl("NA",s)) # contains NAs
        {
          thisExpIsUnreliable <- TRUE
          unreliables <- c(unreliables,e)
          #unreliables <- rbind(unreliables, tDF)
            break
        } 
        else
        { 
          splitted <- as.data.frame(strsplit(s,","))
          if (TRUE %in% (splitted == 0)) # contains 0s
          {
            thisExpIsUnreliable <- TRUE
            unreliables <- c(unreliables,e)
            #unreliables <- rbind(unreliables, tDF)
              break
          }
        }        
      } #for s
    } #for e
    return(unreliables)
}

unreliableExpNos <- findUnreliables(analyse)
unReliable <- subset(analyse, expNo %in% unreliableExpNos & Rank == 1 & verifyRank == 1)

data.frame() -> 
                weakResult ->     # no-match
                lowReliable ->    # n-match, rank=2
                mediumReliable -> # n-match, rank=1 OR 1-match, rank=2
                highReliable;     # 1-match, rank=1

for (e in unique(analyse$expNo)) 
{
  if(e %in% unreliableExpNos)
    next
  expDF <- subset(analyse, expNo == e)
  
  matchDegree <- sum(expDF$match)
  
  #no-match
  if(matchDegree == 0)
  {
    weakResult <- rbind(weakResult, subset(expDF, Rank == 1 & verifyRank == 1));
  }
  else if (matchDegree == 1) # 1-match
  {
    finalChoice <- subset(expDF, match == TRUE)
    
    if ( finalChoice$Rank == 1)
    {  highReliable <- rbind(highReliable, finalChoice)}
    else 
    {
      if (finalChoice$Rank == 2)
        mediumReliable <- rbind(mediumReliable, finalChoice);
    }
  } 
  else if (matchDegree > 1) # n-match, make Final Choice by max(verifyIsCorrect)
  {
    rowWithMaxProb <- which(expDF==max(expDF$verifyProb),arr.ind=TRUE)[,"row"]
    
    finalChoice <- expDF[rowWithMaxProb,]
    
    if (finalChoice$Rank == 1)
      mediumReliable <- rbind(mediumReliable,finalChoice)
    else 
    {
      if (finalChoice$Rank == 2)
        lowReliable <- rbind(lowReliable,finalChoice)
    }
  }
}

verifiedSuccess <- sum(highReliable$isCorrect,mediumReliable$isCorrect, lowReliable$isCorrect, weakResult$isCorrect)

# Combine all to summarise
if (nrow(highReliable)>0)   highReliable$reliability    <- "high"
if (nrow(mediumReliable)>0) mediumReliable$reliability  <- "medium"
if (nrow(lowReliable)>0)    lowReliable$reliability     <- "low"
if (nrow(weakResult)>0)     weakResult$reliability      <- "weak"
if (nrow(unReliable)>0)     unReliable$reliability      <- "unreliable"

# Draw histogram:
finalVerdicts <- rbind(highReliable, mediumReliable, lowReliable, weakResult, unReliable)
finalVerdicts$reliability <- factor(finalVerdicts$reliability, levels=c("high","medium", "low", "weak", "unreliable"))

titleTxt <- paste(expName,
                  "\nSuccess=",success,"/",length(experiments),"(",round(success/length(experiments),digit=4)*100,"%)\n",
                  "Verified Success=", verifiedSuccess, "/",length(experiments),"(",round(verifiedSuccess/length(experiments),digits=4)*100,"%)\n")

p1 <- ggplot(finalVerdicts, aes(x=reliability, fill=isCorrect))
p1 <- p1 + geom_bar() + ylab("Number Of Experiments")
p1 <- p1 + scale_fill_brewer("Verdict",palette="Paired") + guides(fill=guide_legend(reverse=TRUE))
p1 <- p1 + ggtitle(titleTxt) + theme(panel.background=element_rect(fill="#F7F7F7"))
#p <- p+facet_wrap(~Rank)
print(p1)

p1 <- p1 + text(x=0, y=-50, "HighSuccess = this") 


if(FALSE) 
{
  comparison <- data.frame()
  comparison <- rbind(comparison, data.frame(type="noVerify", verdict="success", count=success))
  comparison <- rbind(comparison, data.frame(type="noVerify", verdict="fail", count=(length(experiments)-success)))
  comparison <- rbind(comparison,data.frame(type="withVerify", verdict="success", count=verifiedSuccess))
  comparison <- rbind(comparison,data.frame(type="withVerify", verdict="fail", count=(length(experiments)-verifiedSuccess)))
    
  p2 <- ggplot(comparison, aes(x=type, y=count, fill=verdict)) 
  p2 <- p2 + geom_bar(stat="identity") + ylab("Number Of Experiments")
  print(p)
  
  multiplot(p1,p2, cols=2)
}

# scale_fill_manual(name="Verdict", values=brewer.pal(2,"Paired"), guide=guide_legend(reverse=TRUE))
# p <- p + theme(panel.background=element_rect(fill="#F0F0F0"))
# c("#F45F5A", "blue")
# 
###################################################################################################################
# library("plyr")
# plied <- ddply (analyse, .(expNo), summarize,
#                 maxJointProb = max(jointProb),
#                 verdict = function(DF) {DF[DF$jointProb == max(DF$jointProb),]$isCorrect} )
#                 //verdict = subset(isCorrect,jointProb==maxJointProb))
# plied2 <- ddply (analyse, .(expNo), summarize,
#                 maxJointProb = max(jointProb),
#                 verdict = isCorrect)

# p <- ggplot(subset(analyse, expNo %in% truePositive & Rank == 1 & verifyRank ==1), aes(y=jointProb, x=expNo))
# p <- p + geom_point(size=1)
# print(p)
# 
# maxJPDF <- data.frame()
# for (e in unique(analyse$expNo)) {
#   xDF <- subset (analyse, expNo == e)
#   xDF <- xDF[xDF$jointProb == max(xDF$jointProb),]
#   maxJPDF <- rbind(maxJPDF,xDF)
# }
# p <- ggplot(maxJPDF, aes(y=jointProb, x=expNo, color=isCorrect))
# p <- p + geom_point(size=1) + facet_grid(~match)
# print(p)
# 
# p <- ggplot(maxJPDF, aes(x=prob, fill=match))
# p <- p + geom_histogram() + facet_wrap(~isCorrect,ncol=1, nrow=2) +ggtitle ("title")
# print(p)
